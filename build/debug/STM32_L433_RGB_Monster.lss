
build/debug/STM32_L433_RGB_Monster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  08008b90  08008b90  00009b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e70  08008e70  0000a080  2**0
                  CONTENTS
  4 .ARM          00000008  08008e70  08008e70  00009e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e78  08008e78  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008e78  08008e78  00009e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008e80  08008e80  00009e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008e88  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004994  20000080  08008f08  0000a080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a14  08008f08  0000aa14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ec4b  00000000  00000000  0000a0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c11  00000000  00000000  00028d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000e659  00000000  00000000  0002c945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001558  00000000  00000000  0003afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001138  00000000  00000000  0003c4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aafc  00000000  00000000  0003d630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006e0f  00000000  00000000  0005812c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003854  00000000  00000000  0005ef3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000168  00000000  00000000  00062790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b80c 	b.w	8000b88 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f007 fe98 	bl	80088ac <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_idiv0>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__do_global_dtors_aux>:
 8000b8c:	b510      	push	{r4, lr}
 8000b8e:	4c05      	ldr	r4, [pc, #20]	@ (8000ba4 <__do_global_dtors_aux+0x18>)
 8000b90:	7823      	ldrb	r3, [r4, #0]
 8000b92:	b933      	cbnz	r3, 8000ba2 <__do_global_dtors_aux+0x16>
 8000b94:	4b04      	ldr	r3, [pc, #16]	@ (8000ba8 <__do_global_dtors_aux+0x1c>)
 8000b96:	b113      	cbz	r3, 8000b9e <__do_global_dtors_aux+0x12>
 8000b98:	4804      	ldr	r0, [pc, #16]	@ (8000bac <__do_global_dtors_aux+0x20>)
 8000b9a:	f3af 8000 	nop.w
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	7023      	strb	r3, [r4, #0]
 8000ba2:	bd10      	pop	{r4, pc}
 8000ba4:	20000080 	.word	0x20000080
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	08008b74 	.word	0x08008b74

08000bb0 <frame_dummy>:
 8000bb0:	b508      	push	{r3, lr}
 8000bb2:	4b03      	ldr	r3, [pc, #12]	@ (8000bc0 <frame_dummy+0x10>)
 8000bb4:	b11b      	cbz	r3, 8000bbe <frame_dummy+0xe>
 8000bb6:	4903      	ldr	r1, [pc, #12]	@ (8000bc4 <frame_dummy+0x14>)
 8000bb8:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <frame_dummy+0x18>)
 8000bba:	f3af 8000 	nop.w
 8000bbe:	bd08      	pop	{r3, pc}
 8000bc0:	00000000 	.word	0x00000000
 8000bc4:	20000084 	.word	0x20000084
 8000bc8:	08008b74 	.word	0x08008b74

08000bcc <NOS_PixelColor_SetColor>:
#include "NOS_BaseColors.h"

void NOS_PixelColor_SetColor(PixelColor* color,uint8_t R,uint8_t G,uint8_t B)
{
    color->R = R;
 8000bcc:	7001      	strb	r1, [r0, #0]
    color->G = G;
 8000bce:	7042      	strb	r2, [r0, #1]
    color->B = B;
 8000bd0:	7083      	strb	r3, [r0, #2]
}
 8000bd2:	4770      	bx	lr

08000bd4 <NOS_GetBaseColor>:

PixelColor NOS_GetBaseColor(NOS_BaseColors color)
{
 8000bd4:	b500      	push	{lr}
 8000bd6:	b083      	sub	sp, #12
    PixelColor result = {0,0,0};
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f88d 3000 	strb.w	r3, [sp]
 8000bde:	f88d 3001 	strb.w	r3, [sp, #1]
 8000be2:	f88d 3002 	strb.w	r3, [sp, #2]
    
    switch(color)
 8000be6:	280b      	cmp	r0, #11
 8000be8:	d80d      	bhi.n	8000c06 <NOS_GetBaseColor+0x32>
 8000bea:	e8df f000 	tbb	[pc, r0]
 8000bee:	2206      	.short	0x2206
 8000bf0:	3e373029 	.word	0x3e373029
 8000bf4:	5a534c45 	.word	0x5a534c45
 8000bf8:	6861      	.short	0x6861
    {
        case BLUE:
            NOS_PixelColor_SetColor(&result,0x00,0x00,0xFF);
 8000bfa:	23ff      	movs	r3, #255	@ 0xff
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4668      	mov	r0, sp
 8000c02:	f7ff ffe3 	bl	8000bcc <NOS_PixelColor_SetColor>
        case VIOLET:
            NOS_PixelColor_SetColor(&result,0x7F,0x00,0xFF);
        break;
        
    }
    return result;
 8000c06:	9b00      	ldr	r3, [sp, #0]
 8000c08:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000c0c:	0c1b      	lsrs	r3, r3, #16
 8000c0e:	f88d 3006 	strb.w	r3, [sp, #6]
 8000c12:	2000      	movs	r0, #0
 8000c14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000c18:	f363 0007 	bfi	r0, r3, #0, #8
 8000c1c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000c20:	f363 200f 	bfi	r0, r3, #8, #8
 8000c24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000c28:	f363 4017 	bfi	r0, r3, #16, #8
 8000c2c:	b003      	add	sp, #12
 8000c2e:	f85d fb04 	ldr.w	pc, [sp], #4
            NOS_PixelColor_SetColor(&result,0x00,0x7F,0xFF);
 8000c32:	23ff      	movs	r3, #255	@ 0xff
 8000c34:	227f      	movs	r2, #127	@ 0x7f
 8000c36:	2100      	movs	r1, #0
 8000c38:	4668      	mov	r0, sp
 8000c3a:	f7ff ffc7 	bl	8000bcc <NOS_PixelColor_SetColor>
        break;
 8000c3e:	e7e2      	b.n	8000c06 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0x00,0xFF,0xFF);
 8000c40:	23ff      	movs	r3, #255	@ 0xff
 8000c42:	461a      	mov	r2, r3
 8000c44:	2100      	movs	r1, #0
 8000c46:	4668      	mov	r0, sp
 8000c48:	f7ff ffc0 	bl	8000bcc <NOS_PixelColor_SetColor>
        break;
 8000c4c:	e7db      	b.n	8000c06 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0x00,0xFF,0x7F);
 8000c4e:	237f      	movs	r3, #127	@ 0x7f
 8000c50:	22ff      	movs	r2, #255	@ 0xff
 8000c52:	2100      	movs	r1, #0
 8000c54:	4668      	mov	r0, sp
 8000c56:	f7ff ffb9 	bl	8000bcc <NOS_PixelColor_SetColor>
        break;
 8000c5a:	e7d4      	b.n	8000c06 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0x00,0xFF,0x00);
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	22ff      	movs	r2, #255	@ 0xff
 8000c60:	4619      	mov	r1, r3
 8000c62:	4668      	mov	r0, sp
 8000c64:	f7ff ffb2 	bl	8000bcc <NOS_PixelColor_SetColor>
        break;
 8000c68:	e7cd      	b.n	8000c06 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0x7F,0xFF,0x00);
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	22ff      	movs	r2, #255	@ 0xff
 8000c6e:	217f      	movs	r1, #127	@ 0x7f
 8000c70:	4668      	mov	r0, sp
 8000c72:	f7ff ffab 	bl	8000bcc <NOS_PixelColor_SetColor>
        break;
 8000c76:	e7c6      	b.n	8000c06 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0xFF,0xFF,0x00);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	22ff      	movs	r2, #255	@ 0xff
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4668      	mov	r0, sp
 8000c80:	f7ff ffa4 	bl	8000bcc <NOS_PixelColor_SetColor>
        break;
 8000c84:	e7bf      	b.n	8000c06 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0xFF,0x7F,0x00);
 8000c86:	2300      	movs	r3, #0
 8000c88:	227f      	movs	r2, #127	@ 0x7f
 8000c8a:	21ff      	movs	r1, #255	@ 0xff
 8000c8c:	4668      	mov	r0, sp
 8000c8e:	f7ff ff9d 	bl	8000bcc <NOS_PixelColor_SetColor>
        break;
 8000c92:	e7b8      	b.n	8000c06 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0xFF,0x00,0x00);
 8000c94:	2300      	movs	r3, #0
 8000c96:	461a      	mov	r2, r3
 8000c98:	21ff      	movs	r1, #255	@ 0xff
 8000c9a:	4668      	mov	r0, sp
 8000c9c:	f7ff ff96 	bl	8000bcc <NOS_PixelColor_SetColor>
        break;
 8000ca0:	e7b1      	b.n	8000c06 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0xFF,0x00,0x7F);
 8000ca2:	237f      	movs	r3, #127	@ 0x7f
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	21ff      	movs	r1, #255	@ 0xff
 8000ca8:	4668      	mov	r0, sp
 8000caa:	f7ff ff8f 	bl	8000bcc <NOS_PixelColor_SetColor>
        break;
 8000cae:	e7aa      	b.n	8000c06 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0xFF,0x00,0xFF);
 8000cb0:	23ff      	movs	r3, #255	@ 0xff
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4668      	mov	r0, sp
 8000cb8:	f7ff ff88 	bl	8000bcc <NOS_PixelColor_SetColor>
        break;
 8000cbc:	e7a3      	b.n	8000c06 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0x7F,0x00,0xFF);
 8000cbe:	23ff      	movs	r3, #255	@ 0xff
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	217f      	movs	r1, #127	@ 0x7f
 8000cc4:	4668      	mov	r0, sp
 8000cc6:	f7ff ff81 	bl	8000bcc <NOS_PixelColor_SetColor>
        break;
 8000cca:	e79c      	b.n	8000c06 <NOS_GetBaseColor+0x32>

08000ccc <NOS_Math_GetSinValue>:
}

int NOS_Math_GetSinValue(SinValue* value)
{
    return value->value;
}
 8000ccc:	6800      	ldr	r0, [r0, #0]
 8000cce:	4770      	bx	lr

08000cd0 <NOS_Math_SinValue_Handler>:

void NOS_Math_SinValue_Handler(SinValue* value)
{
    if(value->rise)
 8000cd0:	7c03      	ldrb	r3, [r0, #16]
 8000cd2:	b163      	cbz	r3, 8000cee <NOS_Math_SinValue_Handler+0x1e>
    {
        value->value += value->increment;
 8000cd4:	6803      	ldr	r3, [r0, #0]
 8000cd6:	68c2      	ldr	r2, [r0, #12]
 8000cd8:	4413      	add	r3, r2
 8000cda:	6003      	str	r3, [r0, #0]
        if(value->value > value->maxValue)
 8000cdc:	6882      	ldr	r2, [r0, #8]
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	dd13      	ble.n	8000d0a <NOS_Math_SinValue_Handler+0x3a>
        {
            value->value = value->maxValue;
 8000ce2:	6002      	str	r2, [r0, #0]
            value->rise = false;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	7403      	strb	r3, [r0, #16]
            value->fall = true;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	7443      	strb	r3, [r0, #17]
 8000cec:	4770      	bx	lr
        }
    }
    else if(value->fall)
 8000cee:	7c43      	ldrb	r3, [r0, #17]
 8000cf0:	b15b      	cbz	r3, 8000d0a <NOS_Math_SinValue_Handler+0x3a>
    {
        value->value -= value->increment;
 8000cf2:	6803      	ldr	r3, [r0, #0]
 8000cf4:	68c2      	ldr	r2, [r0, #12]
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	6003      	str	r3, [r0, #0]
        if(value->value < value->minValue)
 8000cfa:	6842      	ldr	r2, [r0, #4]
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	da04      	bge.n	8000d0a <NOS_Math_SinValue_Handler+0x3a>
        {
            value->value = value->minValue;
 8000d00:	6002      	str	r2, [r0, #0]
            value->fall = false;
 8000d02:	2300      	movs	r3, #0
 8000d04:	7443      	strb	r3, [r0, #17]
            value->rise = true;
 8000d06:	2301      	movs	r3, #1
 8000d08:	7403      	strb	r3, [r0, #16]
        }
    }
}
 8000d0a:	4770      	bx	lr

08000d0c <NOS_Math_SinValue_Init>:

void NOS_Math_SinValue_Init(SinValue* value,int minValue,int maxValue,int increment)
{
    value->value = minValue;
 8000d0c:	6001      	str	r1, [r0, #0]
    value->minValue = minValue;
 8000d0e:	6041      	str	r1, [r0, #4]
    value->maxValue = maxValue;
 8000d10:	6082      	str	r2, [r0, #8]
    value->rise = true;
 8000d12:	2201      	movs	r2, #1
 8000d14:	7402      	strb	r2, [r0, #16]
    value->fall = false;
 8000d16:	2200      	movs	r2, #0
 8000d18:	7442      	strb	r2, [r0, #17]
    value->increment = increment;
 8000d1a:	60c3      	str	r3, [r0, #12]
 8000d1c:	4770      	bx	lr

08000d1e <NOS_Strip_UART_ParseCommand>:
#include "NOS_Strip_UART.h"
#include "NOS_WS2812B_Strip.h"

bool NOS_Strip_UART_ParseCommand(WS2812B_Strip* strip,UART_Message* message)
{
 8000d1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d22:	b095      	sub	sp, #84	@ 0x54
 8000d24:	4606      	mov	r6, r0
 8000d26:	460d      	mov	r5, r1
 8000d28:	2400      	movs	r4, #0
    int currPos = 0;
    NOS_Short tempShort;
    Effect_Struct tempEffect = {0};
 8000d2a:	222c      	movs	r2, #44	@ 0x2c
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	a809      	add	r0, sp, #36	@ 0x24
 8000d30:	f005 fe85 	bl	8006a3e <memset>
    PixelColor color = NOS_GetBaseColor(GREEN);
 8000d34:	2004      	movs	r0, #4
 8000d36:	f7ff ff4d 	bl	8000bd4 <NOS_GetBaseColor>
 8000d3a:	f88d 0020 	strb.w	r0, [sp, #32]
 8000d3e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000d42:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8000d46:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8000d4a:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
    NOS_WS2812B_Strip_Effect_Init(&tempEffect,&color,0,0,0,0,0,0,0,0,0,0);
 8000d4e:	9407      	str	r4, [sp, #28]
 8000d50:	9406      	str	r4, [sp, #24]
 8000d52:	9405      	str	r4, [sp, #20]
 8000d54:	9404      	str	r4, [sp, #16]
 8000d56:	9403      	str	r4, [sp, #12]
 8000d58:	9402      	str	r4, [sp, #8]
 8000d5a:	9401      	str	r4, [sp, #4]
 8000d5c:	9400      	str	r4, [sp, #0]
 8000d5e:	4623      	mov	r3, r4
 8000d60:	4622      	mov	r2, r4
 8000d62:	a908      	add	r1, sp, #32
 8000d64:	a809      	add	r0, sp, #36	@ 0x24
 8000d66:	f001 f853 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>

    switch (message->command.data)
 8000d6a:	68eb      	ldr	r3, [r5, #12]
 8000d6c:	3b10      	subs	r3, #16
 8000d6e:	2b43      	cmp	r3, #67	@ 0x43
 8000d70:	f200 8219 	bhi.w	80011a6 <NOS_Strip_UART_ParseCommand+0x488>
 8000d74:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000d78:	02170044 	.word	0x02170044
 8000d7c:	02170217 	.word	0x02170217
 8000d80:	02170217 	.word	0x02170217
 8000d84:	02170217 	.word	0x02170217
 8000d88:	02170217 	.word	0x02170217
 8000d8c:	02170217 	.word	0x02170217
 8000d90:	02170217 	.word	0x02170217
 8000d94:	02170217 	.word	0x02170217
 8000d98:	02170217 	.word	0x02170217
 8000d9c:	02170217 	.word	0x02170217
 8000da0:	02170217 	.word	0x02170217
 8000da4:	02170217 	.word	0x02170217
 8000da8:	02170217 	.word	0x02170217
 8000dac:	02170217 	.word	0x02170217
 8000db0:	02170217 	.word	0x02170217
 8000db4:	02170217 	.word	0x02170217
 8000db8:	01b401a2 	.word	0x01b401a2
 8000dbc:	021701d7 	.word	0x021701d7
 8000dc0:	01ea0217 	.word	0x01ea0217
 8000dc4:	02170217 	.word	0x02170217
 8000dc8:	02170217 	.word	0x02170217
 8000dcc:	02170217 	.word	0x02170217
 8000dd0:	02170217 	.word	0x02170217
 8000dd4:	02170217 	.word	0x02170217
 8000dd8:	02170217 	.word	0x02170217
 8000ddc:	02170217 	.word	0x02170217
 8000de0:	02170217 	.word	0x02170217
 8000de4:	02170217 	.word	0x02170217
 8000de8:	02170217 	.word	0x02170217
 8000dec:	02170217 	.word	0x02170217
 8000df0:	02170217 	.word	0x02170217
 8000df4:	02170217 	.word	0x02170217
 8000df8:	00b3005a 	.word	0x00b3005a
 8000dfc:	0165010c 	.word	0x0165010c
    {
        case SET_STRIP_PIXEL_COUNT:

        tempShort.bytes[1] = message->data[currPos++];
 8000e00:	7c2b      	ldrb	r3, [r5, #16]
 8000e02:	f04f 0100 	mov.w	r1, #0
 8000e06:	f363 210f 	bfi	r1, r3, #8, #8
        tempShort.bytes[0] = message->data[currPos++];
 8000e0a:	7c6b      	ldrb	r3, [r5, #17]
 8000e0c:	f363 0107 	bfi	r1, r3, #0, #8


        if(tempShort.data > 0 && tempShort.data <= 512)
 8000e10:	b28c      	uxth	r4, r1
 8000e12:	1e63      	subs	r3, r4, #1
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e1a:	d301      	bcc.n	8000e20 <NOS_Strip_UART_ParseCommand+0x102>
        {
            NOS_WS2812B_Strip_Clear(strip);
            strip->pixelCount = tempShort.data;
        }
        
        return true;
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	e1c3      	b.n	80011a8 <NOS_Strip_UART_ParseCommand+0x48a>
            NOS_WS2812B_Strip_Clear(strip);
 8000e20:	4630      	mov	r0, r6
 8000e22:	f000 ff69 	bl	8001cf8 <NOS_WS2812B_Strip_Clear>
            strip->pixelCount = tempShort.data;
 8000e26:	60b4      	str	r4, [r6, #8]
        return true;
 8000e28:	2001      	movs	r0, #1
 8000e2a:	e1bd      	b.n	80011a8 <NOS_Strip_UART_ParseCommand+0x48a>
        break;

    case SET_EFFECT_BREATHE:

            if(message->data[currPos++] == EFFECT_BREATHE_ID)
 8000e2c:	7c2b      	ldrb	r3, [r5, #16]
 8000e2e:	2b20      	cmp	r3, #32
 8000e30:	d04e      	beq.n	8000ed0 <NOS_Strip_UART_ParseCommand+0x1b2>
            {
                tempEffect.effectId = EFFECT_BREATHE_ID;
            }

            if(message->data[currPos++] == 0xFF)
 8000e32:	7c6b      	ldrb	r3, [r5, #17]
 8000e34:	2bff      	cmp	r3, #255	@ 0xff
 8000e36:	d04e      	beq.n	8000ed6 <NOS_Strip_UART_ParseCommand+0x1b8>
            {
                tempEffect.enabled = true;
            }
            else
            {
                tempEffect.enabled = false;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
            }

            tempShort.bytes[1] = message->data[currPos++];
 8000e3e:	7cab      	ldrb	r3, [r5, #18]
 8000e40:	f04f 0100 	mov.w	r1, #0
 8000e44:	f363 210f 	bfi	r1, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 8000e48:	7ceb      	ldrb	r3, [r5, #19]
 8000e4a:	f363 0107 	bfi	r1, r3, #0, #8
            uint16_t speed = tempShort.data;
 8000e4e:	b28a      	uxth	r2, r1

            tempShort.bytes[1] = message->data[currPos++];
 8000e50:	7d2b      	ldrb	r3, [r5, #20]
 8000e52:	f363 210f 	bfi	r1, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 8000e56:	7d6b      	ldrb	r3, [r5, #21]
 8000e58:	f363 0107 	bfi	r1, r3, #0, #8
            uint16_t step = tempShort.data;
 8000e5c:	b28b      	uxth	r3, r1

            tempShort.bytes[1] = message->data[currPos++];
 8000e5e:	7da8      	ldrb	r0, [r5, #22]
 8000e60:	f360 210f 	bfi	r1, r0, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 8000e64:	7de8      	ldrb	r0, [r5, #23]
 8000e66:	f360 0107 	bfi	r1, r0, #0, #8
            uint16_t min = tempShort.data;
 8000e6a:	b28c      	uxth	r4, r1

            tempShort.bytes[1] = message->data[currPos++];
 8000e6c:	7e28      	ldrb	r0, [r5, #24]
 8000e6e:	f360 210f 	bfi	r1, r0, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 8000e72:	7e68      	ldrb	r0, [r5, #25]
 8000e74:	f360 0107 	bfi	r1, r0, #0, #8
            uint16_t max = tempShort.data;
 8000e78:	b289      	uxth	r1, r1

            tempEffect.color.R = message->data[currPos++];
 8000e7a:	7ea8      	ldrb	r0, [r5, #26]
 8000e7c:	f88d 004a 	strb.w	r0, [sp, #74]	@ 0x4a
            tempEffect.color.G = message->data[currPos++];
 8000e80:	7ee8      	ldrb	r0, [r5, #27]
 8000e82:	f88d 004b 	strb.w	r0, [sp, #75]	@ 0x4b
            tempEffect.color.B = message->data[currPos++];
 8000e86:	7f28      	ldrb	r0, [r5, #28]
 8000e88:	f88d 004c 	strb.w	r0, [sp, #76]	@ 0x4c

            NOS_WS2812B_Strip_Effect_Init(&tempEffect,&tempEffect.color,speed,step,min,max,0,0,0,0,tempEffect.effectId,tempEffect.enabled);
 8000e8c:	af09      	add	r7, sp, #36	@ 0x24
 8000e8e:	f89d 004d 	ldrb.w	r0, [sp, #77]	@ 0x4d
 8000e92:	9007      	str	r0, [sp, #28]
 8000e94:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8000e98:	9006      	str	r0, [sp, #24]
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	9005      	str	r0, [sp, #20]
 8000e9e:	9004      	str	r0, [sp, #16]
 8000ea0:	9003      	str	r0, [sp, #12]
 8000ea2:	9002      	str	r0, [sp, #8]
 8000ea4:	9101      	str	r1, [sp, #4]
 8000ea6:	9400      	str	r4, [sp, #0]
 8000ea8:	f10d 014a 	add.w	r1, sp, #74	@ 0x4a
 8000eac:	4638      	mov	r0, r7
 8000eae:	f000 ffaf 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
            NOS_WS2812B_Strip_Effects_UpdateEffect(strip,tempEffect);
 8000eb2:	466c      	mov	r4, sp
 8000eb4:	ad0c      	add	r5, sp, #48	@ 0x30
 8000eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ebe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ec2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	f001 f8af 	bl	800202a <NOS_WS2812B_Strip_Effects_UpdateEffect>

            return true;       
 8000ecc:	2001      	movs	r0, #1
 8000ece:	e16b      	b.n	80011a8 <NOS_Strip_UART_ParseCommand+0x48a>
                tempEffect.effectId = EFFECT_BREATHE_ID;
 8000ed0:	f88d 304e 	strb.w	r3, [sp, #78]	@ 0x4e
 8000ed4:	e7ad      	b.n	8000e32 <NOS_Strip_UART_ParseCommand+0x114>
                tempEffect.enabled = true;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
 8000edc:	e7af      	b.n	8000e3e <NOS_Strip_UART_ParseCommand+0x120>
            break;
    
        case SET_EFFECT_RAINBOW:

            if(message->data[currPos++] == EFFECT_RAINBOW_ID)
 8000ede:	7c2b      	ldrb	r3, [r5, #16]
 8000ee0:	2b21      	cmp	r3, #33	@ 0x21
 8000ee2:	d04e      	beq.n	8000f82 <NOS_Strip_UART_ParseCommand+0x264>
            {
                tempEffect.effectId = EFFECT_RAINBOW_ID;
            }

            if(message->data[currPos++] == 0xFF)
 8000ee4:	7c6b      	ldrb	r3, [r5, #17]
 8000ee6:	2bff      	cmp	r3, #255	@ 0xff
 8000ee8:	d04e      	beq.n	8000f88 <NOS_Strip_UART_ParseCommand+0x26a>
            {
                tempEffect.enabled = true;
            }
            else
            {
                tempEffect.enabled = false;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
            }

            tempShort.bytes[1] = message->data[currPos++];
 8000ef0:	7cab      	ldrb	r3, [r5, #18]
 8000ef2:	f04f 0100 	mov.w	r1, #0
 8000ef6:	f363 210f 	bfi	r1, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 8000efa:	7ceb      	ldrb	r3, [r5, #19]
 8000efc:	f363 0107 	bfi	r1, r3, #0, #8
            speed = tempShort.data;
 8000f00:	b28a      	uxth	r2, r1

            tempShort.bytes[1] = message->data[currPos++];
 8000f02:	7d2b      	ldrb	r3, [r5, #20]
 8000f04:	f363 210f 	bfi	r1, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 8000f08:	7d6b      	ldrb	r3, [r5, #21]
 8000f0a:	f363 0107 	bfi	r1, r3, #0, #8
            step = tempShort.data;
 8000f0e:	b28b      	uxth	r3, r1

            tempShort.bytes[1] = message->data[currPos++];
 8000f10:	7da8      	ldrb	r0, [r5, #22]
 8000f12:	f360 210f 	bfi	r1, r0, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 8000f16:	7de8      	ldrb	r0, [r5, #23]
 8000f18:	f360 0107 	bfi	r1, r0, #0, #8
            min = tempShort.data;
 8000f1c:	b28c      	uxth	r4, r1

            tempShort.bytes[1] = message->data[currPos++];
 8000f1e:	7e28      	ldrb	r0, [r5, #24]
 8000f20:	f360 210f 	bfi	r1, r0, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 8000f24:	7e68      	ldrb	r0, [r5, #25]
 8000f26:	f360 0107 	bfi	r1, r0, #0, #8
            max = tempShort.data;
 8000f2a:	b289      	uxth	r1, r1

            tempEffect.color.R = message->data[currPos++];
 8000f2c:	7ea8      	ldrb	r0, [r5, #26]
 8000f2e:	f88d 004a 	strb.w	r0, [sp, #74]	@ 0x4a
            tempEffect.color.G = message->data[currPos++];
 8000f32:	7ee8      	ldrb	r0, [r5, #27]
 8000f34:	f88d 004b 	strb.w	r0, [sp, #75]	@ 0x4b
            tempEffect.color.B = message->data[currPos++];
 8000f38:	7f28      	ldrb	r0, [r5, #28]
 8000f3a:	f88d 004c 	strb.w	r0, [sp, #76]	@ 0x4c

            NOS_WS2812B_Strip_Effect_Init(&tempEffect,&tempEffect.color,speed,step,min,max,0,0,0,0,tempEffect.effectId,tempEffect.enabled);
 8000f3e:	af09      	add	r7, sp, #36	@ 0x24
 8000f40:	f89d 004d 	ldrb.w	r0, [sp, #77]	@ 0x4d
 8000f44:	9007      	str	r0, [sp, #28]
 8000f46:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8000f4a:	9006      	str	r0, [sp, #24]
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	9005      	str	r0, [sp, #20]
 8000f50:	9004      	str	r0, [sp, #16]
 8000f52:	9003      	str	r0, [sp, #12]
 8000f54:	9002      	str	r0, [sp, #8]
 8000f56:	9101      	str	r1, [sp, #4]
 8000f58:	9400      	str	r4, [sp, #0]
 8000f5a:	f10d 014a 	add.w	r1, sp, #74	@ 0x4a
 8000f5e:	4638      	mov	r0, r7
 8000f60:	f000 ff56 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
            NOS_WS2812B_Strip_Effects_UpdateEffect(strip,tempEffect);
 8000f64:	466c      	mov	r4, sp
 8000f66:	ad0c      	add	r5, sp, #48	@ 0x30
 8000f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f74:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000f78:	4630      	mov	r0, r6
 8000f7a:	f001 f856 	bl	800202a <NOS_WS2812B_Strip_Effects_UpdateEffect>
            return true;
 8000f7e:	2001      	movs	r0, #1
 8000f80:	e112      	b.n	80011a8 <NOS_Strip_UART_ParseCommand+0x48a>
                tempEffect.effectId = EFFECT_RAINBOW_ID;
 8000f82:	f88d 304e 	strb.w	r3, [sp, #78]	@ 0x4e
 8000f86:	e7ad      	b.n	8000ee4 <NOS_Strip_UART_ParseCommand+0x1c6>
                tempEffect.enabled = true;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
 8000f8e:	e7af      	b.n	8000ef0 <NOS_Strip_UART_ParseCommand+0x1d2>
            break;

        case SET_EFFECT_DOTS:

            if(message->data[currPos++] == EFFECT_DOTS_ID)
 8000f90:	7c2b      	ldrb	r3, [r5, #16]
 8000f92:	2b22      	cmp	r3, #34	@ 0x22
 8000f94:	d04e      	beq.n	8001034 <NOS_Strip_UART_ParseCommand+0x316>
            {
                tempEffect.effectId = EFFECT_DOTS_ID;
            }

            if(message->data[currPos++] == 0xFF)
 8000f96:	7c6b      	ldrb	r3, [r5, #17]
 8000f98:	2bff      	cmp	r3, #255	@ 0xff
 8000f9a:	d04e      	beq.n	800103a <NOS_Strip_UART_ParseCommand+0x31c>
            {
                tempEffect.enabled = true;
            }
            else
            {
                tempEffect.enabled = false;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
            }

            tempShort.bytes[1] = message->data[currPos++];
 8000fa2:	7cab      	ldrb	r3, [r5, #18]
 8000fa4:	f04f 0100 	mov.w	r1, #0
 8000fa8:	f363 210f 	bfi	r1, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 8000fac:	7ceb      	ldrb	r3, [r5, #19]
 8000fae:	f363 0107 	bfi	r1, r3, #0, #8
            speed = tempShort.data;
 8000fb2:	b28a      	uxth	r2, r1

            tempShort.bytes[1] = message->data[currPos++];
 8000fb4:	7d2b      	ldrb	r3, [r5, #20]
 8000fb6:	f363 210f 	bfi	r1, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 8000fba:	7d6b      	ldrb	r3, [r5, #21]
 8000fbc:	f363 0107 	bfi	r1, r3, #0, #8
            step = tempShort.data;
 8000fc0:	b28b      	uxth	r3, r1

            tempShort.bytes[1] = message->data[currPos++];
 8000fc2:	7da8      	ldrb	r0, [r5, #22]
 8000fc4:	f360 210f 	bfi	r1, r0, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 8000fc8:	7de8      	ldrb	r0, [r5, #23]
 8000fca:	f360 0107 	bfi	r1, r0, #0, #8
            min = tempShort.data;
 8000fce:	b28c      	uxth	r4, r1

            tempShort.bytes[1] = message->data[currPos++];
 8000fd0:	7e28      	ldrb	r0, [r5, #24]
 8000fd2:	f360 210f 	bfi	r1, r0, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 8000fd6:	7e68      	ldrb	r0, [r5, #25]
 8000fd8:	f360 0107 	bfi	r1, r0, #0, #8
            max = tempShort.data;
 8000fdc:	b289      	uxth	r1, r1

            tempEffect.color.R = message->data[currPos++];
 8000fde:	7ea8      	ldrb	r0, [r5, #26]
 8000fe0:	f88d 004a 	strb.w	r0, [sp, #74]	@ 0x4a
            tempEffect.color.G = message->data[currPos++];
 8000fe4:	7ee8      	ldrb	r0, [r5, #27]
 8000fe6:	f88d 004b 	strb.w	r0, [sp, #75]	@ 0x4b
            tempEffect.color.B = message->data[currPos++];
 8000fea:	7f28      	ldrb	r0, [r5, #28]
 8000fec:	f88d 004c 	strb.w	r0, [sp, #76]	@ 0x4c

            NOS_WS2812B_Strip_Effect_Init(&tempEffect,&tempEffect.color,speed,step,min,max,0,0,0,0,tempEffect.effectId,tempEffect.enabled);
 8000ff0:	af09      	add	r7, sp, #36	@ 0x24
 8000ff2:	f89d 004d 	ldrb.w	r0, [sp, #77]	@ 0x4d
 8000ff6:	9007      	str	r0, [sp, #28]
 8000ff8:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8000ffc:	9006      	str	r0, [sp, #24]
 8000ffe:	2000      	movs	r0, #0
 8001000:	9005      	str	r0, [sp, #20]
 8001002:	9004      	str	r0, [sp, #16]
 8001004:	9003      	str	r0, [sp, #12]
 8001006:	9002      	str	r0, [sp, #8]
 8001008:	9101      	str	r1, [sp, #4]
 800100a:	9400      	str	r4, [sp, #0]
 800100c:	f10d 014a 	add.w	r1, sp, #74	@ 0x4a
 8001010:	4638      	mov	r0, r7
 8001012:	f000 fefd 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
            NOS_WS2812B_Strip_Effects_UpdateEffect(strip,tempEffect);
 8001016:	466c      	mov	r4, sp
 8001018:	ad0c      	add	r5, sp, #48	@ 0x30
 800101a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001022:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001026:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800102a:	4630      	mov	r0, r6
 800102c:	f000 fffd 	bl	800202a <NOS_WS2812B_Strip_Effects_UpdateEffect>

            return true;       
 8001030:	2001      	movs	r0, #1
 8001032:	e0b9      	b.n	80011a8 <NOS_Strip_UART_ParseCommand+0x48a>
                tempEffect.effectId = EFFECT_DOTS_ID;
 8001034:	f88d 304e 	strb.w	r3, [sp, #78]	@ 0x4e
 8001038:	e7ad      	b.n	8000f96 <NOS_Strip_UART_ParseCommand+0x278>
                tempEffect.enabled = true;
 800103a:	2301      	movs	r3, #1
 800103c:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
 8001040:	e7af      	b.n	8000fa2 <NOS_Strip_UART_ParseCommand+0x284>
            break;

        case SET_EFFECT_WALKING_PIXELS:
            
            if(message->data[currPos++] == EFFECT_DOTS_ID)
 8001042:	7c2b      	ldrb	r3, [r5, #16]
 8001044:	2b22      	cmp	r3, #34	@ 0x22
 8001046:	d032      	beq.n	80010ae <NOS_Strip_UART_ParseCommand+0x390>
            {
                tempEffect.effectId = EFFECT_DOTS_ID;
            }

            if(message->data[currPos++] == 0xFF)
 8001048:	7c6b      	ldrb	r3, [r5, #17]
 800104a:	2bff      	cmp	r3, #255	@ 0xff
 800104c:	d032      	beq.n	80010b4 <NOS_Strip_UART_ParseCommand+0x396>
            {
                tempEffect.enabled = true;
            }
            else
            {
                tempEffect.enabled = false;
 800104e:	2300      	movs	r3, #0
 8001050:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
            }

            tempEffect.color.R = message->data[currPos++];
 8001054:	7cab      	ldrb	r3, [r5, #18]
 8001056:	f88d 304a 	strb.w	r3, [sp, #74]	@ 0x4a
            tempEffect.color.G = message->data[currPos++];
 800105a:	7ceb      	ldrb	r3, [r5, #19]
 800105c:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
            tempEffect.color.B = message->data[currPos++];
 8001060:	7d2b      	ldrb	r3, [r5, #20]
 8001062:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c

            NOS_WS2812B_Strip_Effect_Init(&tempEffect,&tempEffect.color,speed,step,min,max,0,0,0,0,tempEffect.effectId,tempEffect.enabled);
 8001066:	af09      	add	r7, sp, #36	@ 0x24
 8001068:	f89d 304d 	ldrb.w	r3, [sp, #77]	@ 0x4d
 800106c:	9307      	str	r3, [sp, #28]
 800106e:	f89d 304e 	ldrb.w	r3, [sp, #78]	@ 0x4e
 8001072:	9306      	str	r3, [sp, #24]
 8001074:	2300      	movs	r3, #0
 8001076:	9305      	str	r3, [sp, #20]
 8001078:	9304      	str	r3, [sp, #16]
 800107a:	9303      	str	r3, [sp, #12]
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	9401      	str	r4, [sp, #4]
 8001080:	9400      	str	r4, [sp, #0]
 8001082:	4623      	mov	r3, r4
 8001084:	4622      	mov	r2, r4
 8001086:	f10d 014a 	add.w	r1, sp, #74	@ 0x4a
 800108a:	4638      	mov	r0, r7
 800108c:	f000 fec0 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
            NOS_WS2812B_Strip_Effects_UpdateEffect(strip,tempEffect);
 8001090:	466c      	mov	r4, sp
 8001092:	ad0c      	add	r5, sp, #48	@ 0x30
 8001094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001098:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800109c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80010a0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80010a4:	4630      	mov	r0, r6
 80010a6:	f000 ffc0 	bl	800202a <NOS_WS2812B_Strip_Effects_UpdateEffect>


            return true;
 80010aa:	2001      	movs	r0, #1
 80010ac:	e07c      	b.n	80011a8 <NOS_Strip_UART_ParseCommand+0x48a>
                tempEffect.effectId = EFFECT_DOTS_ID;
 80010ae:	f88d 304e 	strb.w	r3, [sp, #78]	@ 0x4e
 80010b2:	e7c9      	b.n	8001048 <NOS_Strip_UART_ParseCommand+0x32a>
                tempEffect.enabled = true;
 80010b4:	2301      	movs	r3, #1
 80010b6:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
 80010ba:	e7cb      	b.n	8001054 <NOS_Strip_UART_ParseCommand+0x336>
            break;
            
        case SET_ONE_PIXEL_COLOR_COMMAND:

            //pixelPos 
            tempShort.bytes[1] = message->data[currPos++];
 80010bc:	7c2b      	ldrb	r3, [r5, #16]
 80010be:	f04f 0100 	mov.w	r1, #0
 80010c2:	f363 210f 	bfi	r1, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 80010c6:	7c6b      	ldrb	r3, [r5, #17]
 80010c8:	f363 0107 	bfi	r1, r3, #0, #8
            int tempInt1 = tempShort.data;

            //color
            uint8_t r = message->data[currPos++];
            uint8_t g = message->data[currPos++];
            uint8_t b = message->data[currPos++];
 80010cc:	7d2b      	ldrb	r3, [r5, #20]

            NOS_WS2812B_Strip_SetPixel(strip,tempInt1,r,g,b);
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	7ceb      	ldrb	r3, [r5, #19]
 80010d2:	7caa      	ldrb	r2, [r5, #18]
 80010d4:	b289      	uxth	r1, r1
 80010d6:	4630      	mov	r0, r6
 80010d8:	f000 fdfb 	bl	8001cd2 <NOS_WS2812B_Strip_SetPixel>
            return true;
 80010dc:	2001      	movs	r0, #1
 80010de:	e063      	b.n	80011a8 <NOS_Strip_UART_ParseCommand+0x48a>
            break;

        case SET_ROW_PIXEL_COLOR_COMMAND:

            //pixelPos
            tempShort.bytes[1] = message->data[currPos++];
 80010e0:	7c2b      	ldrb	r3, [r5, #16]
 80010e2:	f04f 0100 	mov.w	r1, #0
 80010e6:	f363 210f 	bfi	r1, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 80010ea:	7c6b      	ldrb	r3, [r5, #17]
 80010ec:	f363 0107 	bfi	r1, r3, #0, #8
            tempInt1 = tempShort.data;
 80010f0:	fa1f f981 	uxth.w	r9, r1

            //pixelCount
            tempShort.bytes[1] = message->data[currPos++];
 80010f4:	7cab      	ldrb	r3, [r5, #18]
 80010f6:	f363 210f 	bfi	r1, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 80010fa:	7ceb      	ldrb	r3, [r5, #19]
 80010fc:	f363 0107 	bfi	r1, r3, #0, #8
            int tempInt2 = tempShort.data;
 8001100:	b28c      	uxth	r4, r1

            //color
            r = message->data[currPos++];
 8001102:	f895 8014 	ldrb.w	r8, [r5, #20]
            g = message->data[currPos++];
 8001106:	7d6f      	ldrb	r7, [r5, #21]
            b = message->data[currPos++];
 8001108:	7dad      	ldrb	r5, [r5, #22]

            //fill in row
            for(int i = tempInt1; i < tempInt2; i++)
 800110a:	45a1      	cmp	r9, r4
 800110c:	da09      	bge.n	8001122 <NOS_Strip_UART_ParseCommand+0x404>
            {
                    NOS_WS2812B_Strip_SetPixel(strip,i,r,g,b);
 800110e:	9500      	str	r5, [sp, #0]
 8001110:	463b      	mov	r3, r7
 8001112:	4642      	mov	r2, r8
 8001114:	4649      	mov	r1, r9
 8001116:	4630      	mov	r0, r6
 8001118:	f000 fddb 	bl	8001cd2 <NOS_WS2812B_Strip_SetPixel>
            for(int i = tempInt1; i < tempInt2; i++)
 800111c:	f109 0901 	add.w	r9, r9, #1
 8001120:	e7f3      	b.n	800110a <NOS_Strip_UART_ParseCommand+0x3ec>
            }

            return true;
 8001122:	2001      	movs	r0, #1
 8001124:	e040      	b.n	80011a8 <NOS_Strip_UART_ParseCommand+0x48a>
            break;

        case SET_ALL_PIXEL_ONE_COLOR_COMMAND:

            //color
            r = message->data[currPos++];
 8001126:	f895 8010 	ldrb.w	r8, [r5, #16]
            g = message->data[currPos++];
 800112a:	7c6f      	ldrb	r7, [r5, #17]
            b = message->data[currPos++];
 800112c:	7cad      	ldrb	r5, [r5, #18]

            //fill all pixels
            for(int i = 0; i < strip->pixelCount; i++)
 800112e:	2400      	movs	r4, #0
 8001130:	68b3      	ldr	r3, [r6, #8]
 8001132:	42a3      	cmp	r3, r4
 8001134:	dd08      	ble.n	8001148 <NOS_Strip_UART_ParseCommand+0x42a>
            {
                NOS_WS2812B_Strip_SetPixel(strip,i,r,g,b);
 8001136:	9500      	str	r5, [sp, #0]
 8001138:	463b      	mov	r3, r7
 800113a:	4642      	mov	r2, r8
 800113c:	4621      	mov	r1, r4
 800113e:	4630      	mov	r0, r6
 8001140:	f000 fdc7 	bl	8001cd2 <NOS_WS2812B_Strip_SetPixel>
            for(int i = 0; i < strip->pixelCount; i++)
 8001144:	3401      	adds	r4, #1
 8001146:	e7f3      	b.n	8001130 <NOS_Strip_UART_ParseCommand+0x412>
            }
            return true;
 8001148:	2001      	movs	r0, #1
 800114a:	e02d      	b.n	80011a8 <NOS_Strip_UART_ParseCommand+0x48a>
            break;

        case SET_ALL_PIXEL_COMMAND:

                strip->bright = 100;
 800114c:	2364      	movs	r3, #100	@ 0x64
 800114e:	60f3      	str	r3, [r6, #12]
                strip->effects[0].enabled = false;
 8001150:	2300      	movs	r3, #0
 8001152:	f886 3039 	strb.w	r3, [r6, #57]	@ 0x39
                strip->effects[1].enabled = false;
 8001156:	f886 3065 	strb.w	r3, [r6, #101]	@ 0x65
                //Pixel count
                tempShort.bytes[1] = message->data[currPos++];
 800115a:	7c2b      	ldrb	r3, [r5, #16]
 800115c:	f04f 0100 	mov.w	r1, #0
 8001160:	f363 210f 	bfi	r1, r3, #8, #8
                tempShort.bytes[0] = message->data[currPos++];
 8001164:	7c6b      	ldrb	r3, [r5, #17]
 8001166:	f363 0107 	bfi	r1, r3, #0, #8
                tempInt1 = tempShort.data;
 800116a:	b28c      	uxth	r4, r1

                if(tempInt1 <= strip->pixelCount)
 800116c:	68b3      	ldr	r3, [r6, #8]
 800116e:	42a3      	cmp	r3, r4
 8001170:	da01      	bge.n	8001176 <NOS_Strip_UART_ParseCommand+0x458>

                        NOS_WS2812B_Strip_SetPixel(strip,i,r,g,b);
                    }
                }
            
            return true;
 8001172:	2001      	movs	r0, #1
 8001174:	e018      	b.n	80011a8 <NOS_Strip_UART_ParseCommand+0x48a>
                    for(int i = 0; i < tempInt1; i++)
 8001176:	f04f 0800 	mov.w	r8, #0
                tempShort.bytes[0] = message->data[currPos++];
 800117a:	2702      	movs	r7, #2
                    for(int i = 0; i < tempInt1; i++)
 800117c:	45a0      	cmp	r8, r4
 800117e:	da10      	bge.n	80011a2 <NOS_Strip_UART_ParseCommand+0x484>
                        r = message->data[currPos++];
 8001180:	1c79      	adds	r1, r7, #1
 8001182:	19ea      	adds	r2, r5, r7
                        g = message->data[currPos++];
 8001184:	1cbb      	adds	r3, r7, #2
 8001186:	4429      	add	r1, r5
                        b = message->data[currPos++];
 8001188:	442b      	add	r3, r5
 800118a:	7c1b      	ldrb	r3, [r3, #16]
                        NOS_WS2812B_Strip_SetPixel(strip,i,r,g,b);
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	7c0b      	ldrb	r3, [r1, #16]
 8001190:	7c12      	ldrb	r2, [r2, #16]
 8001192:	3703      	adds	r7, #3
 8001194:	4641      	mov	r1, r8
 8001196:	4630      	mov	r0, r6
 8001198:	f000 fd9b 	bl	8001cd2 <NOS_WS2812B_Strip_SetPixel>
                    for(int i = 0; i < tempInt1; i++)
 800119c:	f108 0801 	add.w	r8, r8, #1
 80011a0:	e7ec      	b.n	800117c <NOS_Strip_UART_ParseCommand+0x45e>
            return true;
 80011a2:	2001      	movs	r0, #1
 80011a4:	e000      	b.n	80011a8 <NOS_Strip_UART_ParseCommand+0x48a>
    switch (message->command.data)
 80011a6:	2000      	movs	r0, #0

        break;
    }

    return false;
}
 80011a8:	b015      	add	sp, #84	@ 0x54
 80011aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080011ae <getRainbowStageFromColor>:

uint16_t getRainbowStageFromColor(PixelColor color)
{
 80011ae:	b082      	sub	sp, #8
 80011b0:	9001      	str	r0, [sp, #4]
    uint16_t result = 0;

    if(color.R == 0 && color.G == 0 && color.B == 0xFF)
 80011b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    {
        result = 0;
    }

    if(color.R == 0x0 && color.G == 0x7F && color.B == 0xFF)
 80011b6:	b95b      	cbnz	r3, 80011d0 <getRainbowStageFromColor+0x22>
 80011b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80011bc:	2a7f      	cmp	r2, #127	@ 0x7f
 80011be:	d001      	beq.n	80011c4 <getRainbowStageFromColor+0x16>
 80011c0:	2000      	movs	r0, #0
 80011c2:	e006      	b.n	80011d2 <getRainbowStageFromColor+0x24>
 80011c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80011c8:	2aff      	cmp	r2, #255	@ 0xff
 80011ca:	d021      	beq.n	8001210 <getRainbowStageFromColor+0x62>
 80011cc:	2000      	movs	r0, #0
 80011ce:	e000      	b.n	80011d2 <getRainbowStageFromColor+0x24>
 80011d0:	2000      	movs	r0, #0
    {
        result = 127;
    }

    if(color.R == 0 && color.G == 0xFF && color.B == 0xFF)
 80011d2:	b91b      	cbnz	r3, 80011dc <getRainbowStageFromColor+0x2e>
 80011d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80011d8:	2aff      	cmp	r2, #255	@ 0xff
 80011da:	d01b      	beq.n	8001214 <getRainbowStageFromColor+0x66>
    {
        result = 254;
    }

    if(color.R == 0 && color.G == 0xFF && color.B == 0x7F)
 80011dc:	b91b      	cbnz	r3, 80011e6 <getRainbowStageFromColor+0x38>
 80011de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80011e2:	2aff      	cmp	r2, #255	@ 0xff
 80011e4:	d01c      	beq.n	8001220 <getRainbowStageFromColor+0x72>
    {
        result = 381;
    }

    if(color.R == 0 && color.G == 0xFF && color.B == 0)
 80011e6:	b91b      	cbnz	r3, 80011f0 <getRainbowStageFromColor+0x42>
 80011e8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80011ec:	2aff      	cmp	r2, #255	@ 0xff
 80011ee:	d01e      	beq.n	800122e <getRainbowStageFromColor+0x80>
    {
        result = 508;
    }

    if(color.R == 0x7F && color.G == 0xFF && color.B == 0)
 80011f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80011f2:	d023      	beq.n	800123c <getRainbowStageFromColor+0x8e>
    {
        result = 635;
    }

    if(color.R == 0xFF && color.G == 0xFF && color.B == 0)
 80011f4:	2bff      	cmp	r3, #255	@ 0xff
 80011f6:	d02c      	beq.n	8001252 <getRainbowStageFromColor+0xa4>
    {
        result = 762;
    }

    if(color.R == 0xFF && color.G == 0x7F && color.B == 0)
 80011f8:	2bff      	cmp	r3, #255	@ 0xff
 80011fa:	d035      	beq.n	8001268 <getRainbowStageFromColor+0xba>
    {
        result = 889;
    }

    if(color.R == 0xFF && color.G == 0 && color.B == 0)
 80011fc:	2bff      	cmp	r3, #255	@ 0xff
 80011fe:	d03e      	beq.n	800127e <getRainbowStageFromColor+0xd0>
    {
        result = 1016;
    }

    if(color.R == 0xFF && color.G == 0 && color.B == 0x7F)
 8001200:	2bff      	cmp	r3, #255	@ 0xff
 8001202:	d047      	beq.n	8001294 <getRainbowStageFromColor+0xe6>
    {
        result = 1143;
    }

    if(color.R == 0xFF && color.G == 0 && color.B == 0xFF)
 8001204:	2bff      	cmp	r3, #255	@ 0xff
 8001206:	d050      	beq.n	80012aa <getRainbowStageFromColor+0xfc>
    {
        result = 1270;
    }

    if(color.R == 0x7F && color.G == 0 && color.B == 0xFF)
 8001208:	2b7f      	cmp	r3, #127	@ 0x7f
 800120a:	d059      	beq.n	80012c0 <getRainbowStageFromColor+0x112>
    {
        result = 1397;
    }
    
    return result;
}
 800120c:	b002      	add	sp, #8
 800120e:	4770      	bx	lr
        result = 127;
 8001210:	207f      	movs	r0, #127	@ 0x7f
 8001212:	e7de      	b.n	80011d2 <getRainbowStageFromColor+0x24>
    if(color.R == 0 && color.G == 0xFF && color.B == 0xFF)
 8001214:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001218:	2aff      	cmp	r2, #255	@ 0xff
 800121a:	d1df      	bne.n	80011dc <getRainbowStageFromColor+0x2e>
        result = 254;
 800121c:	20fe      	movs	r0, #254	@ 0xfe
 800121e:	e7dd      	b.n	80011dc <getRainbowStageFromColor+0x2e>
    if(color.R == 0 && color.G == 0xFF && color.B == 0x7F)
 8001220:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001224:	2a7f      	cmp	r2, #127	@ 0x7f
 8001226:	d1de      	bne.n	80011e6 <getRainbowStageFromColor+0x38>
        result = 381;
 8001228:	f240 107d 	movw	r0, #381	@ 0x17d
 800122c:	e7db      	b.n	80011e6 <getRainbowStageFromColor+0x38>
    if(color.R == 0 && color.G == 0xFF && color.B == 0)
 800122e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001232:	2a00      	cmp	r2, #0
 8001234:	d1dc      	bne.n	80011f0 <getRainbowStageFromColor+0x42>
        result = 508;
 8001236:	f44f 70fe 	mov.w	r0, #508	@ 0x1fc
 800123a:	e7d9      	b.n	80011f0 <getRainbowStageFromColor+0x42>
    if(color.R == 0x7F && color.G == 0xFF && color.B == 0)
 800123c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001240:	2aff      	cmp	r2, #255	@ 0xff
 8001242:	d1d7      	bne.n	80011f4 <getRainbowStageFromColor+0x46>
 8001244:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001248:	2a00      	cmp	r2, #0
 800124a:	d1d3      	bne.n	80011f4 <getRainbowStageFromColor+0x46>
        result = 635;
 800124c:	f240 207b 	movw	r0, #635	@ 0x27b
 8001250:	e7d0      	b.n	80011f4 <getRainbowStageFromColor+0x46>
    if(color.R == 0xFF && color.G == 0xFF && color.B == 0)
 8001252:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001256:	2aff      	cmp	r2, #255	@ 0xff
 8001258:	d1ce      	bne.n	80011f8 <getRainbowStageFromColor+0x4a>
 800125a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800125e:	2a00      	cmp	r2, #0
 8001260:	d1ca      	bne.n	80011f8 <getRainbowStageFromColor+0x4a>
        result = 762;
 8001262:	f240 20fa 	movw	r0, #762	@ 0x2fa
 8001266:	e7c7      	b.n	80011f8 <getRainbowStageFromColor+0x4a>
    if(color.R == 0xFF && color.G == 0x7F && color.B == 0)
 8001268:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800126c:	2a7f      	cmp	r2, #127	@ 0x7f
 800126e:	d1c5      	bne.n	80011fc <getRainbowStageFromColor+0x4e>
 8001270:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001274:	2a00      	cmp	r2, #0
 8001276:	d1c1      	bne.n	80011fc <getRainbowStageFromColor+0x4e>
        result = 889;
 8001278:	f240 3079 	movw	r0, #889	@ 0x379
 800127c:	e7be      	b.n	80011fc <getRainbowStageFromColor+0x4e>
    if(color.R == 0xFF && color.G == 0 && color.B == 0)
 800127e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001282:	2a00      	cmp	r2, #0
 8001284:	d1bc      	bne.n	8001200 <getRainbowStageFromColor+0x52>
 8001286:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800128a:	2a00      	cmp	r2, #0
 800128c:	d1b8      	bne.n	8001200 <getRainbowStageFromColor+0x52>
        result = 1016;
 800128e:	f44f 707e 	mov.w	r0, #1016	@ 0x3f8
 8001292:	e7b5      	b.n	8001200 <getRainbowStageFromColor+0x52>
    if(color.R == 0xFF && color.G == 0 && color.B == 0x7F)
 8001294:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001298:	2a00      	cmp	r2, #0
 800129a:	d1b3      	bne.n	8001204 <getRainbowStageFromColor+0x56>
 800129c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80012a0:	2a7f      	cmp	r2, #127	@ 0x7f
 80012a2:	d1af      	bne.n	8001204 <getRainbowStageFromColor+0x56>
        result = 1143;
 80012a4:	f240 4077 	movw	r0, #1143	@ 0x477
 80012a8:	e7ac      	b.n	8001204 <getRainbowStageFromColor+0x56>
    if(color.R == 0xFF && color.G == 0 && color.B == 0xFF)
 80012aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80012ae:	2a00      	cmp	r2, #0
 80012b0:	d1aa      	bne.n	8001208 <getRainbowStageFromColor+0x5a>
 80012b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80012b6:	2aff      	cmp	r2, #255	@ 0xff
 80012b8:	d1a6      	bne.n	8001208 <getRainbowStageFromColor+0x5a>
        result = 1270;
 80012ba:	f240 40f6 	movw	r0, #1270	@ 0x4f6
 80012be:	e7a3      	b.n	8001208 <getRainbowStageFromColor+0x5a>
    if(color.R == 0x7F && color.G == 0 && color.B == 0xFF)
 80012c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1a1      	bne.n	800120c <getRainbowStageFromColor+0x5e>
 80012c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80012cc:	2bff      	cmp	r3, #255	@ 0xff
 80012ce:	d19d      	bne.n	800120c <getRainbowStageFromColor+0x5e>
        result = 1397;
 80012d0:	f240 5075 	movw	r0, #1397	@ 0x575
 80012d4:	e79a      	b.n	800120c <getRainbowStageFromColor+0x5e>
	...

080012d8 <getU16ParamFromString>:

uint16_t getU16ParamFromString(char* message, int lenght)
{
 80012d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012dc:	4607      	mov	r7, r0
 80012de:	460e      	mov	r6, r1
    int power = lenght - 1;
 80012e0:	f101 38ff 	add.w	r8, r1, #4294967295

    uint16_t result = 0;

    for (int i = 0; i < lenght; i++)
 80012e4:	2500      	movs	r5, #0
    uint16_t result = 0;
 80012e6:	46a9      	mov	r9, r5
    for (int i = 0; i < lenght; i++)
 80012e8:	e000      	b.n	80012ec <getU16ParamFromString+0x14>
 80012ea:	3501      	adds	r5, #1
 80012ec:	42b5      	cmp	r5, r6
 80012ee:	da19      	bge.n	8001324 <getU16ParamFromString+0x4c>
    {
        uint8_t num = message[i] - 48;
 80012f0:	5d7c      	ldrb	r4, [r7, r5]
 80012f2:	3c30      	subs	r4, #48	@ 0x30
 80012f4:	b2e4      	uxtb	r4, r4

        if (num >= 0 && num < 10)
 80012f6:	2c09      	cmp	r4, #9
 80012f8:	d8f7      	bhi.n	80012ea <getU16ParamFromString+0x12>
        {
            int x = pow(10,power);
 80012fa:	4640      	mov	r0, r8
 80012fc:	f7ff f8ea 	bl	80004d4 <__aeabi_i2d>
 8001300:	ec41 0b11 	vmov	d1, r0, r1
 8001304:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8001330 <getU16ParamFromString+0x58>
 8001308:	f006 fa3a 	bl	8007780 <pow>
 800130c:	ec51 0b10 	vmov	r0, r1, d0
 8001310:	f7ff fbfa 	bl	8000b08 <__aeabi_d2iz>
            result += num * x;
 8001314:	fb14 f400 	smulbb	r4, r4, r0
 8001318:	444c      	add	r4, r9
 800131a:	fa1f f984 	uxth.w	r9, r4
            power--;
 800131e:	f108 38ff 	add.w	r8, r8, #4294967295
 8001322:	e7e2      	b.n	80012ea <getU16ParamFromString+0x12>
        }
    }

    return result;
}
 8001324:	4648      	mov	r0, r9
 8001326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800132a:	bf00      	nop
 800132c:	f3af 8000 	nop.w
 8001330:	00000000 	.word	0x00000000
 8001334:	40240000 	.word	0x40240000

08001338 <getHex>:
    }
}

uint8_t getHex(char* hex)
{
    uint8_t firstDigit = getDigitFromChar(hex[0]);
 8001338:	7802      	ldrb	r2, [r0, #0]
    if (c >= 48 && c <= 57)
 800133a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b09      	cmp	r3, #9
 8001342:	d904      	bls.n	800134e <getHex+0x16>
    if (c >= 97 && c <= 102)
 8001344:	f1a2 0161 	sub.w	r1, r2, #97	@ 0x61
 8001348:	b2c9      	uxtb	r1, r1
 800134a:	2905      	cmp	r1, #5
 800134c:	d90f      	bls.n	800136e <getHex+0x36>
    uint8_t secondDigit = getDigitFromChar(hex[1]);
 800134e:	7841      	ldrb	r1, [r0, #1]
    if (c >= 48 && c <= 57)
 8001350:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	2a09      	cmp	r2, #9
 8001358:	d904      	bls.n	8001364 <getHex+0x2c>
    if (c >= 97 && c <= 102)
 800135a:	f1a1 0061 	sub.w	r0, r1, #97	@ 0x61
 800135e:	b2c0      	uxtb	r0, r0
 8001360:	2805      	cmp	r0, #5
 8001362:	d907      	bls.n	8001374 <getHex+0x3c>

    uint8_t result = 0;

    result += firstDigit * 16;
 8001364:	0118      	lsls	r0, r3, #4
 8001366:	b2c0      	uxtb	r0, r0
    result += secondDigit;
 8001368:	4410      	add	r0, r2

    return result;
}
 800136a:	b2c0      	uxtb	r0, r0
 800136c:	4770      	bx	lr
        return c - 97 + 10;
 800136e:	3a57      	subs	r2, #87	@ 0x57
 8001370:	b2d3      	uxtb	r3, r2
 8001372:	e7ec      	b.n	800134e <getHex+0x16>
 8001374:	3957      	subs	r1, #87	@ 0x57
 8001376:	b2ca      	uxtb	r2, r1
 8001378:	e7f4      	b.n	8001364 <getHex+0x2c>

0800137a <getPixelColorFromString>:

PixelColor getPixelColorFromString(char* message, int lenght)
{
 800137a:	b510      	push	{r4, lr}
 800137c:	b084      	sub	sp, #16
 800137e:	4604      	mov	r4, r0
    PixelColor result = {0,0,0};
 8001380:	2300      	movs	r3, #0
 8001382:	f88d 3008 	strb.w	r3, [sp, #8]
 8001386:	f88d 3009 	strb.w	r3, [sp, #9]
 800138a:	f88d 300a 	strb.w	r3, [sp, #10]
    char* ptr = message;

    if(lenght == 6)
 800138e:	2906      	cmp	r1, #6
 8001390:	d10f      	bne.n	80013b2 <getPixelColorFromString+0x38>
    {
        result.R = getHex(ptr);
 8001392:	f7ff ffd1 	bl	8001338 <getHex>
 8001396:	f88d 0008 	strb.w	r0, [sp, #8]
        ptr += 2;
        result.G = getHex(ptr);
 800139a:	1ca0      	adds	r0, r4, #2
 800139c:	f7ff ffcc 	bl	8001338 <getHex>
 80013a0:	f88d 0009 	strb.w	r0, [sp, #9]
        ptr += 2;
        result.B = getHex(ptr);
 80013a4:	1d20      	adds	r0, r4, #4
 80013a6:	f7ff ffc7 	bl	8001338 <getHex>
 80013aa:	f88d 000a 	strb.w	r0, [sp, #10]
 80013ae:	e03c      	b.n	800142a <getPixelColorFromString+0xb0>
        uint8_t subIndex = 0;

        //skip to (
        while(*ptr != '(')
        {
            ptr++;
 80013b0:	3401      	adds	r4, #1
        while(*ptr != '(')
 80013b2:	7823      	ldrb	r3, [r4, #0]
 80013b4:	2b28      	cmp	r3, #40	@ 0x28
 80013b6:	d1fb      	bne.n	80013b0 <getPixelColorFromString+0x36>
        }

        ptr++; //skip (
 80013b8:	3401      	adds	r4, #1
        uint8_t subIndex = 0;
 80013ba:	2100      	movs	r1, #0

        while(*ptr != ',')
 80013bc:	e007      	b.n	80013ce <getPixelColorFromString+0x54>
        {
            digit1[subIndex] = *ptr;
 80013be:	f101 0210 	add.w	r2, r1, #16
 80013c2:	446a      	add	r2, sp
 80013c4:	f802 3c0c 	strb.w	r3, [r2, #-12]
            ptr++;
 80013c8:	3401      	adds	r4, #1
            subIndex++;
 80013ca:	3101      	adds	r1, #1
 80013cc:	b2c9      	uxtb	r1, r1
        while(*ptr != ',')
 80013ce:	7823      	ldrb	r3, [r4, #0]
 80013d0:	2b2c      	cmp	r3, #44	@ 0x2c
 80013d2:	d1f4      	bne.n	80013be <getPixelColorFromString+0x44>
        }

        result.R = getU16ParamFromString(digit1,subIndex);
 80013d4:	a801      	add	r0, sp, #4
 80013d6:	f7ff ff7f 	bl	80012d8 <getU16ParamFromString>
 80013da:	f88d 0008 	strb.w	r0, [sp, #8]

        subIndex = 0;
        ptr++; //skip ,
        ptr++; //skip space
 80013de:	3402      	adds	r4, #2
        subIndex = 0;
 80013e0:	2100      	movs	r1, #0

        while(*ptr != ',')
 80013e2:	e007      	b.n	80013f4 <getPixelColorFromString+0x7a>
        {
            digit1[subIndex] = *ptr;
 80013e4:	f101 0210 	add.w	r2, r1, #16
 80013e8:	446a      	add	r2, sp
 80013ea:	f802 3c0c 	strb.w	r3, [r2, #-12]
            ptr++;
 80013ee:	3401      	adds	r4, #1
            subIndex++;
 80013f0:	3101      	adds	r1, #1
 80013f2:	b2c9      	uxtb	r1, r1
        while(*ptr != ',')
 80013f4:	7823      	ldrb	r3, [r4, #0]
 80013f6:	2b2c      	cmp	r3, #44	@ 0x2c
 80013f8:	d1f4      	bne.n	80013e4 <getPixelColorFromString+0x6a>
        }

        result.G = getU16ParamFromString(digit1,subIndex);
 80013fa:	a801      	add	r0, sp, #4
 80013fc:	f7ff ff6c 	bl	80012d8 <getU16ParamFromString>
 8001400:	f88d 0009 	strb.w	r0, [sp, #9]

        subIndex = 0;
        ptr++; //skip ,
        ptr++; //skip space
 8001404:	3402      	adds	r4, #2
        subIndex = 0;
 8001406:	2100      	movs	r1, #0

        while(*ptr != ',')
 8001408:	e007      	b.n	800141a <getPixelColorFromString+0xa0>
        {
            digit1[subIndex] = *ptr;
 800140a:	f101 0210 	add.w	r2, r1, #16
 800140e:	446a      	add	r2, sp
 8001410:	f802 3c0c 	strb.w	r3, [r2, #-12]
            ptr++;
 8001414:	3401      	adds	r4, #1
            subIndex++;
 8001416:	3101      	adds	r1, #1
 8001418:	b2c9      	uxtb	r1, r1
        while(*ptr != ',')
 800141a:	7823      	ldrb	r3, [r4, #0]
 800141c:	2b2c      	cmp	r3, #44	@ 0x2c
 800141e:	d1f4      	bne.n	800140a <getPixelColorFromString+0x90>
        }

        result.B = getU16ParamFromString(digit1,subIndex);
 8001420:	a801      	add	r0, sp, #4
 8001422:	f7ff ff59 	bl	80012d8 <getU16ParamFromString>
 8001426:	f88d 000a 	strb.w	r0, [sp, #10]

    }

    return result;
 800142a:	9b02      	ldr	r3, [sp, #8]
 800142c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001430:	0c1b      	lsrs	r3, r3, #16
 8001432:	f88d 300e 	strb.w	r3, [sp, #14]
 8001436:	2000      	movs	r0, #0
 8001438:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800143c:	f363 0007 	bfi	r0, r3, #0, #8
 8001440:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001444:	f363 200f 	bfi	r0, r3, #8, #8
 8001448:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800144c:	f363 4017 	bfi	r0, r3, #16, #8
}
 8001450:	b004      	add	sp, #16
 8001452:	bd10      	pop	{r4, pc}

08001454 <isEqualStrings>:

bool isEqualStrings(char* message,const char* op,int startPos,int lenght)
{
    for(int i = 0; i < lenght; i++)
 8001454:	f04f 0c00 	mov.w	ip, #0
 8001458:	459c      	cmp	ip, r3
 800145a:	da0e      	bge.n	800147a <isEqualStrings+0x26>
{
 800145c:	b510      	push	{r4, lr}
    {
        if(message[startPos] == op[i])
 800145e:	5c84      	ldrb	r4, [r0, r2]
 8001460:	f811 e00c 	ldrb.w	lr, [r1, ip]
 8001464:	4574      	cmp	r4, lr
 8001466:	d106      	bne.n	8001476 <isEqualStrings+0x22>
        {
            startPos++;
 8001468:	3201      	adds	r2, #1
    for(int i = 0; i < lenght; i++)
 800146a:	f10c 0c01 	add.w	ip, ip, #1
 800146e:	459c      	cmp	ip, r3
 8001470:	dbf5      	blt.n	800145e <isEqualStrings+0xa>
        {
            return false;
        }
    }

    return true;
 8001472:	2001      	movs	r0, #1
}
 8001474:	bd10      	pop	{r4, pc}
            return false;
 8001476:	2000      	movs	r0, #0
 8001478:	e7fc      	b.n	8001474 <isEqualStrings+0x20>
    return true;
 800147a:	2001      	movs	r0, #1
}
 800147c:	4770      	bx	lr
	...

08001480 <NOS_Strip_UART_ParseStringCommand>:

}


bool NOS_Strip_UART_ParseStringCommand(WS2812B_Strip* strip, const char* message, int lenght)
{
 8001480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001484:	b099      	sub	sp, #100	@ 0x64
 8001486:	4607      	mov	r7, r0
 8001488:	460d      	mov	r5, r1
 800148a:	4616      	mov	r6, r2

    uint16_t index = 0;
    uint16_t subIndex = 0;

    uint16_t min,max,speed;
    PixelColor tempColor = {0,0,0};
 800148c:	2400      	movs	r4, #0
 800148e:	f88d 405c 	strb.w	r4, [sp, #92]	@ 0x5c
 8001492:	f88d 405d 	strb.w	r4, [sp, #93]	@ 0x5d
 8001496:	f88d 405e 	strb.w	r4, [sp, #94]	@ 0x5e

    Effect_Struct tempEffect = {0};
 800149a:	222c      	movs	r2, #44	@ 0x2c
 800149c:	4621      	mov	r1, r4
 800149e:	a80c      	add	r0, sp, #48	@ 0x30
 80014a0:	f005 facd 	bl	8006a3e <memset>

    char temp[16];

    while(index < lenght)
 80014a4:	e27d      	b.n	80019a2 <NOS_Strip_UART_ParseStringCommand+0x522>
        {
            index++;

            if(paramDivider == message[index])
            {
                index++;
 80014a6:	3402      	adds	r4, #2
 80014a8:	b2a4      	uxth	r4, r4

                if(message[index] == 'B')
 80014aa:	5d2b      	ldrb	r3, [r5, r4]
 80014ac:	2b42      	cmp	r3, #66	@ 0x42
 80014ae:	d17d      	bne.n	80015ac <NOS_Strip_UART_ParseStringCommand+0x12c>
 80014b0:	e001      	b.n	80014b6 <NOS_Strip_UART_ParseStringCommand+0x36>
                {
                    while(message[index] != paramDivider)
                    {
                        index++;
 80014b2:	3401      	adds	r4, #1
 80014b4:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 80014b6:	5d2b      	ldrb	r3, [r5, r4]
 80014b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80014ba:	d1fa      	bne.n	80014b2 <NOS_Strip_UART_ParseStringCommand+0x32>
                    }

                    index++;
 80014bc:	3401      	adds	r4, #1
 80014be:	b2a4      	uxth	r4, r4
                    
                    subIndex = 0;
 80014c0:	2100      	movs	r1, #0
                    while(message[index] != paramDivider)
 80014c2:	e008      	b.n	80014d6 <NOS_Strip_UART_ParseStringCommand+0x56>
                    {
                        temp[subIndex] = message[index];
 80014c4:	f101 0260 	add.w	r2, r1, #96	@ 0x60
 80014c8:	446a      	add	r2, sp
 80014ca:	f802 3c40 	strb.w	r3, [r2, #-64]
                        subIndex++;
 80014ce:	3101      	adds	r1, #1
 80014d0:	b289      	uxth	r1, r1
                        index++;
 80014d2:	3401      	adds	r4, #1
 80014d4:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 80014d6:	5d2b      	ldrb	r3, [r5, r4]
 80014d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80014da:	d1f3      	bne.n	80014c4 <NOS_Strip_UART_ParseStringCommand+0x44>
                    }

                    min = getU16ParamFromString(temp,subIndex);
 80014dc:	a808      	add	r0, sp, #32
 80014de:	f7ff fefb 	bl	80012d8 <getU16ParamFromString>
 80014e2:	4680      	mov	r8, r0

                    index++;
 80014e4:	3401      	adds	r4, #1
 80014e6:	b2a4      	uxth	r4, r4
                    subIndex = 0;
 80014e8:	2100      	movs	r1, #0
                    while(message[index] != paramDivider)
 80014ea:	e008      	b.n	80014fe <NOS_Strip_UART_ParseStringCommand+0x7e>
                    {
                        temp[subIndex] = message[index];
 80014ec:	f101 0260 	add.w	r2, r1, #96	@ 0x60
 80014f0:	446a      	add	r2, sp
 80014f2:	f802 3c40 	strb.w	r3, [r2, #-64]
                        subIndex++;
 80014f6:	3101      	adds	r1, #1
 80014f8:	b289      	uxth	r1, r1
                        index++;
 80014fa:	3401      	adds	r4, #1
 80014fc:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 80014fe:	5d2b      	ldrb	r3, [r5, r4]
 8001500:	2b2f      	cmp	r3, #47	@ 0x2f
 8001502:	d1f3      	bne.n	80014ec <NOS_Strip_UART_ParseStringCommand+0x6c>
                    }

                    max = getU16ParamFromString(temp,subIndex); 
 8001504:	a808      	add	r0, sp, #32
 8001506:	f7ff fee7 	bl	80012d8 <getU16ParamFromString>
 800150a:	4681      	mov	r9, r0

                    index++;
 800150c:	3401      	adds	r4, #1
 800150e:	b2a4      	uxth	r4, r4
                    subIndex = 0;
 8001510:	2100      	movs	r1, #0
                    while(message[index] != paramDivider)
 8001512:	e008      	b.n	8001526 <NOS_Strip_UART_ParseStringCommand+0xa6>
                    {
                        temp[subIndex] = message[index];
 8001514:	f101 0260 	add.w	r2, r1, #96	@ 0x60
 8001518:	446a      	add	r2, sp
 800151a:	f802 3c40 	strb.w	r3, [r2, #-64]
                        subIndex++;
 800151e:	3101      	adds	r1, #1
 8001520:	b289      	uxth	r1, r1
                        index++;
 8001522:	3401      	adds	r4, #1
 8001524:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 8001526:	5d2b      	ldrb	r3, [r5, r4]
 8001528:	2b2f      	cmp	r3, #47	@ 0x2f
 800152a:	d1f3      	bne.n	8001514 <NOS_Strip_UART_ParseStringCommand+0x94>
                    }

                    speed = getU16ParamFromString(temp,subIndex);
 800152c:	a808      	add	r0, sp, #32
 800152e:	f7ff fed3 	bl	80012d8 <getU16ParamFromString>
 8001532:	4682      	mov	sl, r0

                    index++;
 8001534:	3401      	adds	r4, #1
 8001536:	b2a4      	uxth	r4, r4
                    subIndex = 0;
 8001538:	2300      	movs	r3, #0

                    while(message[index] != paramDivider)
 800153a:	e008      	b.n	800154e <NOS_Strip_UART_ParseStringCommand+0xce>
                    {
                        temp[subIndex] = message[index];
 800153c:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8001540:	4469      	add	r1, sp
 8001542:	f801 2c40 	strb.w	r2, [r1, #-64]
                        subIndex++;
 8001546:	3301      	adds	r3, #1
 8001548:	b29b      	uxth	r3, r3
                        index++;
 800154a:	3401      	adds	r4, #1
 800154c:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 800154e:	5d2a      	ldrb	r2, [r5, r4]
 8001550:	2a2f      	cmp	r2, #47	@ 0x2f
 8001552:	d1f3      	bne.n	800153c <NOS_Strip_UART_ParseStringCommand+0xbc>
                    }

                    bool enabled = false;

                    if(isEqualStrings(temp,"true",0,4))
 8001554:	2304      	movs	r3, #4
 8001556:	2200      	movs	r2, #0
 8001558:	49b1      	ldr	r1, [pc, #708]	@ (8001820 <NOS_Strip_UART_ParseStringCommand+0x3a0>)
 800155a:	a808      	add	r0, sp, #32
 800155c:	f7ff ff7a 	bl	8001454 <isEqualStrings>
                    else if(isEqualStrings(temp,"false",0,5))
                    {
                        enabled = false;
                    }

                    NOS_WS2812B_Strip_Effect_Init(&tempEffect,NULL,speed,1,min,max,0,0,0,0,EFFECT_BREATHE_ID,enabled);
 8001560:	f10d 0b30 	add.w	fp, sp, #48	@ 0x30
 8001564:	9007      	str	r0, [sp, #28]
 8001566:	2320      	movs	r3, #32
 8001568:	9306      	str	r3, [sp, #24]
 800156a:	2100      	movs	r1, #0
 800156c:	9105      	str	r1, [sp, #20]
 800156e:	9104      	str	r1, [sp, #16]
 8001570:	9103      	str	r1, [sp, #12]
 8001572:	9102      	str	r1, [sp, #8]
 8001574:	f8cd 9004 	str.w	r9, [sp, #4]
 8001578:	f8cd 8000 	str.w	r8, [sp]
 800157c:	2301      	movs	r3, #1
 800157e:	4652      	mov	r2, sl
 8001580:	4658      	mov	r0, fp
 8001582:	f000 fc45 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
                    NOS_WS2812B_Strip_Effects_UpdateEffect(strip,tempEffect);
 8001586:	46ec      	mov	ip, sp
 8001588:	f10d 0e3c 	add.w	lr, sp, #60	@ 0x3c
 800158c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001590:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001594:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001598:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800159c:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 80015a0:	4638      	mov	r0, r7
 80015a2:	f000 fd42 	bl	800202a <NOS_WS2812B_Strip_Effects_UpdateEffect>
 80015a6:	e001      	b.n	80015ac <NOS_Strip_UART_ParseStringCommand+0x12c>
                }

                while(message[index] != 'R')
                {
                    index++;
 80015a8:	3401      	adds	r4, #1
 80015aa:	b2a4      	uxth	r4, r4
                while(message[index] != 'R')
 80015ac:	5d2b      	ldrb	r3, [r5, r4]
 80015ae:	2b52      	cmp	r3, #82	@ 0x52
 80015b0:	d1fa      	bne.n	80015a8 <NOS_Strip_UART_ParseStringCommand+0x128>
 80015b2:	e001      	b.n	80015b8 <NOS_Strip_UART_ParseStringCommand+0x138>

                if(message[index] == 'R')
                {
                    while(message[index] != paramDivider)
                    {
                        index++;
 80015b4:	3401      	adds	r4, #1
 80015b6:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 80015b8:	5d2b      	ldrb	r3, [r5, r4]
 80015ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80015bc:	d1fa      	bne.n	80015b4 <NOS_Strip_UART_ParseStringCommand+0x134>
                    }

                    index++;
                    index++;
 80015be:	3402      	adds	r4, #2
 80015c0:	b2a4      	uxth	r4, r4
                    
                    subIndex = 0;
 80015c2:	2100      	movs	r1, #0
                    while(message[index] != paramDivider)
 80015c4:	e008      	b.n	80015d8 <NOS_Strip_UART_ParseStringCommand+0x158>
                    {
                        temp[subIndex] = message[index];
 80015c6:	f101 0260 	add.w	r2, r1, #96	@ 0x60
 80015ca:	446a      	add	r2, sp
 80015cc:	f802 3c40 	strb.w	r3, [r2, #-64]
                        subIndex++;
 80015d0:	3101      	adds	r1, #1
 80015d2:	b289      	uxth	r1, r1
                        index++;
 80015d4:	3401      	adds	r4, #1
 80015d6:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 80015d8:	5d2b      	ldrb	r3, [r5, r4]
 80015da:	2b2f      	cmp	r3, #47	@ 0x2f
 80015dc:	d1f3      	bne.n	80015c6 <NOS_Strip_UART_ParseStringCommand+0x146>
                    }

                    tempColor = getPixelColorFromString(temp,subIndex);
 80015de:	a808      	add	r0, sp, #32
 80015e0:	f7ff fecb 	bl	800137a <getPixelColorFromString>
 80015e4:	f88d 005c 	strb.w	r0, [sp, #92]	@ 0x5c
 80015e8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80015ec:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 80015f0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80015f4:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e

                    min = getRainbowStageFromColor(tempColor);
 80015f8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80015fa:	f7ff fdd8 	bl	80011ae <getRainbowStageFromColor>
 80015fe:	4680      	mov	r8, r0

                    index++;
                    index++;
 8001600:	3402      	adds	r4, #2
 8001602:	b2a4      	uxth	r4, r4
                    subIndex = 0;
 8001604:	2100      	movs	r1, #0

                    while(message[index] != paramDivider)
 8001606:	e008      	b.n	800161a <NOS_Strip_UART_ParseStringCommand+0x19a>
                    {
                        temp[subIndex] = message[index];
 8001608:	f101 0260 	add.w	r2, r1, #96	@ 0x60
 800160c:	446a      	add	r2, sp
 800160e:	f802 3c40 	strb.w	r3, [r2, #-64]
                        subIndex++;
 8001612:	3101      	adds	r1, #1
 8001614:	b289      	uxth	r1, r1
                        index++;
 8001616:	3401      	adds	r4, #1
 8001618:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 800161a:	5d2b      	ldrb	r3, [r5, r4]
 800161c:	2b2f      	cmp	r3, #47	@ 0x2f
 800161e:	d1f3      	bne.n	8001608 <NOS_Strip_UART_ParseStringCommand+0x188>
                    }

                    tempColor = getPixelColorFromString(temp,subIndex);
 8001620:	a808      	add	r0, sp, #32
 8001622:	f7ff feaa 	bl	800137a <getPixelColorFromString>
 8001626:	f88d 005c 	strb.w	r0, [sp, #92]	@ 0x5c
 800162a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800162e:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 8001632:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8001636:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e

                    max = getRainbowStageFromColor(tempColor);
 800163a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800163c:	f7ff fdb7 	bl	80011ae <getRainbowStageFromColor>
 8001640:	4681      	mov	r9, r0

                    index++;
 8001642:	3401      	adds	r4, #1
 8001644:	b2a4      	uxth	r4, r4
                    subIndex = 0;
 8001646:	2100      	movs	r1, #0
                    while(message[index] != paramDivider)
 8001648:	e008      	b.n	800165c <NOS_Strip_UART_ParseStringCommand+0x1dc>
                    {
                        temp[subIndex] = message[index];
 800164a:	f101 0260 	add.w	r2, r1, #96	@ 0x60
 800164e:	446a      	add	r2, sp
 8001650:	f802 3c40 	strb.w	r3, [r2, #-64]
                        subIndex++;
 8001654:	3101      	adds	r1, #1
 8001656:	b289      	uxth	r1, r1
                        index++;
 8001658:	3401      	adds	r4, #1
 800165a:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 800165c:	5d2b      	ldrb	r3, [r5, r4]
 800165e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001660:	d1f3      	bne.n	800164a <NOS_Strip_UART_ParseStringCommand+0x1ca>
                    }

                    speed = getU16ParamFromString(temp,subIndex);
 8001662:	a808      	add	r0, sp, #32
 8001664:	f7ff fe38 	bl	80012d8 <getU16ParamFromString>
 8001668:	4682      	mov	sl, r0

                    index++;
 800166a:	3401      	adds	r4, #1
 800166c:	b2a4      	uxth	r4, r4
                    subIndex = 0;
 800166e:	2300      	movs	r3, #0

                    while(message[index] != paramDivider)
 8001670:	e008      	b.n	8001684 <NOS_Strip_UART_ParseStringCommand+0x204>
                    {
                        temp[subIndex] = message[index];
 8001672:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8001676:	4469      	add	r1, sp
 8001678:	f801 2c40 	strb.w	r2, [r1, #-64]
                        subIndex++;
 800167c:	3301      	adds	r3, #1
 800167e:	b29b      	uxth	r3, r3
                        index++;
 8001680:	3401      	adds	r4, #1
 8001682:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 8001684:	5d2a      	ldrb	r2, [r5, r4]
 8001686:	2a2f      	cmp	r2, #47	@ 0x2f
 8001688:	d1f3      	bne.n	8001672 <NOS_Strip_UART_ParseStringCommand+0x1f2>
                    }

                    bool enabled = false;

                    if(isEqualStrings(temp,"true",0,4))
 800168a:	2304      	movs	r3, #4
 800168c:	2200      	movs	r2, #0
 800168e:	4964      	ldr	r1, [pc, #400]	@ (8001820 <NOS_Strip_UART_ParseStringCommand+0x3a0>)
 8001690:	a808      	add	r0, sp, #32
 8001692:	f7ff fedf 	bl	8001454 <isEqualStrings>
                    else if(isEqualStrings(temp,"false",0,5))
                    {
                        enabled = false;
                    }

                    NOS_WS2812B_Strip_Effect_Init(&tempEffect,NULL,speed,1,min,max,0,0,0,0,EFFECT_RAINBOW_ID,enabled);
 8001696:	f10d 0b30 	add.w	fp, sp, #48	@ 0x30
 800169a:	9007      	str	r0, [sp, #28]
 800169c:	2321      	movs	r3, #33	@ 0x21
 800169e:	9306      	str	r3, [sp, #24]
 80016a0:	2100      	movs	r1, #0
 80016a2:	9105      	str	r1, [sp, #20]
 80016a4:	9104      	str	r1, [sp, #16]
 80016a6:	9103      	str	r1, [sp, #12]
 80016a8:	9102      	str	r1, [sp, #8]
 80016aa:	f8cd 9004 	str.w	r9, [sp, #4]
 80016ae:	f8cd 8000 	str.w	r8, [sp]
 80016b2:	2301      	movs	r3, #1
 80016b4:	4652      	mov	r2, sl
 80016b6:	4658      	mov	r0, fp
 80016b8:	f000 fbaa 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
                    NOS_WS2812B_Strip_Effects_UpdateEffect(strip,tempEffect);
 80016bc:	46ec      	mov	ip, sp
 80016be:	f10d 0e3c 	add.w	lr, sp, #60	@ 0x3c
 80016c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80016c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80016ca:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80016ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80016d2:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 80016d6:	4638      	mov	r0, r7
 80016d8:	f000 fca7 	bl	800202a <NOS_WS2812B_Strip_Effects_UpdateEffect>
 80016dc:	e001      	b.n	80016e2 <NOS_Strip_UART_ParseStringCommand+0x262>
                }

                while(message[index] != 'D')
                {
                    index++;
 80016de:	3401      	adds	r4, #1
 80016e0:	b2a4      	uxth	r4, r4
                while(message[index] != 'D')
 80016e2:	5d2b      	ldrb	r3, [r5, r4]
 80016e4:	2b44      	cmp	r3, #68	@ 0x44
 80016e6:	d1fa      	bne.n	80016de <NOS_Strip_UART_ParseStringCommand+0x25e>
 80016e8:	e001      	b.n	80016ee <NOS_Strip_UART_ParseStringCommand+0x26e>

                if(message[index] == 'D')
                {
                    while(message[index] != paramDivider)
                    {
                        index++;
 80016ea:	3401      	adds	r4, #1
 80016ec:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 80016ee:	5d2b      	ldrb	r3, [r5, r4]
 80016f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80016f2:	d1fa      	bne.n	80016ea <NOS_Strip_UART_ParseStringCommand+0x26a>
                    }

                    index++;
                    index++;
 80016f4:	3402      	adds	r4, #2
 80016f6:	b2a4      	uxth	r4, r4
                    
                    subIndex = 0;
 80016f8:	2100      	movs	r1, #0
                    while(message[index] != paramDivider)
 80016fa:	e008      	b.n	800170e <NOS_Strip_UART_ParseStringCommand+0x28e>
                    {
                        temp[subIndex] = message[index];
 80016fc:	f101 0260 	add.w	r2, r1, #96	@ 0x60
 8001700:	446a      	add	r2, sp
 8001702:	f802 3c40 	strb.w	r3, [r2, #-64]
                        subIndex++;
 8001706:	3101      	adds	r1, #1
 8001708:	b289      	uxth	r1, r1
                        index++;
 800170a:	3401      	adds	r4, #1
 800170c:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 800170e:	5d2b      	ldrb	r3, [r5, r4]
 8001710:	2b2f      	cmp	r3, #47	@ 0x2f
 8001712:	d1f3      	bne.n	80016fc <NOS_Strip_UART_ParseStringCommand+0x27c>
                    }

                    tempColor = getPixelColorFromString(temp,subIndex);
 8001714:	a808      	add	r0, sp, #32
 8001716:	f7ff fe30 	bl	800137a <getPixelColorFromString>
 800171a:	f88d 005c 	strb.w	r0, [sp, #92]	@ 0x5c
 800171e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8001722:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 8001726:	f3c0 4007 	ubfx	r0, r0, #16, #8
 800172a:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e

                    index++;
 800172e:	3401      	adds	r4, #1
 8001730:	b2a4      	uxth	r4, r4
                    subIndex = 0;
 8001732:	2100      	movs	r1, #0
                    while(message[index] != paramDivider)
 8001734:	e008      	b.n	8001748 <NOS_Strip_UART_ParseStringCommand+0x2c8>
                    {
                        temp[subIndex] = message[index];
 8001736:	f101 0260 	add.w	r2, r1, #96	@ 0x60
 800173a:	446a      	add	r2, sp
 800173c:	f802 3c40 	strb.w	r3, [r2, #-64]
                        subIndex++;
 8001740:	3101      	adds	r1, #1
 8001742:	b289      	uxth	r1, r1
                        index++;
 8001744:	3401      	adds	r4, #1
 8001746:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 8001748:	5d2b      	ldrb	r3, [r5, r4]
 800174a:	2b2f      	cmp	r3, #47	@ 0x2f
 800174c:	d1f3      	bne.n	8001736 <NOS_Strip_UART_ParseStringCommand+0x2b6>
                    }

                    speed = getU16ParamFromString(temp,subIndex);
 800174e:	a808      	add	r0, sp, #32
 8001750:	f7ff fdc2 	bl	80012d8 <getU16ParamFromString>
 8001754:	4680      	mov	r8, r0

                    index++;
 8001756:	3401      	adds	r4, #1
 8001758:	b2a4      	uxth	r4, r4
                    subIndex = 0;
 800175a:	2300      	movs	r3, #0

                    while(message[index] != paramDivider)
 800175c:	e008      	b.n	8001770 <NOS_Strip_UART_ParseStringCommand+0x2f0>
                    {
                        temp[subIndex] = message[index];
 800175e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8001762:	4469      	add	r1, sp
 8001764:	f801 2c40 	strb.w	r2, [r1, #-64]
                        subIndex++;
 8001768:	3301      	adds	r3, #1
 800176a:	b29b      	uxth	r3, r3
                        index++;
 800176c:	3401      	adds	r4, #1
 800176e:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 8001770:	5d2a      	ldrb	r2, [r5, r4]
 8001772:	2a2f      	cmp	r2, #47	@ 0x2f
 8001774:	d1f3      	bne.n	800175e <NOS_Strip_UART_ParseStringCommand+0x2de>
                    }

                    bool enabled = false;

                    if(isEqualStrings(temp,"true",0,4))
 8001776:	2304      	movs	r3, #4
 8001778:	2200      	movs	r2, #0
 800177a:	4929      	ldr	r1, [pc, #164]	@ (8001820 <NOS_Strip_UART_ParseStringCommand+0x3a0>)
 800177c:	a808      	add	r0, sp, #32
 800177e:	f7ff fe69 	bl	8001454 <isEqualStrings>
                    else if(isEqualStrings(temp,"false",0,5))
                    {
                        enabled = false;
                    }

                    NOS_WS2812B_Strip_Effect_Init(&tempEffect,&tempColor,speed,1,0,0,0,0,0,0,EFFECT_DOTS_ID,enabled);
 8001782:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8001786:	9007      	str	r0, [sp, #28]
 8001788:	2322      	movs	r3, #34	@ 0x22
 800178a:	9306      	str	r3, [sp, #24]
 800178c:	2300      	movs	r3, #0
 800178e:	9305      	str	r3, [sp, #20]
 8001790:	9304      	str	r3, [sp, #16]
 8001792:	9303      	str	r3, [sp, #12]
 8001794:	9302      	str	r3, [sp, #8]
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2301      	movs	r3, #1
 800179c:	4642      	mov	r2, r8
 800179e:	a917      	add	r1, sp, #92	@ 0x5c
 80017a0:	4648      	mov	r0, r9
 80017a2:	f000 fb35 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
                    NOS_WS2812B_Strip_Effects_UpdateEffect(strip,tempEffect);
 80017a6:	46ec      	mov	ip, sp
 80017a8:	f10d 0e3c 	add.w	lr, sp, #60	@ 0x3c
 80017ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80017b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80017b4:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80017b8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80017bc:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 80017c0:	4638      	mov	r0, r7
 80017c2:	f000 fc32 	bl	800202a <NOS_WS2812B_Strip_Effects_UpdateEffect>
 80017c6:	e001      	b.n	80017cc <NOS_Strip_UART_ParseStringCommand+0x34c>
                }

                while(message[index] != 'W')
                {
                    index++;
 80017c8:	3401      	adds	r4, #1
 80017ca:	b2a4      	uxth	r4, r4
                while(message[index] != 'W')
 80017cc:	5d2b      	ldrb	r3, [r5, r4]
 80017ce:	2b57      	cmp	r3, #87	@ 0x57
 80017d0:	d1fa      	bne.n	80017c8 <NOS_Strip_UART_ParseStringCommand+0x348>
 80017d2:	e001      	b.n	80017d8 <NOS_Strip_UART_ParseStringCommand+0x358>

                if(message[index] == 'W')
                {
                    while(message[index] != paramDivider)
                    {
                        index++;
 80017d4:	3401      	adds	r4, #1
 80017d6:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 80017d8:	5d2b      	ldrb	r3, [r5, r4]
 80017da:	2b2f      	cmp	r3, #47	@ 0x2f
 80017dc:	d1fa      	bne.n	80017d4 <NOS_Strip_UART_ParseStringCommand+0x354>
                    }

                    index++;
                    index++;
 80017de:	3402      	adds	r4, #2
 80017e0:	b2a4      	uxth	r4, r4
                    
                    subIndex = 0;
 80017e2:	2100      	movs	r1, #0
                    while(message[index] != paramDivider)
 80017e4:	e008      	b.n	80017f8 <NOS_Strip_UART_ParseStringCommand+0x378>
                    {
                        temp[subIndex] = message[index];
 80017e6:	f101 0260 	add.w	r2, r1, #96	@ 0x60
 80017ea:	446a      	add	r2, sp
 80017ec:	f802 3c40 	strb.w	r3, [r2, #-64]
                        subIndex++;
 80017f0:	3101      	adds	r1, #1
 80017f2:	b289      	uxth	r1, r1
                        index++;
 80017f4:	3401      	adds	r4, #1
 80017f6:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 80017f8:	5d2b      	ldrb	r3, [r5, r4]
 80017fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80017fc:	d1f3      	bne.n	80017e6 <NOS_Strip_UART_ParseStringCommand+0x366>
                    }

                    tempColor = getPixelColorFromString(temp,subIndex);
 80017fe:	a808      	add	r0, sp, #32
 8001800:	f7ff fdbb 	bl	800137a <getPixelColorFromString>
 8001804:	f88d 005c 	strb.w	r0, [sp, #92]	@ 0x5c
 8001808:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800180c:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 8001810:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8001814:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e

                    index++;
 8001818:	3401      	adds	r4, #1
 800181a:	b2a4      	uxth	r4, r4
                    subIndex = 0;
 800181c:	2100      	movs	r1, #0
                    while(message[index] != paramDivider)
 800181e:	e00a      	b.n	8001836 <NOS_Strip_UART_ParseStringCommand+0x3b6>
 8001820:	08008b90 	.word	0x08008b90
                    {
                        temp[subIndex] = message[index];
 8001824:	f101 0260 	add.w	r2, r1, #96	@ 0x60
 8001828:	446a      	add	r2, sp
 800182a:	f802 3c40 	strb.w	r3, [r2, #-64]
                        subIndex++;
 800182e:	3101      	adds	r1, #1
 8001830:	b289      	uxth	r1, r1
                        index++;
 8001832:	3401      	adds	r4, #1
 8001834:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 8001836:	5d2b      	ldrb	r3, [r5, r4]
 8001838:	2b2f      	cmp	r3, #47	@ 0x2f
 800183a:	d1f3      	bne.n	8001824 <NOS_Strip_UART_ParseStringCommand+0x3a4>
                    }

                    min = getU16ParamFromString(temp,subIndex);
 800183c:	a808      	add	r0, sp, #32
 800183e:	f7ff fd4b 	bl	80012d8 <getU16ParamFromString>
 8001842:	4681      	mov	r9, r0

                    index++;
 8001844:	3401      	adds	r4, #1
 8001846:	b2a4      	uxth	r4, r4
                    subIndex = 0;
 8001848:	2100      	movs	r1, #0
                    while(message[index] != paramDivider)
 800184a:	e008      	b.n	800185e <NOS_Strip_UART_ParseStringCommand+0x3de>
                    {
                        temp[subIndex] = message[index];
 800184c:	f101 0260 	add.w	r2, r1, #96	@ 0x60
 8001850:	446a      	add	r2, sp
 8001852:	f802 3c40 	strb.w	r3, [r2, #-64]
                        subIndex++;
 8001856:	3101      	adds	r1, #1
 8001858:	b289      	uxth	r1, r1
                        index++;
 800185a:	3401      	adds	r4, #1
 800185c:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 800185e:	5d2b      	ldrb	r3, [r5, r4]
 8001860:	2b2f      	cmp	r3, #47	@ 0x2f
 8001862:	d1f3      	bne.n	800184c <NOS_Strip_UART_ParseStringCommand+0x3cc>
                    }

                    speed = getU16ParamFromString(temp,subIndex);
 8001864:	a808      	add	r0, sp, #32
 8001866:	f7ff fd37 	bl	80012d8 <getU16ParamFromString>
 800186a:	4680      	mov	r8, r0

                    index++;
 800186c:	3401      	adds	r4, #1
 800186e:	b2a4      	uxth	r4, r4
                    subIndex = 0;
 8001870:	2300      	movs	r3, #0

                    while(message[index] != paramDivider)
 8001872:	e008      	b.n	8001886 <NOS_Strip_UART_ParseStringCommand+0x406>
                    {
                        temp[subIndex] = message[index];
 8001874:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8001878:	4469      	add	r1, sp
 800187a:	f801 2c40 	strb.w	r2, [r1, #-64]
                        subIndex++;
 800187e:	3301      	adds	r3, #1
 8001880:	b29b      	uxth	r3, r3
                        index++;
 8001882:	3401      	adds	r4, #1
 8001884:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 8001886:	5d2a      	ldrb	r2, [r5, r4]
 8001888:	2a2f      	cmp	r2, #47	@ 0x2f
 800188a:	d1f3      	bne.n	8001874 <NOS_Strip_UART_ParseStringCommand+0x3f4>
                    }

                    bool enabled = false;

                    if(isEqualStrings(temp,"true",0,4))
 800188c:	2304      	movs	r3, #4
 800188e:	2200      	movs	r2, #0
 8001890:	494c      	ldr	r1, [pc, #304]	@ (80019c4 <NOS_Strip_UART_ParseStringCommand+0x544>)
 8001892:	a808      	add	r0, sp, #32
 8001894:	f7ff fdde 	bl	8001454 <isEqualStrings>
                    else if(isEqualStrings(temp,"false",0,5))
                    {
                        enabled = false;
                    }

                    NOS_WS2812B_Strip_Effect_Init(&tempEffect,NULL,speed,1,0,0,min,0,0,0,EFFECT_WALKING_PIXELS_ID,enabled);
 8001898:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 800189c:	9007      	str	r0, [sp, #28]
 800189e:	2323      	movs	r3, #35	@ 0x23
 80018a0:	9306      	str	r3, [sp, #24]
 80018a2:	2100      	movs	r1, #0
 80018a4:	9105      	str	r1, [sp, #20]
 80018a6:	9104      	str	r1, [sp, #16]
 80018a8:	9103      	str	r1, [sp, #12]
 80018aa:	f8cd 9008 	str.w	r9, [sp, #8]
 80018ae:	9101      	str	r1, [sp, #4]
 80018b0:	9100      	str	r1, [sp, #0]
 80018b2:	2301      	movs	r3, #1
 80018b4:	4642      	mov	r2, r8
 80018b6:	4650      	mov	r0, sl
 80018b8:	f000 faaa 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
                    NOS_WS2812B_Strip_Effects_UpdateEffect(strip,tempEffect);
 80018bc:	46ec      	mov	ip, sp
 80018be:	f10d 0e3c 	add.w	lr, sp, #60	@ 0x3c
 80018c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80018c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80018ca:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80018ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80018d2:	e89a 000e 	ldmia.w	sl, {r1, r2, r3}
 80018d6:	4638      	mov	r0, r7
 80018d8:	f000 fba7 	bl	800202a <NOS_WS2812B_Strip_Effects_UpdateEffect>
 80018dc:	e001      	b.n	80018e2 <NOS_Strip_UART_ParseStringCommand+0x462>
                }

                while(message[index] != 'S')
                {
                    index++;
 80018de:	3401      	adds	r4, #1
 80018e0:	b2a4      	uxth	r4, r4
                while(message[index] != 'S')
 80018e2:	5d2b      	ldrb	r3, [r5, r4]
 80018e4:	2b53      	cmp	r3, #83	@ 0x53
 80018e6:	d1fa      	bne.n	80018de <NOS_Strip_UART_ParseStringCommand+0x45e>
 80018e8:	e001      	b.n	80018ee <NOS_Strip_UART_ParseStringCommand+0x46e>

                if(message[index] == 'S')
                {
                    while(message[index] != paramDivider)
                    {
                        index++;
 80018ea:	3401      	adds	r4, #1
 80018ec:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 80018ee:	5d2b      	ldrb	r3, [r5, r4]
 80018f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80018f2:	d1fa      	bne.n	80018ea <NOS_Strip_UART_ParseStringCommand+0x46a>
                    }

                    index++;
                    index++;
 80018f4:	3402      	adds	r4, #2
 80018f6:	b2a4      	uxth	r4, r4
                    
                    subIndex = 0;
 80018f8:	2100      	movs	r1, #0
                    while(message[index] != paramDivider)
 80018fa:	e008      	b.n	800190e <NOS_Strip_UART_ParseStringCommand+0x48e>
                    {
                        temp[subIndex] = message[index];
 80018fc:	f101 0260 	add.w	r2, r1, #96	@ 0x60
 8001900:	446a      	add	r2, sp
 8001902:	f802 3c40 	strb.w	r3, [r2, #-64]
                        subIndex++;
 8001906:	3101      	adds	r1, #1
 8001908:	b289      	uxth	r1, r1
                        index++;
 800190a:	3401      	adds	r4, #1
 800190c:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 800190e:	5d2b      	ldrb	r3, [r5, r4]
 8001910:	2b2f      	cmp	r3, #47	@ 0x2f
 8001912:	d1f3      	bne.n	80018fc <NOS_Strip_UART_ParseStringCommand+0x47c>
                    }

                    tempColor = getPixelColorFromString(temp,subIndex);
 8001914:	a808      	add	r0, sp, #32
 8001916:	f7ff fd30 	bl	800137a <getPixelColorFromString>
 800191a:	f88d 005c 	strb.w	r0, [sp, #92]	@ 0x5c
 800191e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8001922:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 8001926:	f3c0 4007 	ubfx	r0, r0, #16, #8
 800192a:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e

                    index++;
 800192e:	3401      	adds	r4, #1
 8001930:	b2a4      	uxth	r4, r4
                    subIndex = 0;
 8001932:	2300      	movs	r3, #0

                    while(message[index] != paramDivider)
 8001934:	e008      	b.n	8001948 <NOS_Strip_UART_ParseStringCommand+0x4c8>
                    {
                        temp[subIndex] = message[index];
 8001936:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800193a:	4469      	add	r1, sp
 800193c:	f801 2c40 	strb.w	r2, [r1, #-64]
                        subIndex++;
 8001940:	3301      	adds	r3, #1
 8001942:	b29b      	uxth	r3, r3
                        index++;
 8001944:	3401      	adds	r4, #1
 8001946:	b2a4      	uxth	r4, r4
                    while(message[index] != paramDivider)
 8001948:	5d2a      	ldrb	r2, [r5, r4]
 800194a:	2a2f      	cmp	r2, #47	@ 0x2f
 800194c:	d1f3      	bne.n	8001936 <NOS_Strip_UART_ParseStringCommand+0x4b6>
                    }

                    bool enabled = false;

                    if(isEqualStrings(temp,"true",0,4))
 800194e:	2304      	movs	r3, #4
 8001950:	2200      	movs	r2, #0
 8001952:	491c      	ldr	r1, [pc, #112]	@ (80019c4 <NOS_Strip_UART_ParseStringCommand+0x544>)
 8001954:	a808      	add	r0, sp, #32
 8001956:	f7ff fd7d 	bl	8001454 <isEqualStrings>
                    else if(isEqualStrings(temp,"false",0,5))
                    {
                        enabled = false;
                    }

                    NOS_WS2812B_Strip_Effect_Init(&tempEffect,&tempColor,speed,1,0,0,0,0,0,0,EFFECT_STEADY_COLOR_ID,enabled);
 800195a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800195e:	9007      	str	r0, [sp, #28]
 8001960:	2324      	movs	r3, #36	@ 0x24
 8001962:	9306      	str	r3, [sp, #24]
 8001964:	2300      	movs	r3, #0
 8001966:	9305      	str	r3, [sp, #20]
 8001968:	9304      	str	r3, [sp, #16]
 800196a:	9303      	str	r3, [sp, #12]
 800196c:	9302      	str	r3, [sp, #8]
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2301      	movs	r3, #1
 8001974:	4642      	mov	r2, r8
 8001976:	a917      	add	r1, sp, #92	@ 0x5c
 8001978:	4648      	mov	r0, r9
 800197a:	f000 fa49 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
                    NOS_WS2812B_Strip_Effects_UpdateEffect(strip,tempEffect);
 800197e:	46ec      	mov	ip, sp
 8001980:	f10d 0e3c 	add.w	lr, sp, #60	@ 0x3c
 8001984:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001988:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800198c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001990:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001994:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 8001998:	4638      	mov	r0, r7
 800199a:	f000 fb46 	bl	800202a <NOS_WS2812B_Strip_Effects_UpdateEffect>
                }

                
            }
        }
        index++;
 800199e:	3401      	adds	r4, #1
 80019a0:	b2a4      	uxth	r4, r4
    while(index < lenght)
 80019a2:	42b4      	cmp	r4, r6
 80019a4:	da0a      	bge.n	80019bc <NOS_Strip_UART_ParseStringCommand+0x53c>
        if(message[index] == effectDivider)
 80019a6:	5d2b      	ldrb	r3, [r5, r4]
 80019a8:	2b26      	cmp	r3, #38	@ 0x26
 80019aa:	d1f8      	bne.n	800199e <NOS_Strip_UART_ParseStringCommand+0x51e>
            index++;
 80019ac:	1c63      	adds	r3, r4, #1
 80019ae:	b29b      	uxth	r3, r3
            if(paramDivider == message[index])
 80019b0:	5cea      	ldrb	r2, [r5, r3]
 80019b2:	2a2f      	cmp	r2, #47	@ 0x2f
 80019b4:	f43f ad77 	beq.w	80014a6 <NOS_Strip_UART_ParseStringCommand+0x26>
            index++;
 80019b8:	461c      	mov	r4, r3
 80019ba:	e7f0      	b.n	800199e <NOS_Strip_UART_ParseStringCommand+0x51e>
    }

    return true;
 80019bc:	2001      	movs	r0, #1
 80019be:	b019      	add	sp, #100	@ 0x64
 80019c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019c4:	08008b90 	.word	0x08008b90

080019c8 <NOS_TimeEvent_Init>:
    }
}

void NOS_TimeEvent_Init(NOS_TimeEvent *timeEvent, uint32_t ticksToEnable)
{
    if (timeEvent != NULL)
 80019c8:	b120      	cbz	r0, 80019d4 <NOS_TimeEvent_Init+0xc>
    {
        timeEvent->enabled = false;
 80019ca:	2200      	movs	r2, #0
 80019cc:	7142      	strb	r2, [r0, #5]
        timeEvent->stopped = false;
 80019ce:	7102      	strb	r2, [r0, #4]
        timeEvent->ticksToEnable = ticksToEnable;
 80019d0:	6001      	str	r1, [r0, #0]
        timeEvent->ticks = 0;
 80019d2:	6082      	str	r2, [r0, #8]
    }
}
 80019d4:	4770      	bx	lr

080019d6 <NOS_TimeEvent_TickHandler>:
    timeEvent->ticks = 0;
}

void NOS_TimeEvent_TickHandler(NOS_TimeEvent *timeEvent)
{
    timeEvent->ticks++;
 80019d6:	6883      	ldr	r3, [r0, #8]
 80019d8:	3301      	adds	r3, #1
 80019da:	6083      	str	r3, [r0, #8]
    if (!timeEvent->stopped)
 80019dc:	7902      	ldrb	r2, [r0, #4]
 80019de:	b922      	cbnz	r2, 80019ea <NOS_TimeEvent_TickHandler+0x14>
    {
        if (timeEvent->ticks >= timeEvent->ticksToEnable)
 80019e0:	6802      	ldr	r2, [r0, #0]
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d301      	bcc.n	80019ea <NOS_TimeEvent_TickHandler+0x14>
        {
            timeEvent->enabled = true;
 80019e6:	2301      	movs	r3, #1
 80019e8:	7143      	strb	r3, [r0, #5]
        }
    }
}
 80019ea:	4770      	bx	lr

080019ec <NOS_TimeEvent_Check>:

bool NOS_TimeEvent_Check(NOS_TimeEvent *timeEvent)
{
 80019ec:	4603      	mov	r3, r0
    if (timeEvent->enabled && !timeEvent->stopped)
 80019ee:	7940      	ldrb	r0, [r0, #5]
 80019f0:	b110      	cbz	r0, 80019f8 <NOS_TimeEvent_Check+0xc>
 80019f2:	791b      	ldrb	r3, [r3, #4]
 80019f4:	b103      	cbz	r3, 80019f8 <NOS_TimeEvent_Check+0xc>
    {
        return true;
    }
    return false;
 80019f6:	2000      	movs	r0, #0
}
 80019f8:	4770      	bx	lr

080019fa <NOS_TimeEvent_FinishEvent>:

void NOS_TimeEvent_FinishEvent(NOS_TimeEvent *timeEvent)
{
    timeEvent->enabled = false;
 80019fa:	2300      	movs	r3, #0
 80019fc:	7143      	strb	r3, [r0, #5]
    timeEvent->ticks = 0;
 80019fe:	6083      	str	r3, [r0, #8]
 8001a00:	4770      	bx	lr

08001a02 <NOS_UART_ReceiveReset>:
#include "NOS_UART.h"

NOS_UART_Struct* NOS_UART_ReceiveReset(NOS_UART_Struct* data)
{
    data->lastMessageSize = data->currMessageLenght;
 8001a02:	f8b0 2628 	ldrh.w	r2, [r0, #1576]	@ 0x628
 8001a06:	f8a0 262a 	strh.w	r2, [r0, #1578]	@ 0x62a
    data->rx_buff_ptr = data->rx_buff;
 8001a0a:	f500 7205 	add.w	r2, r0, #532	@ 0x214
 8001a0e:	f8c0 2614 	str.w	r2, [r0, #1556]	@ 0x614
    data->currMessageLenght = 0;
 8001a12:	2200      	movs	r2, #0
 8001a14:	f8a0 2628 	strh.w	r2, [r0, #1576]	@ 0x628
    data->startReceive = false;
 8001a18:	f880 2630 	strb.w	r2, [r0, #1584]	@ 0x630
    data->rx_flag = true;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f880 262e 	strb.w	r2, [r0, #1582]	@ 0x62e
    return data;
}
 8001a22:	4770      	bx	lr

08001a24 <NOS_UART_ReceiveAbort>:
    ++data->rx_buff_ptr;
    return data;
}

void NOS_UART_ReceiveAbort(NOS_UART_Struct* data,UART_HandleTypeDef* uart)
{
 8001a24:	b508      	push	{r3, lr}
 8001a26:	4686      	mov	lr, r0
 8001a28:	4608      	mov	r0, r1
    for(int i = 0; i < BUFFER_SIZE; i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e006      	b.n	8001a3c <NOS_UART_ReceiveAbort+0x18>
    {
        data->rx_buff[i] = 0;
 8001a2e:	eb0e 0203 	add.w	r2, lr, r3
 8001a32:	f04f 0c00 	mov.w	ip, #0
 8001a36:	f882 c214 	strb.w	ip, [r2, #532]	@ 0x214
    for(int i = 0; i < BUFFER_SIZE; i++)
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a40:	dbf5      	blt.n	8001a2e <NOS_UART_ReceiveAbort+0xa>
    }

    data->rx_buff_ptr = data->rx_buff;
 8001a42:	f50e 7105 	add.w	r1, lr, #532	@ 0x214
 8001a46:	f8ce 1614 	str.w	r1, [lr, #1556]	@ 0x614
    data->index = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f8ae 3626 	strh.w	r3, [lr, #1574]	@ 0x626
    data->currMessageLenght = 0;
 8001a50:	f8ae 3628 	strh.w	r3, [lr, #1576]	@ 0x628
    data->startReceive = false;
 8001a54:	f88e 3630 	strb.w	r3, [lr, #1584]	@ 0x630
    data->endReceive = false;
 8001a58:	f88e 3631 	strb.w	r3, [lr, #1585]	@ 0x631
    data->bufferCommand = false;
 8001a5c:	f88e 3632 	strb.w	r3, [lr, #1586]	@ 0x632
    data->rx_flag = false;
 8001a60:	f88e 362e 	strb.w	r3, [lr, #1582]	@ 0x62e
    data->receiveTimeAbort = 400;
 8001a64:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001a68:	f8ce 361c 	str.w	r3, [lr, #1564]	@ 0x61c
    HAL_UART_Receive_IT (uart, data->rx_buff_ptr, 1); 
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f004 fe25 	bl	80066bc <HAL_UART_Receive_IT>
}
 8001a72:	bd08      	pop	{r3, pc}

08001a74 <NOS_UART_Timer_Handler>:

void NOS_UART_Timer_Handler(NOS_UART_Struct* uart)
{
 8001a74:	b508      	push	{r3, lr}
    uart->lastReceivedByteTime++;
 8001a76:	f8d0 3620 	ldr.w	r3, [r0, #1568]	@ 0x620
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	f8c0 3620 	str.w	r3, [r0, #1568]	@ 0x620

    if(uart->startReceive)
 8001a80:	f890 2630 	ldrb.w	r2, [r0, #1584]	@ 0x630
 8001a84:	b122      	cbz	r2, 8001a90 <NOS_UART_Timer_Handler+0x1c>
    {
        uart->receiveTime++;
 8001a86:	f8d0 1618 	ldr.w	r1, [r0, #1560]	@ 0x618
 8001a8a:	3101      	adds	r1, #1
 8001a8c:	f8c0 1618 	str.w	r1, [r0, #1560]	@ 0x618
    }

    if(uart->startReceive && uart->lastReceivedByteTime > 5)
 8001a90:	b10a      	cbz	r2, 8001a96 <NOS_UART_Timer_Handler+0x22>
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d800      	bhi.n	8001a98 <NOS_UART_Timer_Handler+0x24>
    {
        uart->index = 0;
        uart->receiveTime = 0;
        NOS_UART_ReceiveReset(uart);
    }
}
 8001a96:	bd08      	pop	{r3, pc}
        uart->index = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f8a0 3626 	strh.w	r3, [r0, #1574]	@ 0x626
        uart->receiveTime = 0;
 8001a9e:	f8c0 3618 	str.w	r3, [r0, #1560]	@ 0x618
        NOS_UART_ReceiveReset(uart);
 8001aa2:	f7ff ffae 	bl	8001a02 <NOS_UART_ReceiveReset>
}
 8001aa6:	e7f6      	b.n	8001a96 <NOS_UART_Timer_Handler+0x22>

08001aa8 <GetCRC16>:

uint16_t GetCRC16(uint8_t *buf, int len)
{  
 8001aa8:	b500      	push	{lr}
  unsigned int crc = 0xFFFF;
  for (int pos = 0; pos < len; pos++)
 8001aaa:	f04f 0e00 	mov.w	lr, #0
  unsigned int crc = 0xFFFF;
 8001aae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  for (int pos = 0; pos < len; pos++)
 8001ab2:	e00c      	b.n	8001ace <GetCRC16+0x26>
    if ((crc & 0x0001) != 0) {      
      crc >>= 1;                    
      crc ^= 0xA001;
    }
    else                            
      crc >>= 1;                    
 8001ab4:	085b      	lsrs	r3, r3, #1
  for (int i = 8; i != 0; i--) {    
 8001ab6:	3a01      	subs	r2, #1
 8001ab8:	b13a      	cbz	r2, 8001aca <GetCRC16+0x22>
    if ((crc & 0x0001) != 0) {      
 8001aba:	f013 0f01 	tst.w	r3, #1
 8001abe:	d0f9      	beq.n	8001ab4 <GetCRC16+0xc>
      crc ^= 0xA001;
 8001ac0:	f24a 0c01 	movw	ip, #40961	@ 0xa001
 8001ac4:	ea8c 0353 	eor.w	r3, ip, r3, lsr #1
 8001ac8:	e7f5      	b.n	8001ab6 <GetCRC16+0xe>
  for (int pos = 0; pos < len; pos++)
 8001aca:	f10e 0e01 	add.w	lr, lr, #1
 8001ace:	458e      	cmp	lr, r1
 8001ad0:	da04      	bge.n	8001adc <GetCRC16+0x34>
  crc ^= (unsigned int)buf[pos];  
 8001ad2:	f810 200e 	ldrb.w	r2, [r0, lr]
 8001ad6:	4053      	eors	r3, r2
  for (int i = 8; i != 0; i--) {    
 8001ad8:	2208      	movs	r2, #8
 8001ada:	e7ed      	b.n	8001ab8 <GetCRC16+0x10>
    }
  }

  return crc;
}
 8001adc:	b298      	uxth	r0, r3
 8001ade:	f85d fb04 	ldr.w	pc, [sp], #4

08001ae2 <NOS_UART_ReceiveHandler>:

void NOS_UART_ReceiveHandler(NOS_UART_Struct* data,UART_HandleTypeDef* uart)
{
 8001ae2:	b510      	push	{r4, lr}
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4608      	mov	r0, r1
    data->startReceive = true;
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2630 	strb.w	r2, [r3, #1584]	@ 0x630

    data->lastReceivedByteTime = 0; 
 8001aee:	2100      	movs	r1, #0
 8001af0:	f8c3 1620 	str.w	r1, [r3, #1568]	@ 0x620
    data->currMessageLenght++;
 8001af4:	f8b3 1628 	ldrh.w	r1, [r3, #1576]	@ 0x628
 8001af8:	4411      	add	r1, r2
 8001afa:	f8a3 1628 	strh.w	r1, [r3, #1576]	@ 0x628
    
    data->rx_buff[data->index] = *data->rx_buff_ptr;
 8001afe:	f8b3 c626 	ldrh.w	ip, [r3, #1574]	@ 0x626
 8001b02:	f8d3 1614 	ldr.w	r1, [r3, #1556]	@ 0x614
 8001b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b0a:	eb03 0e0c 	add.w	lr, r3, ip
 8001b0e:	f88e 4214 	strb.w	r4, [lr, #532]	@ 0x214
    ++data->index;
 8001b12:	4494      	add	ip, r2
 8001b14:	f8a3 c626 	strh.w	ip, [r3, #1574]	@ 0x626
    ++data->rx_buff_ptr;
 8001b18:	f8c3 1614 	str.w	r1, [r3, #1556]	@ 0x614
    
    HAL_UART_Receive_IT (uart, data->rx_buff_ptr, 1); 
 8001b1c:	f004 fdce 	bl	80066bc <HAL_UART_Receive_IT>
}
 8001b20:	bd10      	pop	{r4, pc}

08001b22 <NOS_UART_ParsePacket>:
//addr1 addr0 channel1 channel0 count1 count0 packetId3 packetId2 packetId1 packetId0 command3 command2 command1 command0 /* data (16 - 1008) */ crc16_1 crc16_0 / 
//maxLenght 1024B  minLenght 32B packetInfo 16B
NOS_Short currCRC;

bool NOS_UART_ParsePacket(NOS_UART_Struct* data,UART_Message* message)
{
 8001b22:	b538      	push	{r3, r4, r5, lr}
 8001b24:	460c      	mov	r4, r1
    int currPos = 0;

    message->address.bytes[1] = data->rx_buff[currPos++];
 8001b26:	f890 3214 	ldrb.w	r3, [r0, #532]	@ 0x214
 8001b2a:	704b      	strb	r3, [r1, #1]
    message->address.bytes[0] = data->rx_buff[currPos++];
 8001b2c:	f890 3215 	ldrb.w	r3, [r0, #533]	@ 0x215
 8001b30:	700b      	strb	r3, [r1, #0]

    message->channel.bytes[1] = data->rx_buff[currPos++];
 8001b32:	f890 3216 	ldrb.w	r3, [r0, #534]	@ 0x216
 8001b36:	70cb      	strb	r3, [r1, #3]
    message->channel.bytes[0] = data->rx_buff[currPos++];
 8001b38:	f890 3217 	ldrb.w	r3, [r0, #535]	@ 0x217
 8001b3c:	708b      	strb	r3, [r1, #2]

    message->byteCount.bytes[1] = data->rx_buff[currPos++];
 8001b3e:	f890 3218 	ldrb.w	r3, [r0, #536]	@ 0x218
 8001b42:	714b      	strb	r3, [r1, #5]
    message->byteCount.bytes[0] = data->rx_buff[currPos++];
 8001b44:	f890 3219 	ldrb.w	r3, [r0, #537]	@ 0x219
 8001b48:	710b      	strb	r3, [r1, #4]

    if(message->byteCount.data > 1024)
 8001b4a:	8889      	ldrh	r1, [r1, #4]
 8001b4c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8001b50:	d845      	bhi.n	8001bde <NOS_UART_ParsePacket+0xbc>
 8001b52:	4605      	mov	r5, r0
    {
        return false;
    }

    message->packetId.bytes[3] = data->rx_buff[currPos++];
 8001b54:	f890 321a 	ldrb.w	r3, [r0, #538]	@ 0x21a
 8001b58:	72e3      	strb	r3, [r4, #11]
    message->packetId.bytes[2] = data->rx_buff[currPos++];
 8001b5a:	f890 321b 	ldrb.w	r3, [r0, #539]	@ 0x21b
 8001b5e:	72a3      	strb	r3, [r4, #10]
    message->packetId.bytes[1] = data->rx_buff[currPos++];
 8001b60:	f890 321c 	ldrb.w	r3, [r0, #540]	@ 0x21c
 8001b64:	7263      	strb	r3, [r4, #9]
    message->packetId.bytes[0] = data->rx_buff[currPos++];
 8001b66:	f890 321d 	ldrb.w	r3, [r0, #541]	@ 0x21d
 8001b6a:	7223      	strb	r3, [r4, #8]

    message->command.bytes[3] = data->rx_buff[currPos++];
 8001b6c:	f890 321e 	ldrb.w	r3, [r0, #542]	@ 0x21e
 8001b70:	73e3      	strb	r3, [r4, #15]
    message->command.bytes[2] = data->rx_buff[currPos++];
 8001b72:	f890 321f 	ldrb.w	r3, [r0, #543]	@ 0x21f
 8001b76:	73a3      	strb	r3, [r4, #14]
    message->command.bytes[1] = data->rx_buff[currPos++];
 8001b78:	f890 3220 	ldrb.w	r3, [r0, #544]	@ 0x220
 8001b7c:	7363      	strb	r3, [r4, #13]
    message->command.bytes[0] = data->rx_buff[currPos++];
 8001b7e:	f890 3221 	ldrb.w	r3, [r0, #545]	@ 0x221
 8001b82:	7323      	strb	r3, [r4, #12]

    for(int i = 0; i < message->byteCount.data - 16; i++)
 8001b84:	2300      	movs	r3, #0
    message->command.bytes[0] = data->rx_buff[currPos++];
 8001b86:	220e      	movs	r2, #14
    for(int i = 0; i < message->byteCount.data - 16; i++)
 8001b88:	e007      	b.n	8001b9a <NOS_UART_ParsePacket+0x78>
    {
        message->data[i] = data->rx_buff[currPos++];
 8001b8a:	18a8      	adds	r0, r5, r2
 8001b8c:	f890 c214 	ldrb.w	ip, [r0, #532]	@ 0x214
 8001b90:	18e0      	adds	r0, r4, r3
 8001b92:	f880 c010 	strb.w	ip, [r0, #16]
    for(int i = 0; i < message->byteCount.data - 16; i++)
 8001b96:	3301      	adds	r3, #1
        message->data[i] = data->rx_buff[currPos++];
 8001b98:	3201      	adds	r2, #1
    for(int i = 0; i < message->byteCount.data - 16; i++)
 8001b9a:	f1a1 0010 	sub.w	r0, r1, #16
 8001b9e:	4298      	cmp	r0, r3
 8001ba0:	dcf3      	bgt.n	8001b8a <NOS_UART_ParsePacket+0x68>
    }

    message->CRC16.bytes[1] = data->rx_buff[currPos++];
 8001ba2:	1c53      	adds	r3, r2, #1
 8001ba4:	442a      	add	r2, r5
 8001ba6:	f892 2214 	ldrb.w	r2, [r2, #532]	@ 0x214
 8001baa:	f884 2211 	strb.w	r2, [r4, #529]	@ 0x211
    message->CRC16.bytes[0] = data->rx_buff[currPos++];
 8001bae:	442b      	add	r3, r5
 8001bb0:	f893 3214 	ldrb.w	r3, [r3, #532]	@ 0x214
 8001bb4:	f884 3210 	strb.w	r3, [r4, #528]	@ 0x210

    data->value.data = GetCRC16(&data->rx_buff,message->byteCount.data - 2);
 8001bb8:	3902      	subs	r1, #2
 8001bba:	f505 7005 	add.w	r0, r5, #532	@ 0x214
 8001bbe:	f7ff ff73 	bl	8001aa8 <GetCRC16>
 8001bc2:	f8a5 0624 	strh.w	r0, [r5, #1572]	@ 0x624

    if(data->value.data == message->CRC16.data)
 8001bc6:	f8b4 3210 	ldrh.w	r3, [r4, #528]	@ 0x210
 8001bca:	4298      	cmp	r0, r3
 8001bcc:	d009      	beq.n	8001be2 <NOS_UART_ParsePacket+0xc0>
    {
        return true;
    }

    if(message->address.data != 0)
 8001bce:	8823      	ldrh	r3, [r4, #0]
 8001bd0:	b133      	cbz	r3, 8001be0 <NOS_UART_ParsePacket+0xbe>
    {
        if(message->channel.data != 0)
 8001bd2:	8863      	ldrh	r3, [r4, #2]
 8001bd4:	b123      	cbz	r3, 8001be0 <NOS_UART_ParsePacket+0xbe>
        {
            if(message->byteCount.data != 0)
 8001bd6:	88a3      	ldrh	r3, [r4, #4]
 8001bd8:	b113      	cbz	r3, 8001be0 <NOS_UART_ParsePacket+0xbe>
            {
                return true;            
 8001bda:	2001      	movs	r0, #1
 8001bdc:	e000      	b.n	8001be0 <NOS_UART_ParsePacket+0xbe>
        return false;
 8001bde:	2000      	movs	r0, #0
            }
        }
    }

}
 8001be0:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8001be2:	2001      	movs	r0, #1
 8001be4:	e7fc      	b.n	8001be0 <NOS_UART_ParsePacket+0xbe>

08001be6 <NOS_UART_PacketApprovedNotice>:

bool NOS_UART_PacketApprovedNotice(UART_Message* message,UART_HandleTypeDef* uart)
{
 8001be6:	b510      	push	{r4, lr}
 8001be8:	b088      	sub	sp, #32
 8001bea:	4604      	mov	r4, r0
 8001bec:	4608      	mov	r0, r1
    uint8_t buff[32];
    int currPos = 0;

    buff[currPos++] = message->address.bytes[1];
 8001bee:	7863      	ldrb	r3, [r4, #1]
 8001bf0:	f88d 3000 	strb.w	r3, [sp]
    buff[currPos++] = message->address.bytes[0];
 8001bf4:	7823      	ldrb	r3, [r4, #0]
 8001bf6:	f88d 3001 	strb.w	r3, [sp, #1]

    buff[currPos++] = message->channel.bytes[1];
 8001bfa:	78e3      	ldrb	r3, [r4, #3]
 8001bfc:	f88d 3002 	strb.w	r3, [sp, #2]
    buff[currPos++] = message->channel.bytes[0];
 8001c00:	78a3      	ldrb	r3, [r4, #2]
 8001c02:	f88d 3003 	strb.w	r3, [sp, #3]

    buff[currPos++] = message->byteCount.bytes[1];
 8001c06:	7963      	ldrb	r3, [r4, #5]
 8001c08:	f88d 3004 	strb.w	r3, [sp, #4]
    buff[currPos++] = message->byteCount.bytes[0];
 8001c0c:	7923      	ldrb	r3, [r4, #4]
 8001c0e:	f88d 3005 	strb.w	r3, [sp, #5]

    buff[currPos++] = message->packetId.bytes[3];
 8001c12:	7ae3      	ldrb	r3, [r4, #11]
 8001c14:	f88d 3006 	strb.w	r3, [sp, #6]
    buff[currPos++] = message->packetId.bytes[2];
 8001c18:	7aa3      	ldrb	r3, [r4, #10]
 8001c1a:	f88d 3007 	strb.w	r3, [sp, #7]
    buff[currPos++] = message->packetId.bytes[1];
 8001c1e:	7a63      	ldrb	r3, [r4, #9]
 8001c20:	f88d 3008 	strb.w	r3, [sp, #8]
    buff[currPos++] = message->packetId.bytes[0];
 8001c24:	7a23      	ldrb	r3, [r4, #8]
 8001c26:	f88d 3009 	strb.w	r3, [sp, #9]

    buff[currPos++] = message->command.bytes[3];
 8001c2a:	7be3      	ldrb	r3, [r4, #15]
 8001c2c:	f88d 300a 	strb.w	r3, [sp, #10]
    buff[currPos++] = message->command.bytes[2];
 8001c30:	7ba3      	ldrb	r3, [r4, #14]
 8001c32:	f88d 300b 	strb.w	r3, [sp, #11]
    buff[currPos++] = message->command.bytes[1];
 8001c36:	7b63      	ldrb	r3, [r4, #13]
 8001c38:	f88d 300c 	strb.w	r3, [sp, #12]
    buff[currPos++] = message->command.bytes[0];
 8001c3c:	7b23      	ldrb	r3, [r4, #12]
 8001c3e:	f88d 300d 	strb.w	r3, [sp, #13]

    for(int i = 0; i < 16; i++)
 8001c42:	2200      	movs	r2, #0
    buff[currPos++] = message->command.bytes[0];
 8001c44:	230e      	movs	r3, #14
    for(int i = 0; i < 16; i++)
 8001c46:	e009      	b.n	8001c5c <NOS_UART_PacketApprovedNotice+0x76>
    {
        buff[currPos++] = 0xFF;
 8001c48:	f103 0120 	add.w	r1, r3, #32
 8001c4c:	eb0d 0c01 	add.w	ip, sp, r1
 8001c50:	f04f 0eff 	mov.w	lr, #255	@ 0xff
 8001c54:	f80c ec20 	strb.w	lr, [ip, #-32]
    for(int i = 0; i < 16; i++)
 8001c58:	3201      	adds	r2, #1
        buff[currPos++] = 0xFF;
 8001c5a:	3301      	adds	r3, #1
    for(int i = 0; i < 16; i++)
 8001c5c:	2a0f      	cmp	r2, #15
 8001c5e:	ddf3      	ble.n	8001c48 <NOS_UART_PacketApprovedNotice+0x62>
    }

    buff[currPos++] = message->CRC16.bytes[1];
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	f894 1211 	ldrb.w	r1, [r4, #529]	@ 0x211
 8001c66:	3320      	adds	r3, #32
 8001c68:	446b      	add	r3, sp
 8001c6a:	f803 1c20 	strb.w	r1, [r3, #-32]
    buff[currPos++] = message->CRC16.bytes[0];
 8001c6e:	f894 1210 	ldrb.w	r1, [r4, #528]	@ 0x210
 8001c72:	f102 0320 	add.w	r3, r2, #32
 8001c76:	446b      	add	r3, sp
 8001c78:	f803 1c20 	strb.w	r1, [r3, #-32]

    HAL_UART_Transmit(uart,buff,32,1000);
 8001c7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c80:	2220      	movs	r2, #32
 8001c82:	4669      	mov	r1, sp
 8001c84:	f004 fbb8 	bl	80063f8 <HAL_UART_Transmit>

}
 8001c88:	b008      	add	sp, #32
 8001c8a:	bd10      	pop	{r4, pc}

08001c8c <NOS_UART_CheckReceive>:


bool NOS_UART_CheckReceive(NOS_UART_Struct* data)
{
    return data->rx_flag;   
}
 8001c8c:	f890 062e 	ldrb.w	r0, [r0, #1582]	@ 0x62e
 8001c90:	4770      	bx	lr

08001c92 <NOS_UART_EndReceive>:
    return data->rx_buff;
}

void NOS_UART_EndReceive(NOS_UART_Struct* data)
{
    data->rx_flag = false;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f880 362e 	strb.w	r3, [r0, #1582]	@ 0x62e
}
 8001c98:	4770      	bx	lr

08001c9a <NOS_WS2812B_Strip_FullInit>:
#include "NOS_BaseColors.h"
#include "WS2812B_Effects.h"

void NOS_WS2812B_Strip_FullInit(WS2812B_Strip* strip,uint8_t* buff,PixelColor* pixels,int lenght)
{
    strip->pixels = pixels;
 8001c9a:	6042      	str	r2, [r0, #4]
    strip->frameBuffer = buff;
 8001c9c:	6001      	str	r1, [r0, #0]
    strip->pixelCount = lenght;
 8001c9e:	6083      	str	r3, [r0, #8]
    strip->bright = 100;
 8001ca0:	2364      	movs	r3, #100	@ 0x64
 8001ca2:	60c3      	str	r3, [r0, #12]
    strip->effectsCounter = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f880 30ec 	strb.w	r3, [r0, #236]	@ 0xec
}
 8001caa:	4770      	bx	lr

08001cac <NOS_WS2812B_Strip_CoreSetPixel>:

void NOS_WS2812B_Strip_CoreSetPixel(WS2812B_Strip* strip,int pixelPos,uint8_t r, uint8_t g, uint8_t b)
{
 8001cac:	b430      	push	{r4, r5}
    if(strip->frameBuffer != NULL && pixelPos <= strip->pixelCount)
 8001cae:	6804      	ldr	r4, [r0, #0]
 8001cb0:	b16c      	cbz	r4, 8001cce <NOS_WS2812B_Strip_CoreSetPixel+0x22>
 8001cb2:	6885      	ldr	r5, [r0, #8]
 8001cb4:	428d      	cmp	r5, r1
 8001cb6:	db0a      	blt.n	8001cce <NOS_WS2812B_Strip_CoreSetPixel+0x22>
    {
        strip->frameBuffer[pixelPos * 3] = r;
 8001cb8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001cbc:	5462      	strb	r2, [r4, r1]
        strip->frameBuffer[pixelPos * 3 + 1] = g;
 8001cbe:	6804      	ldr	r4, [r0, #0]
 8001cc0:	1c4a      	adds	r2, r1, #1
 8001cc2:	54a3      	strb	r3, [r4, r2]
        strip->frameBuffer[pixelPos * 3 + 2] = b;
 8001cc4:	6803      	ldr	r3, [r0, #0]
 8001cc6:	3102      	adds	r1, #2
 8001cc8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001ccc:	545a      	strb	r2, [r3, r1]
    }
}
 8001cce:	bc30      	pop	{r4, r5}
 8001cd0:	4770      	bx	lr

08001cd2 <NOS_WS2812B_Strip_SetPixel>:

void NOS_WS2812B_Strip_SetPixel(WS2812B_Strip* strip,int pixelPos,uint8_t r, uint8_t g, uint8_t b)
{
 8001cd2:	b430      	push	{r4, r5}
    if(strip->pixels != NULL && pixelPos <= strip->pixelCount)
 8001cd4:	6844      	ldr	r4, [r0, #4]
 8001cd6:	b16c      	cbz	r4, 8001cf4 <NOS_WS2812B_Strip_SetPixel+0x22>
 8001cd8:	6885      	ldr	r5, [r0, #8]
 8001cda:	428d      	cmp	r5, r1
 8001cdc:	db0a      	blt.n	8001cf4 <NOS_WS2812B_Strip_SetPixel+0x22>
    {
        strip->pixels[pixelPos].R = r;
 8001cde:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001ce2:	5462      	strb	r2, [r4, r1]
        strip->pixels[pixelPos].G = g;
 8001ce4:	6842      	ldr	r2, [r0, #4]
 8001ce6:	440a      	add	r2, r1
 8001ce8:	7053      	strb	r3, [r2, #1]
        strip->pixels[pixelPos].B = b;
 8001cea:	6843      	ldr	r3, [r0, #4]
 8001cec:	440b      	add	r3, r1
 8001cee:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001cf2:	709a      	strb	r2, [r3, #2]
    }         
}
 8001cf4:	bc30      	pop	{r4, r5}
 8001cf6:	4770      	bx	lr

08001cf8 <NOS_WS2812B_Strip_Clear>:

void NOS_WS2812B_Strip_Clear(WS2812B_Strip* strip)
{
 8001cf8:	b570      	push	{r4, r5, r6, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	4606      	mov	r6, r0
    for(int i = 0; i < strip->pixelCount; i++)
 8001cfe:	2500      	movs	r5, #0
 8001d00:	e00f      	b.n	8001d22 <NOS_WS2812B_Strip_Clear+0x2a>
    {
        NOS_WS2812B_Strip_SetPixel(strip,i,0,0,0);
 8001d02:	2400      	movs	r4, #0
 8001d04:	9400      	str	r4, [sp, #0]
 8001d06:	4623      	mov	r3, r4
 8001d08:	4622      	mov	r2, r4
 8001d0a:	4629      	mov	r1, r5
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	f7ff ffe0 	bl	8001cd2 <NOS_WS2812B_Strip_SetPixel>
        NOS_WS2812B_Strip_CoreSetPixel(strip,i,0,0,0);
 8001d12:	9400      	str	r4, [sp, #0]
 8001d14:	4623      	mov	r3, r4
 8001d16:	4622      	mov	r2, r4
 8001d18:	4629      	mov	r1, r5
 8001d1a:	4630      	mov	r0, r6
 8001d1c:	f7ff ffc6 	bl	8001cac <NOS_WS2812B_Strip_CoreSetPixel>
    for(int i = 0; i < strip->pixelCount; i++)
 8001d20:	3501      	adds	r5, #1
 8001d22:	68b3      	ldr	r3, [r6, #8]
 8001d24:	42ab      	cmp	r3, r5
 8001d26:	dcec      	bgt.n	8001d02 <NOS_WS2812B_Strip_Clear+0xa>
    }
}
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd70      	pop	{r4, r5, r6, pc}

08001d2c <NOS_WS2812B_Strip_Update>:

void NOS_WS2812B_Strip_Update(WS2812B_Strip* strip)
{
 8001d2c:	b530      	push	{r4, r5, lr}
 8001d2e:	ed2d 8b02 	vpush	{d8}
 8001d32:	b087      	sub	sp, #28
 8001d34:	4605      	mov	r5, r0
    float coef = (float)strip->bright / 100;
 8001d36:	edd0 7a03 	vldr	s15, [r0, #12]
 8001d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001dbc <NOS_WS2812B_Strip_Update+0x90>
 8001d42:	ee87 8a87 	vdiv.f32	s16, s15, s14
    for(int i = 0; i < strip->pixelCount; i++)
 8001d46:	2400      	movs	r4, #0
 8001d48:	e030      	b.n	8001dac <NOS_WS2812B_Strip_Update+0x80>
    {
        uint8_t currR = (float)strip->pixels[i].R * coef;
 8001d4a:	6869      	ldr	r1, [r5, #4]
 8001d4c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001d50:	188b      	adds	r3, r1, r2
 8001d52:	5c8a      	ldrb	r2, [r1, r2]
 8001d54:	ee07 2a90 	vmov	s15, r2
 8001d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d5c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d64:	edcd 7a03 	vstr	s15, [sp, #12]
        uint8_t currG = (float)strip->pixels[i].G * coef;
 8001d68:	785a      	ldrb	r2, [r3, #1]
 8001d6a:	ee07 2a90 	vmov	s15, r2
 8001d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d72:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d7a:	edcd 7a04 	vstr	s15, [sp, #16]
        uint8_t currB = (float)strip->pixels[i].B * coef;
 8001d7e:	789b      	ldrb	r3, [r3, #2]
 8001d80:	ee07 3a90 	vmov	s15, r3
 8001d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d88:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d90:	edcd 7a05 	vstr	s15, [sp, #20]
 8001d94:	f89d 3014 	ldrb.w	r3, [sp, #20]
        NOS_WS2812B_Strip_CoreSetPixel(strip,i,currR,currG,currB);
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001d9e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001da2:	4621      	mov	r1, r4
 8001da4:	4628      	mov	r0, r5
 8001da6:	f7ff ff81 	bl	8001cac <NOS_WS2812B_Strip_CoreSetPixel>
    for(int i = 0; i < strip->pixelCount; i++)
 8001daa:	3401      	adds	r4, #1
 8001dac:	68ab      	ldr	r3, [r5, #8]
 8001dae:	42a3      	cmp	r3, r4
 8001db0:	dccb      	bgt.n	8001d4a <NOS_WS2812B_Strip_Update+0x1e>
    }

}
 8001db2:	b007      	add	sp, #28
 8001db4:	ecbd 8b02 	vpop	{d8}
 8001db8:	bd30      	pop	{r4, r5, pc}
 8001dba:	bf00      	nop
 8001dbc:	42c80000 	.word	0x42c80000

08001dc0 <NOS_WS2812B_Strip_ColorFill>:
        currPixel++;
    }
}

void NOS_WS2812B_Strip_ColorFill(WS2812B_Strip* strip,PixelColor color)
{
 8001dc0:	b530      	push	{r4, r5, lr}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	4605      	mov	r5, r0
 8001dc6:	9103      	str	r1, [sp, #12]
    for(int i = 0; i < strip->pixelCount; i++)
 8001dc8:	2400      	movs	r4, #0
 8001dca:	e00b      	b.n	8001de4 <NOS_WS2812B_Strip_ColorFill+0x24>
    {
        NOS_WS2812B_Strip_SetPixel(strip,i,color.R,color.G,color.B);
 8001dcc:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001dd6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001dda:	4621      	mov	r1, r4
 8001ddc:	4628      	mov	r0, r5
 8001dde:	f7ff ff78 	bl	8001cd2 <NOS_WS2812B_Strip_SetPixel>
    for(int i = 0; i < strip->pixelCount; i++)
 8001de2:	3401      	adds	r4, #1
 8001de4:	68ab      	ldr	r3, [r5, #8]
 8001de6:	42a3      	cmp	r3, r4
 8001de8:	dcf0      	bgt.n	8001dcc <NOS_WS2812B_Strip_ColorFill+0xc>
    }
}
 8001dea:	b005      	add	sp, #20
 8001dec:	bd30      	pop	{r4, r5, pc}

08001dee <NOS_WS2812B_Strip_SetPixelByPixelColor>:

    NOS_WS2812B_Strip_SetPixel(strip,pixelPos,R,G,B);
}

void NOS_WS2812B_Strip_SetPixelByPixelColor(WS2812B_Strip* strip,int pixelPos, PixelColor color)
{
 8001dee:	b500      	push	{lr}
 8001df0:	b085      	sub	sp, #20
 8001df2:	9203      	str	r2, [sp, #12]
    NOS_WS2812B_Strip_SetPixel(strip,pixelPos,color.R,color.G,color.B);
 8001df4:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001dfe:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001e02:	f7ff ff66 	bl	8001cd2 <NOS_WS2812B_Strip_SetPixel>
}
 8001e06:	b005      	add	sp, #20
 8001e08:	f85d fb04 	ldr.w	pc, [sp], #4

08001e0c <NOS_WS2812B_Strip_SetBright>:

void NOS_WS2812B_Strip_SetBright(WS2812B_Strip* strip,uint8_t bright)
{
    strip->bright = bright;
 8001e0c:	60c1      	str	r1, [r0, #12]
}
 8001e0e:	4770      	bx	lr

08001e10 <NOS_WS2812B_Strip_Effect_Init>:
        //NOS_WS2812B_Strip_Effects_Check_Conflicts(strip,effect);
    NOS_WS2812B_Strip_Clear(strip);
}

void NOS_WS2812B_Strip_Effect_Init(Effect_Struct* effect,PixelColor* color,uint16_t speed,uint16_t step,uint16_t minValue,uint16_t maxValue,uint16_t param1,uint16_t param2,uint16_t param3,uint16_t param4,uint8_t effectID,bool enabled)
{
 8001e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e14:	4604      	mov	r4, r0
 8001e16:	460d      	mov	r5, r1
 8001e18:	4617      	mov	r7, r2
 8001e1a:	461e      	mov	r6, r3
 8001e1c:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8001e20:	f8bd 8024 	ldrh.w	r8, [sp, #36]	@ 0x24
        NOS_Math_SinValue_Init(&effect->value,minValue,maxValue,step);
 8001e24:	4642      	mov	r2, r8
 8001e26:	4649      	mov	r1, r9
 8001e28:	f7fe ff70 	bl	8000d0c <NOS_Math_SinValue_Init>
        effect->minValue = minValue;
 8001e2c:	f8a4 901a 	strh.w	r9, [r4, #26]
        effect->maxValue = maxValue;
 8001e30:	f8a4 801c 	strh.w	r8, [r4, #28]
        effect->speed.data = speed;
 8001e34:	82a7      	strh	r7, [r4, #20]
        effect->step.data = step;
 8001e36:	82e6      	strh	r6, [r4, #22]
        effect->enabled = enabled;
 8001e38:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 8001e3c:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
        if(color != NULL)
 8001e40:	b1c5      	cbz	r5, 8001e74 <NOS_WS2812B_Strip_Effect_Init+0x64>
        {
            NOS_PixelColor_SetColor(&effect->color,color->R,color->G,color->B);
 8001e42:	78ab      	ldrb	r3, [r5, #2]
 8001e44:	786a      	ldrb	r2, [r5, #1]
 8001e46:	7829      	ldrb	r1, [r5, #0]
 8001e48:	f104 0026 	add.w	r0, r4, #38	@ 0x26
 8001e4c:	f7fe febe 	bl	8000bcc <NOS_PixelColor_SetColor>
        else
        {
            NOS_PixelColor_SetColor(&effect->color,0,0,0);
        }

        effect->effectId = effectID;
 8001e50:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 8001e54:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
        
        effect->param1 = param1;
 8001e58:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8001e5c:	83e3      	strh	r3, [r4, #30]
        effect->param2 = param2;
 8001e5e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8001e62:	8423      	strh	r3, [r4, #32]
        effect->param3 = param3;
 8001e64:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8001e68:	8463      	strh	r3, [r4, #34]	@ 0x22
        effect->param4 = param4;
 8001e6a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8001e6e:	84a3      	strh	r3, [r4, #36]	@ 0x24
}
 8001e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            NOS_PixelColor_SetColor(&effect->color,0,0,0);
 8001e74:	2300      	movs	r3, #0
 8001e76:	461a      	mov	r2, r3
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f104 0026 	add.w	r0, r4, #38	@ 0x26
 8001e7e:	f7fe fea5 	bl	8000bcc <NOS_PixelColor_SetColor>
 8001e82:	e7e5      	b.n	8001e50 <NOS_WS2812B_Strip_Effect_Init+0x40>

08001e84 <NOS_WS2812B_Strip_Effects_AddEffect>:
{
 8001e84:	b084      	sub	sp, #16
 8001e86:	b510      	push	{r4, lr}
 8001e88:	b088      	sub	sp, #32
 8001e8a:	4604      	mov	r4, r0
 8001e8c:	a80b      	add	r0, sp, #44	@ 0x2c
 8001e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if(strip->effectsCounter < 10)
 8001e92:	f894 00ec 	ldrb.w	r0, [r4, #236]	@ 0xec
 8001e96:	2809      	cmp	r0, #9
 8001e98:	d832      	bhi.n	8001f00 <NOS_WS2812B_Strip_Effects_AddEffect+0x7c>
        switch(effect.effectId)
 8001e9a:	f89d 2056 	ldrb.w	r2, [sp, #86]	@ 0x56
 8001e9e:	f1a2 0320 	sub.w	r3, r2, #32
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d827      	bhi.n	8001ef6 <NOS_WS2812B_Strip_Effects_AddEffect+0x72>
 8001ea6:	e8df f003 	tbb	[pc, r3]
 8001eaa:	3003      	.short	0x3003
 8001eac:	7854      	.short	0x7854
 8001eae:	9c          	.byte	0x9c
 8001eaf:	00          	.byte	0x00
                NOS_WS2812B_Strip_Effect_Init(&strip->effects[strip->effectsCounter],&effect.color,effect.speed.data,effect.step.data,effect.minValue,effect.maxValue,effect.param1,effect.param2,effect.param3,effect.param4,effect.effectId,effect.enabled);
 8001eb0:	232c      	movs	r3, #44	@ 0x2c
 8001eb2:	fb03 f000 	mul.w	r0, r3, r0
 8001eb6:	3010      	adds	r0, #16
 8001eb8:	f89d 3055 	ldrb.w	r3, [sp, #85]	@ 0x55
 8001ebc:	9307      	str	r3, [sp, #28]
 8001ebe:	9206      	str	r2, [sp, #24]
 8001ec0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8001ec4:	9305      	str	r3, [sp, #20]
 8001ec6:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8001eca:	9304      	str	r3, [sp, #16]
 8001ecc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8001ed0:	9303      	str	r3, [sp, #12]
 8001ed2:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 8001ed6:	9302      	str	r3, [sp, #8]
 8001ed8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	f8bd 3046 	ldrh.w	r3, [sp, #70]	@ 0x46
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 8001ee8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8001eec:	f10d 0152 	add.w	r1, sp, #82	@ 0x52
 8001ef0:	4420      	add	r0, r4
 8001ef2:	f7ff ff8d 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
        strip->effectsCounter++;
 8001ef6:	f894 30ec 	ldrb.w	r3, [r4, #236]	@ 0xec
 8001efa:	3301      	adds	r3, #1
 8001efc:	f884 30ec 	strb.w	r3, [r4, #236]	@ 0xec
}
 8001f00:	b008      	add	sp, #32
 8001f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f06:	b004      	add	sp, #16
 8001f08:	4770      	bx	lr
                NOS_WS2812B_Strip_Effect_Init(&strip->effects[strip->effectsCounter],&effect.color,effect.speed.data,effect.step.data,effect.minValue,effect.maxValue,effect.param1,effect.param2,effect.param3,effect.param4,effect.effectId,effect.enabled);
 8001f0a:	232c      	movs	r3, #44	@ 0x2c
 8001f0c:	fb03 f000 	mul.w	r0, r3, r0
 8001f10:	3010      	adds	r0, #16
 8001f12:	f89d 3055 	ldrb.w	r3, [sp, #85]	@ 0x55
 8001f16:	9307      	str	r3, [sp, #28]
 8001f18:	9206      	str	r2, [sp, #24]
 8001f1a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8001f1e:	9305      	str	r3, [sp, #20]
 8001f20:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8001f24:	9304      	str	r3, [sp, #16]
 8001f26:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8001f2a:	9303      	str	r3, [sp, #12]
 8001f2c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 8001f30:	9302      	str	r3, [sp, #8]
 8001f32:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	f8bd 3046 	ldrh.w	r3, [sp, #70]	@ 0x46
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 8001f42:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8001f46:	f10d 0152 	add.w	r1, sp, #82	@ 0x52
 8001f4a:	4420      	add	r0, r4
 8001f4c:	f7ff ff60 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
                break;
 8001f50:	e7d1      	b.n	8001ef6 <NOS_WS2812B_Strip_Effects_AddEffect+0x72>
                NOS_WS2812B_Strip_Effect_Init(&strip->effects[strip->effectsCounter],&effect.color,effect.speed.data,effect.step.data,effect.minValue,effect.maxValue,effect.param1,effect.param2,effect.param3,effect.param4,effect.effectId,effect.enabled);
 8001f52:	232c      	movs	r3, #44	@ 0x2c
 8001f54:	fb03 f000 	mul.w	r0, r3, r0
 8001f58:	3010      	adds	r0, #16
 8001f5a:	f89d 3055 	ldrb.w	r3, [sp, #85]	@ 0x55
 8001f5e:	9307      	str	r3, [sp, #28]
 8001f60:	9206      	str	r2, [sp, #24]
 8001f62:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8001f66:	9305      	str	r3, [sp, #20]
 8001f68:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8001f6c:	9304      	str	r3, [sp, #16]
 8001f6e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8001f72:	9303      	str	r3, [sp, #12]
 8001f74:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 8001f78:	9302      	str	r3, [sp, #8]
 8001f7a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	f8bd 3046 	ldrh.w	r3, [sp, #70]	@ 0x46
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 8001f8a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8001f8e:	f10d 0152 	add.w	r1, sp, #82	@ 0x52
 8001f92:	4420      	add	r0, r4
 8001f94:	f7ff ff3c 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
                break;
 8001f98:	e7ad      	b.n	8001ef6 <NOS_WS2812B_Strip_Effects_AddEffect+0x72>
                NOS_WS2812B_Strip_Effect_Init(&strip->effects[strip->effectsCounter],&effect.color,effect.speed.data,effect.step.data,effect.minValue,effect.maxValue,effect.param1,effect.param2,effect.param3,effect.param4,effect.effectId,effect.enabled);
 8001f9a:	232c      	movs	r3, #44	@ 0x2c
 8001f9c:	fb03 f000 	mul.w	r0, r3, r0
 8001fa0:	3010      	adds	r0, #16
 8001fa2:	f89d 3055 	ldrb.w	r3, [sp, #85]	@ 0x55
 8001fa6:	9307      	str	r3, [sp, #28]
 8001fa8:	9206      	str	r2, [sp, #24]
 8001faa:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8001fae:	9305      	str	r3, [sp, #20]
 8001fb0:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8001fb4:	9304      	str	r3, [sp, #16]
 8001fb6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8001fba:	9303      	str	r3, [sp, #12]
 8001fbc:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 8001fc0:	9302      	str	r3, [sp, #8]
 8001fc2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	f8bd 3046 	ldrh.w	r3, [sp, #70]	@ 0x46
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 8001fd2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8001fd6:	f10d 0152 	add.w	r1, sp, #82	@ 0x52
 8001fda:	4420      	add	r0, r4
 8001fdc:	f7ff ff18 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
                break;
 8001fe0:	e789      	b.n	8001ef6 <NOS_WS2812B_Strip_Effects_AddEffect+0x72>
                NOS_WS2812B_Strip_Effect_Init(&strip->effects[strip->effectsCounter],&effect.color,effect.speed.data,effect.step.data,effect.minValue,effect.maxValue,effect.param1,effect.param2,effect.param3,effect.param4,effect.effectId,effect.enabled);
 8001fe2:	232c      	movs	r3, #44	@ 0x2c
 8001fe4:	fb03 f000 	mul.w	r0, r3, r0
 8001fe8:	3010      	adds	r0, #16
 8001fea:	f89d 3055 	ldrb.w	r3, [sp, #85]	@ 0x55
 8001fee:	9307      	str	r3, [sp, #28]
 8001ff0:	9206      	str	r2, [sp, #24]
 8001ff2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8001ff6:	9305      	str	r3, [sp, #20]
 8001ff8:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8001ffc:	9304      	str	r3, [sp, #16]
 8001ffe:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8002002:	9303      	str	r3, [sp, #12]
 8002004:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 8002008:	9302      	str	r3, [sp, #8]
 800200a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	f8bd 3046 	ldrh.w	r3, [sp, #70]	@ 0x46
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 800201a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800201e:	f10d 0152 	add.w	r1, sp, #82	@ 0x52
 8002022:	4420      	add	r0, r4
 8002024:	f7ff fef4 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
                break;
 8002028:	e765      	b.n	8001ef6 <NOS_WS2812B_Strip_Effects_AddEffect+0x72>

0800202a <NOS_WS2812B_Strip_Effects_UpdateEffect>:
{
 800202a:	b084      	sub	sp, #16
 800202c:	b510      	push	{r4, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	4604      	mov	r4, r0
 8002032:	a80b      	add	r0, sp, #44	@ 0x2c
 8002034:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        switch(effect.effectId)
 8002038:	f89d 2056 	ldrb.w	r2, [sp, #86]	@ 0x56
 800203c:	f1a2 0320 	sub.w	r3, r2, #32
 8002040:	2b04      	cmp	r3, #4
 8002042:	d824      	bhi.n	800208e <NOS_WS2812B_Strip_Effects_UpdateEffect+0x64>
 8002044:	e8df f003 	tbb	[pc, r3]
 8002048:	6d4c2b03 	.word	0x6d4c2b03
 800204c:	8e          	.byte	0x8e
 800204d:	00          	.byte	0x00
                NOS_WS2812B_Strip_Effect_Init(&strip->effects[0],&effect.color,effect.speed.data,effect.step.data,effect.minValue,effect.maxValue,effect.param1,effect.param2,effect.param3,effect.param4,effect.effectId,effect.enabled);
 800204e:	f89d 3055 	ldrb.w	r3, [sp, #85]	@ 0x55
 8002052:	9307      	str	r3, [sp, #28]
 8002054:	9206      	str	r2, [sp, #24]
 8002056:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800205a:	9305      	str	r3, [sp, #20]
 800205c:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8002060:	9304      	str	r3, [sp, #16]
 8002062:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8002066:	9303      	str	r3, [sp, #12]
 8002068:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 800206c:	9302      	str	r3, [sp, #8]
 800206e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	f8bd 3046 	ldrh.w	r3, [sp, #70]	@ 0x46
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 800207e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8002082:	f10d 0152 	add.w	r1, sp, #82	@ 0x52
 8002086:	f104 0010 	add.w	r0, r4, #16
 800208a:	f7ff fec1 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
    NOS_WS2812B_Strip_Clear(strip);
 800208e:	4620      	mov	r0, r4
 8002090:	f7ff fe32 	bl	8001cf8 <NOS_WS2812B_Strip_Clear>
}
 8002094:	b008      	add	sp, #32
 8002096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800209a:	b004      	add	sp, #16
 800209c:	4770      	bx	lr
                NOS_WS2812B_Strip_Effect_Init(&strip->effects[1],&effect.color,effect.speed.data,effect.step.data,effect.minValue,effect.maxValue,effect.param1,effect.param2,effect.param3,effect.param4,effect.effectId,effect.enabled);
 800209e:	f89d 3055 	ldrb.w	r3, [sp, #85]	@ 0x55
 80020a2:	9307      	str	r3, [sp, #28]
 80020a4:	9206      	str	r2, [sp, #24]
 80020a6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80020aa:	9305      	str	r3, [sp, #20]
 80020ac:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 80020b0:	9304      	str	r3, [sp, #16]
 80020b2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80020b6:	9303      	str	r3, [sp, #12]
 80020b8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 80020bc:	9302      	str	r3, [sp, #8]
 80020be:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	f8bd 3046 	ldrh.w	r3, [sp, #70]	@ 0x46
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 80020ce:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80020d2:	f10d 0152 	add.w	r1, sp, #82	@ 0x52
 80020d6:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 80020da:	f7ff fe99 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
                break;
 80020de:	e7d6      	b.n	800208e <NOS_WS2812B_Strip_Effects_UpdateEffect+0x64>
                NOS_WS2812B_Strip_Effect_Init(&strip->effects[2],&effect.color,effect.speed.data,effect.step.data,effect.minValue,effect.maxValue,effect.param1,effect.param2,effect.param3,effect.param4,effect.effectId,effect.enabled);
 80020e0:	f89d 3055 	ldrb.w	r3, [sp, #85]	@ 0x55
 80020e4:	9307      	str	r3, [sp, #28]
 80020e6:	9206      	str	r2, [sp, #24]
 80020e8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80020ec:	9305      	str	r3, [sp, #20]
 80020ee:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 80020f2:	9304      	str	r3, [sp, #16]
 80020f4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80020f8:	9303      	str	r3, [sp, #12]
 80020fa:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 80020fe:	9302      	str	r3, [sp, #8]
 8002100:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	f8bd 3046 	ldrh.w	r3, [sp, #70]	@ 0x46
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 8002110:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8002114:	f10d 0152 	add.w	r1, sp, #82	@ 0x52
 8002118:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800211c:	f7ff fe78 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
                break;
 8002120:	e7b5      	b.n	800208e <NOS_WS2812B_Strip_Effects_UpdateEffect+0x64>
                NOS_WS2812B_Strip_Effect_Init(&strip->effects[3],&effect.color,effect.speed.data,effect.step.data,effect.minValue,effect.maxValue,effect.param1,effect.param2,effect.param3,effect.param4,effect.effectId,effect.enabled);
 8002122:	f89d 3055 	ldrb.w	r3, [sp, #85]	@ 0x55
 8002126:	9307      	str	r3, [sp, #28]
 8002128:	9206      	str	r2, [sp, #24]
 800212a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800212e:	9305      	str	r3, [sp, #20]
 8002130:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8002134:	9304      	str	r3, [sp, #16]
 8002136:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800213a:	9303      	str	r3, [sp, #12]
 800213c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 8002140:	9302      	str	r3, [sp, #8]
 8002142:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	f8bd 3046 	ldrh.w	r3, [sp, #70]	@ 0x46
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 8002152:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8002156:	f10d 0152 	add.w	r1, sp, #82	@ 0x52
 800215a:	f104 0094 	add.w	r0, r4, #148	@ 0x94
 800215e:	f7ff fe57 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
                break;
 8002162:	e794      	b.n	800208e <NOS_WS2812B_Strip_Effects_UpdateEffect+0x64>
                NOS_WS2812B_Strip_Effect_Init(&strip->effects[4],&effect.color,effect.speed.data,effect.step.data,effect.minValue,effect.maxValue,effect.param1,effect.param2,effect.param3,effect.param4,effect.effectId,effect.enabled);
 8002164:	f89d 3055 	ldrb.w	r3, [sp, #85]	@ 0x55
 8002168:	9307      	str	r3, [sp, #28]
 800216a:	9206      	str	r2, [sp, #24]
 800216c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8002170:	9305      	str	r3, [sp, #20]
 8002172:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8002176:	9304      	str	r3, [sp, #16]
 8002178:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800217c:	9303      	str	r3, [sp, #12]
 800217e:	f8bd 304a 	ldrh.w	r3, [sp, #74]	@ 0x4a
 8002182:	9302      	str	r3, [sp, #8]
 8002184:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	f8bd 3046 	ldrh.w	r3, [sp, #70]	@ 0x46
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 8002194:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8002198:	f10d 0152 	add.w	r1, sp, #82	@ 0x52
 800219c:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 80021a0:	f7ff fe36 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
                break;
 80021a4:	e773      	b.n	800208e <NOS_WS2812B_Strip_Effects_UpdateEffect+0x64>

080021a6 <NOS_WS2812B_Strip_Effect_Copy>:

void NOS_WS2812B_Strip_Effect_Copy(Effect_Struct* destination,Effect_Struct* source)
{
 80021a6:	b538      	push	{r3, r4, r5, lr}
 80021a8:	4605      	mov	r5, r0
 80021aa:	460c      	mov	r4, r1
    NOS_Math_SinValue_Init(&destination->value,source->minValue,source->maxValue,source->step.data);
 80021ac:	8acb      	ldrh	r3, [r1, #22]
 80021ae:	8b8a      	ldrh	r2, [r1, #28]
 80021b0:	8b49      	ldrh	r1, [r1, #26]
 80021b2:	f7fe fdab 	bl	8000d0c <NOS_Math_SinValue_Init>
    destination->minValue = source->minValue;
 80021b6:	8b63      	ldrh	r3, [r4, #26]
 80021b8:	836b      	strh	r3, [r5, #26]
    destination->maxValue = source->maxValue;
 80021ba:	8ba3      	ldrh	r3, [r4, #28]
 80021bc:	83ab      	strh	r3, [r5, #28]
    destination->speed.data = source->speed.data;
 80021be:	8aa3      	ldrh	r3, [r4, #20]
 80021c0:	82ab      	strh	r3, [r5, #20]
    destination->step.data = source->step.data;
 80021c2:	8ae3      	ldrh	r3, [r4, #22]
 80021c4:	82eb      	strh	r3, [r5, #22]
    destination->enabled = source->enabled;
 80021c6:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80021ca:	f885 3029 	strb.w	r3, [r5, #41]	@ 0x29
    NOS_PixelColor_SetColor(&destination->color,source->color.R,source->color.G,source->color.B);
 80021ce:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80021d2:	f894 2027 	ldrb.w	r2, [r4, #39]	@ 0x27
 80021d6:	f894 1026 	ldrb.w	r1, [r4, #38]	@ 0x26
 80021da:	f105 0026 	add.w	r0, r5, #38	@ 0x26
 80021de:	f7fe fcf5 	bl	8000bcc <NOS_PixelColor_SetColor>
    destination->effectId = source->effectId;   
 80021e2:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 80021e6:	f885 302a 	strb.w	r3, [r5, #42]	@ 0x2a
}
 80021ea:	bd38      	pop	{r3, r4, r5, pc}

080021ec <NOS_WS2812B_Strip_Effect_Breathe_Handler>:

void NOS_WS2812B_Strip_Effect_Breathe_Handler(WS2812B_Strip* strip,Effect_Struct* effect)
{
    if(strip != NULL)
 80021ec:	b1d8      	cbz	r0, 8002226 <NOS_WS2812B_Strip_Effect_Breathe_Handler+0x3a>
{
 80021ee:	b538      	push	{r3, r4, r5, lr}
 80021f0:	460c      	mov	r4, r1
 80021f2:	4605      	mov	r5, r0
    {
        if(effect != NULL)
 80021f4:	b149      	cbz	r1, 800220a <NOS_WS2812B_Strip_Effect_Breathe_Handler+0x1e>
        {
            if(effect->enabled)
 80021f6:	f891 3029 	ldrb.w	r3, [r1, #41]	@ 0x29
 80021fa:	b133      	cbz	r3, 800220a <NOS_WS2812B_Strip_Effect_Breathe_Handler+0x1e>
            {
                if(effect->timer > effect->speed.data)
 80021fc:	8b0a      	ldrh	r2, [r1, #24]
 80021fe:	8a8b      	ldrh	r3, [r1, #20]
 8002200:	429a      	cmp	r2, r3
 8002202:	d803      	bhi.n	800220c <NOS_WS2812B_Strip_Effect_Breathe_Handler+0x20>
                    NOS_Math_SinValue_Handler(&effect->value);
                    NOS_WS2812B_Strip_SetBright(strip,effect->value.value);
                    NOS_WS2812B_Strip_Update(strip);
                    effect->timer = 0;
                }
                effect->timer++;
 8002204:	8b23      	ldrh	r3, [r4, #24]
 8002206:	3301      	adds	r3, #1
 8002208:	8323      	strh	r3, [r4, #24]
            }
        }
    }
}
 800220a:	bd38      	pop	{r3, r4, r5, pc}
                    NOS_Math_SinValue_Handler(&effect->value);
 800220c:	4608      	mov	r0, r1
 800220e:	f7fe fd5f 	bl	8000cd0 <NOS_Math_SinValue_Handler>
                    NOS_WS2812B_Strip_SetBright(strip,effect->value.value);
 8002212:	7821      	ldrb	r1, [r4, #0]
 8002214:	4628      	mov	r0, r5
 8002216:	f7ff fdf9 	bl	8001e0c <NOS_WS2812B_Strip_SetBright>
                    NOS_WS2812B_Strip_Update(strip);
 800221a:	4628      	mov	r0, r5
 800221c:	f7ff fd86 	bl	8001d2c <NOS_WS2812B_Strip_Update>
                    effect->timer = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	8323      	strh	r3, [r4, #24]
 8002224:	e7ee      	b.n	8002204 <NOS_WS2812B_Strip_Effect_Breathe_Handler+0x18>
 8002226:	4770      	bx	lr

08002228 <NOS_WS2812B_Strip_Effect_Rainbow_Handler>:

void NOS_WS2812B_Strip_Effect_Rainbow_Handler(WS2812B_Strip* strip,Effect_Struct* effect)
{
    if(strip != NULL)
 8002228:	2800      	cmp	r0, #0
 800222a:	f000 8102 	beq.w	8002432 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x20a>
{
 800222e:	b570      	push	{r4, r5, r6, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	460c      	mov	r4, r1
 8002234:	4605      	mov	r5, r0
    {
        if(effect != NULL)
 8002236:	b149      	cbz	r1, 800224c <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x24>
        {
            if(effect->enabled)
 8002238:	f891 3029 	ldrb.w	r3, [r1, #41]	@ 0x29
 800223c:	b133      	cbz	r3, 800224c <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x24>
            {
                if(effect->timer > effect->speed.data)
 800223e:	8b0a      	ldrh	r2, [r1, #24]
 8002240:	8a8b      	ldrh	r3, [r1, #20]
 8002242:	429a      	cmp	r2, r3
 8002244:	d804      	bhi.n	8002250 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x28>

                    NOS_WS2812B_Strip_ColorFill(strip,curr);
                    NOS_WS2812B_Strip_Update(strip);
                    effect->timer = 0;
                }
                effect->timer++;
 8002246:	8b23      	ldrh	r3, [r4, #24]
 8002248:	3301      	adds	r3, #1
 800224a:	8323      	strh	r3, [r4, #24]
            }
        }
    }
}
 800224c:	b002      	add	sp, #8
 800224e:	bd70      	pop	{r4, r5, r6, pc}
                    NOS_Math_SinValue_Handler(&effect->value);
 8002250:	4608      	mov	r0, r1
 8002252:	f7fe fd3d 	bl	8000cd0 <NOS_Math_SinValue_Handler>
                    uint16_t number = NOS_Math_GetSinValue(&effect->value);
 8002256:	4620      	mov	r0, r4
 8002258:	f7fe fd38 	bl	8000ccc <NOS_Math_GetSinValue>
 800225c:	b282      	uxth	r2, r0
                    uint8_t iteration = number / 0x7F;
 800225e:	4b75      	ldr	r3, [pc, #468]	@ (8002434 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x20c>)
 8002260:	fba3 1302 	umull	r1, r3, r3, r2
 8002264:	1ad1      	subs	r1, r2, r3
 8002266:	eb03 0051 	add.w	r0, r3, r1, lsr #1
 800226a:	f3c0 1087 	ubfx	r0, r0, #6, #8
                    PixelColor curr = { 0,0,0 };
 800226e:	2300      	movs	r3, #0
 8002270:	f88d 3004 	strb.w	r3, [sp, #4]
 8002274:	f88d 3005 	strb.w	r3, [sp, #5]
 8002278:	f88d 3006 	strb.w	r3, [sp, #6]
                    number = number - 0x7F * iteration;
 800227c:	eba0 13c0 	sub.w	r3, r0, r0, lsl #7
 8002280:	fa12 f383 	uxtah	r3, r2, r3
 8002284:	b29e      	uxth	r6, r3
                    switch (iteration)
 8002286:	280b      	cmp	r0, #11
 8002288:	d815      	bhi.n	80022b6 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8e>
 800228a:	e8df f000 	tbb	[pc, r0]
 800228e:	1e06      	.short	0x1e06
 8002290:	5f503f2f 	.word	0x5f503f2f
 8002294:	a0918070 	.word	0xa0918070
 8002298:	c1b1      	.short	0xc1b1
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 800229a:	f7fe fc9b 	bl	8000bd4 <NOS_GetBaseColor>
 800229e:	f88d 0004 	strb.w	r0, [sp, #4]
 80022a2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80022a6:	f88d 3005 	strb.w	r3, [sp, #5]
 80022aa:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80022ae:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.G = number;
 80022b2:	f88d 6005 	strb.w	r6, [sp, #5]
                    NOS_WS2812B_Strip_ColorFill(strip,curr);
 80022b6:	9901      	ldr	r1, [sp, #4]
 80022b8:	4628      	mov	r0, r5
 80022ba:	f7ff fd81 	bl	8001dc0 <NOS_WS2812B_Strip_ColorFill>
                    NOS_WS2812B_Strip_Update(strip);
 80022be:	4628      	mov	r0, r5
 80022c0:	f7ff fd34 	bl	8001d2c <NOS_WS2812B_Strip_Update>
                    effect->timer = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	8323      	strh	r3, [r4, #24]
 80022c8:	e7bd      	b.n	8002246 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x1e>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 80022ca:	f7fe fc83 	bl	8000bd4 <NOS_GetBaseColor>
 80022ce:	f88d 0004 	strb.w	r0, [sp, #4]
 80022d2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80022d6:	f88d 3005 	strb.w	r3, [sp, #5]
 80022da:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80022de:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.G = 0x7F + number;
 80022e2:	f106 037f 	add.w	r3, r6, #127	@ 0x7f
 80022e6:	f88d 3005 	strb.w	r3, [sp, #5]
                        break;
 80022ea:	e7e4      	b.n	80022b6 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8e>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 80022ec:	f7fe fc72 	bl	8000bd4 <NOS_GetBaseColor>
 80022f0:	f88d 0004 	strb.w	r0, [sp, #4]
 80022f4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80022f8:	f88d 3005 	strb.w	r3, [sp, #5]
 80022fc:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8002300:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.B = 0xFF - number;
 8002304:	43f3      	mvns	r3, r6
 8002306:	f88d 3006 	strb.w	r3, [sp, #6]
                        break;
 800230a:	e7d4      	b.n	80022b6 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8e>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 800230c:	f7fe fc62 	bl	8000bd4 <NOS_GetBaseColor>
 8002310:	f88d 0004 	strb.w	r0, [sp, #4]
 8002314:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002318:	f88d 3005 	strb.w	r3, [sp, #5]
 800231c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8002320:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.B = 0x7F - number;
 8002324:	f1c6 037f 	rsb	r3, r6, #127	@ 0x7f
 8002328:	f88d 3006 	strb.w	r3, [sp, #6]
                        break;
 800232c:	e7c3      	b.n	80022b6 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8e>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 800232e:	f7fe fc51 	bl	8000bd4 <NOS_GetBaseColor>
 8002332:	f88d 0004 	strb.w	r0, [sp, #4]
 8002336:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800233a:	f88d 3005 	strb.w	r3, [sp, #5]
 800233e:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8002342:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.R = number;
 8002346:	f88d 6004 	strb.w	r6, [sp, #4]
                        break;
 800234a:	e7b4      	b.n	80022b6 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8e>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 800234c:	f7fe fc42 	bl	8000bd4 <NOS_GetBaseColor>
 8002350:	f88d 0004 	strb.w	r0, [sp, #4]
 8002354:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002358:	f88d 3005 	strb.w	r3, [sp, #5]
 800235c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8002360:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.R = 0x7F + number;
 8002364:	f106 037f 	add.w	r3, r6, #127	@ 0x7f
 8002368:	f88d 3004 	strb.w	r3, [sp, #4]
                        break;
 800236c:	e7a3      	b.n	80022b6 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8e>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 800236e:	f7fe fc31 	bl	8000bd4 <NOS_GetBaseColor>
 8002372:	f88d 0004 	strb.w	r0, [sp, #4]
 8002376:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800237a:	f88d 3005 	strb.w	r3, [sp, #5]
 800237e:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8002382:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.G = 0xFF - number;
 8002386:	43f3      	mvns	r3, r6
 8002388:	f88d 3005 	strb.w	r3, [sp, #5]
                        break;
 800238c:	e793      	b.n	80022b6 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8e>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 800238e:	f7fe fc21 	bl	8000bd4 <NOS_GetBaseColor>
 8002392:	f88d 0004 	strb.w	r0, [sp, #4]
 8002396:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800239a:	f88d 3005 	strb.w	r3, [sp, #5]
 800239e:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80023a2:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.G = 0x7F - number;
 80023a6:	f1c6 037f 	rsb	r3, r6, #127	@ 0x7f
 80023aa:	f88d 3005 	strb.w	r3, [sp, #5]
                        break;
 80023ae:	e782      	b.n	80022b6 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8e>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 80023b0:	f7fe fc10 	bl	8000bd4 <NOS_GetBaseColor>
 80023b4:	f88d 0004 	strb.w	r0, [sp, #4]
 80023b8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80023bc:	f88d 3005 	strb.w	r3, [sp, #5]
 80023c0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80023c4:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.B = number;
 80023c8:	f88d 6006 	strb.w	r6, [sp, #6]
                        break;
 80023cc:	e773      	b.n	80022b6 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8e>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 80023ce:	f7fe fc01 	bl	8000bd4 <NOS_GetBaseColor>
 80023d2:	f88d 0004 	strb.w	r0, [sp, #4]
 80023d6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80023da:	f88d 3005 	strb.w	r3, [sp, #5]
 80023de:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80023e2:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.B = 0x7F + number;
 80023e6:	f106 037f 	add.w	r3, r6, #127	@ 0x7f
 80023ea:	f88d 3006 	strb.w	r3, [sp, #6]
                        break;
 80023ee:	e762      	b.n	80022b6 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8e>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 80023f0:	f7fe fbf0 	bl	8000bd4 <NOS_GetBaseColor>
 80023f4:	f88d 0004 	strb.w	r0, [sp, #4]
 80023f8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80023fc:	f88d 3005 	strb.w	r3, [sp, #5]
 8002400:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8002404:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.R = 0xFF - number;
 8002408:	43f3      	mvns	r3, r6
 800240a:	f88d 3004 	strb.w	r3, [sp, #4]
                        break;
 800240e:	e752      	b.n	80022b6 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8e>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8002410:	f7fe fbe0 	bl	8000bd4 <NOS_GetBaseColor>
 8002414:	f88d 0004 	strb.w	r0, [sp, #4]
 8002418:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800241c:	f88d 3005 	strb.w	r3, [sp, #5]
 8002420:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8002424:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.R = 0x7F - number;
 8002428:	f1c6 037f 	rsb	r3, r6, #127	@ 0x7f
 800242c:	f88d 3004 	strb.w	r3, [sp, #4]
                        break;
 8002430:	e741      	b.n	80022b6 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8e>
 8002432:	4770      	bx	lr
 8002434:	02040811 	.word	0x02040811

08002438 <NOS_WS2812B_Strip_Effect_Dots_Handler>:

void NOS_WS2812B_Strip_Effect_Dots_Handler(WS2812B_Strip* strip,Effect_Struct* effect)
{
 8002438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800243c:	b083      	sub	sp, #12
    if(effect->enabled)
 800243e:	f891 7029 	ldrb.w	r7, [r1, #41]	@ 0x29
 8002442:	b917      	cbnz	r7, 800244a <NOS_WS2812B_Strip_Effect_Dots_Handler+0x12>
	}
    effect->timer = 0;
}
effect->timer++;
    }
}
 8002444:	b003      	add	sp, #12
 8002446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800244a:	4605      	mov	r5, r0
 800244c:	460e      	mov	r6, r1
	PixelColor temp = {0,0,0};
 800244e:	2300      	movs	r3, #0
 8002450:	f88d 3000 	strb.w	r3, [sp]
 8002454:	f88d 3001 	strb.w	r3, [sp, #1]
 8002458:	f88d 3002 	strb.w	r3, [sp, #2]
    PixelColor color = {0,0,0};
 800245c:	f88d 3004 	strb.w	r3, [sp, #4]
 8002460:	f88d 3005 	strb.w	r3, [sp, #5]
 8002464:	f88d 3006 	strb.w	r3, [sp, #6]
    NOS_PixelColor_SetColor(&color,effect->color.R,effect->color.G,effect->color.B);
 8002468:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 800246c:	f891 2027 	ldrb.w	r2, [r1, #39]	@ 0x27
 8002470:	f891 1026 	ldrb.w	r1, [r1, #38]	@ 0x26
 8002474:	a801      	add	r0, sp, #4
 8002476:	f7fe fba9 	bl	8000bcc <NOS_PixelColor_SetColor>
    if(effect->timer >= effect->speed.data)
 800247a:	8b32      	ldrh	r2, [r6, #24]
 800247c:	8ab3      	ldrh	r3, [r6, #20]
 800247e:	429a      	cmp	r2, r3
 8002480:	d37d      	bcc.n	800257e <NOS_WS2812B_Strip_Effect_Dots_Handler+0x146>
	if(color.R == 0xFF)
 8002482:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002486:	2bff      	cmp	r3, #255	@ 0xff
 8002488:	d00e      	beq.n	80024a8 <NOS_WS2812B_Strip_Effect_Dots_Handler+0x70>
		isR = false;
 800248a:	f04f 0800 	mov.w	r8, #0
	if(color.G == 0xFF)
 800248e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002492:	2bff      	cmp	r3, #255	@ 0xff
 8002494:	d00a      	beq.n	80024ac <NOS_WS2812B_Strip_Effect_Dots_Handler+0x74>
		isG = false;
 8002496:	f04f 0900 	mov.w	r9, #0
	if(color.B == 0xFF)
 800249a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800249e:	2bff      	cmp	r3, #255	@ 0xff
 80024a0:	d000      	beq.n	80024a4 <NOS_WS2812B_Strip_Effect_Dots_Handler+0x6c>
		isB = false;
 80024a2:	2700      	movs	r7, #0
	for( i = 0; i < strip->pixelCount; i++)
 80024a4:	2400      	movs	r4, #0
 80024a6:	e014      	b.n	80024d2 <NOS_WS2812B_Strip_Effect_Dots_Handler+0x9a>
		isR = true;
 80024a8:	46b8      	mov	r8, r7
 80024aa:	e7f0      	b.n	800248e <NOS_WS2812B_Strip_Effect_Dots_Handler+0x56>
		isG = true;
 80024ac:	46b9      	mov	r9, r7
 80024ae:	e7f4      	b.n	800249a <NOS_WS2812B_Strip_Effect_Dots_Handler+0x62>
			temp.R = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f88d 3000 	strb.w	r3, [sp]
 80024b6:	e044      	b.n	8002542 <NOS_WS2812B_Strip_Effect_Dots_Handler+0x10a>
			temp.G = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f88d 3001 	strb.w	r3, [sp, #1]
 80024be:	e04e      	b.n	800255e <NOS_WS2812B_Strip_Effect_Dots_Handler+0x126>
			temp.B = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f88d 3002 	strb.w	r3, [sp, #2]
        NOS_WS2812B_Strip_SetPixelByPixelColor(strip,i,temp);
 80024c6:	9a00      	ldr	r2, [sp, #0]
 80024c8:	4621      	mov	r1, r4
 80024ca:	4628      	mov	r0, r5
 80024cc:	f7ff fc8f 	bl	8001dee <NOS_WS2812B_Strip_SetPixelByPixelColor>
	for( i = 0; i < strip->pixelCount; i++)
 80024d0:	3401      	adds	r4, #1
 80024d2:	68ab      	ldr	r3, [r5, #8]
 80024d4:	42a3      	cmp	r3, r4
 80024d6:	d950      	bls.n	800257a <NOS_WS2812B_Strip_Effect_Dots_Handler+0x142>
        temp.R = strip->pixels[i].R;
 80024d8:	6869      	ldr	r1, [r5, #4]
 80024da:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80024de:	188b      	adds	r3, r1, r2
 80024e0:	5c8a      	ldrb	r2, [r1, r2]
 80024e2:	f88d 2000 	strb.w	r2, [sp]
        temp.G = strip->pixels[i].G;
 80024e6:	785a      	ldrb	r2, [r3, #1]
 80024e8:	f88d 2001 	strb.w	r2, [sp, #1]
        temp.B = strip->pixels[i].B;
 80024ec:	789b      	ldrb	r3, [r3, #2]
 80024ee:	f88d 3002 	strb.w	r3, [sp, #2]
		if(rand() % random == 0)
 80024f2:	f004 f961 	bl	80067b8 <rand>
 80024f6:	4b24      	ldr	r3, [pc, #144]	@ (8002588 <NOS_WS2812B_Strip_Effect_Dots_Handler+0x150>)
 80024f8:	fba3 2300 	umull	r2, r3, r3, r0
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	2232      	movs	r2, #50	@ 0x32
 8002500:	fb02 0313 	mls	r3, r2, r3, r0
 8002504:	b97b      	cbnz	r3, 8002526 <NOS_WS2812B_Strip_Effect_Dots_Handler+0xee>
			if(isR)
 8002506:	f1b8 0f00 	cmp.w	r8, #0
 800250a:	d002      	beq.n	8002512 <NOS_WS2812B_Strip_Effect_Dots_Handler+0xda>
				temp.R = 255;
 800250c:	23ff      	movs	r3, #255	@ 0xff
 800250e:	f88d 3000 	strb.w	r3, [sp]
			if(isG)
 8002512:	f1b9 0f00 	cmp.w	r9, #0
 8002516:	d002      	beq.n	800251e <NOS_WS2812B_Strip_Effect_Dots_Handler+0xe6>
				temp.G = 255;
 8002518:	23ff      	movs	r3, #255	@ 0xff
 800251a:	f88d 3001 	strb.w	r3, [sp, #1]
			if(isB)
 800251e:	b117      	cbz	r7, 8002526 <NOS_WS2812B_Strip_Effect_Dots_Handler+0xee>
				temp.B = 255;
 8002520:	23ff      	movs	r3, #255	@ 0xff
 8002522:	f88d 3002 	strb.w	r3, [sp, #2]
		if(isR)
 8002526:	f1b8 0f00 	cmp.w	r8, #0
 800252a:	d00a      	beq.n	8002542 <NOS_WS2812B_Strip_Effect_Dots_Handler+0x10a>
		if(temp.R > fadeOutFactor)
 800252c:	f89d 3000 	ldrb.w	r3, [sp]
 8002530:	2b28      	cmp	r3, #40	@ 0x28
 8002532:	d9bd      	bls.n	80024b0 <NOS_WS2812B_Strip_Effect_Dots_Handler+0x78>
			temp.R -= temp.R/fadeOutFactor;
 8002534:	4a15      	ldr	r2, [pc, #84]	@ (800258c <NOS_WS2812B_Strip_Effect_Dots_Handler+0x154>)
 8002536:	fba2 1203 	umull	r1, r2, r2, r3
 800253a:	eba3 1352 	sub.w	r3, r3, r2, lsr #5
 800253e:	f88d 3000 	strb.w	r3, [sp]
		if(isG)
 8002542:	f1b9 0f00 	cmp.w	r9, #0
 8002546:	d00a      	beq.n	800255e <NOS_WS2812B_Strip_Effect_Dots_Handler+0x126>
		if(temp.G > fadeOutFactor)
 8002548:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800254c:	2b28      	cmp	r3, #40	@ 0x28
 800254e:	d9b3      	bls.n	80024b8 <NOS_WS2812B_Strip_Effect_Dots_Handler+0x80>
			temp.G -= temp.G/fadeOutFactor;
 8002550:	4a0e      	ldr	r2, [pc, #56]	@ (800258c <NOS_WS2812B_Strip_Effect_Dots_Handler+0x154>)
 8002552:	fba2 1203 	umull	r1, r2, r2, r3
 8002556:	eba3 1352 	sub.w	r3, r3, r2, lsr #5
 800255a:	f88d 3001 	strb.w	r3, [sp, #1]
		if(isB)
 800255e:	2f00      	cmp	r7, #0
 8002560:	d0b1      	beq.n	80024c6 <NOS_WS2812B_Strip_Effect_Dots_Handler+0x8e>
		if(temp.B > fadeOutFactor)
 8002562:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002566:	2b28      	cmp	r3, #40	@ 0x28
 8002568:	d9aa      	bls.n	80024c0 <NOS_WS2812B_Strip_Effect_Dots_Handler+0x88>
			temp.B -= temp.B/fadeOutFactor;
 800256a:	4a08      	ldr	r2, [pc, #32]	@ (800258c <NOS_WS2812B_Strip_Effect_Dots_Handler+0x154>)
 800256c:	fba2 1203 	umull	r1, r2, r2, r3
 8002570:	eba3 1352 	sub.w	r3, r3, r2, lsr #5
 8002574:	f88d 3002 	strb.w	r3, [sp, #2]
 8002578:	e7a5      	b.n	80024c6 <NOS_WS2812B_Strip_Effect_Dots_Handler+0x8e>
    effect->timer = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	8333      	strh	r3, [r6, #24]
effect->timer++;
 800257e:	8b33      	ldrh	r3, [r6, #24]
 8002580:	3301      	adds	r3, #1
 8002582:	8333      	strh	r3, [r6, #24]
}
 8002584:	e75e      	b.n	8002444 <NOS_WS2812B_Strip_Effect_Dots_Handler+0xc>
 8002586:	bf00      	nop
 8002588:	51eb851f 	.word	0x51eb851f
 800258c:	cccccccd 	.word	0xcccccccd

08002590 <NOS_WS2812B_Strip_Effect_Walking_Pixels_Handler>:

void NOS_WS2812B_Strip_Effect_Walking_Pixels_Handler(WS2812B_Strip* strip,Effect_Struct* effect)
{
 8002590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(effect->enabled)
 8002592:	f891 3029 	ldrb.w	r3, [r1, #41]	@ 0x29
 8002596:	b143      	cbz	r3, 80025aa <NOS_WS2812B_Strip_Effect_Walking_Pixels_Handler+0x1a>
 8002598:	4606      	mov	r6, r0
 800259a:	460c      	mov	r4, r1
    {
        if(effect->timer > effect->speed.data)
 800259c:	8b0a      	ldrh	r2, [r1, #24]
 800259e:	8a8b      	ldrh	r3, [r1, #20]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d803      	bhi.n	80025ac <NOS_WS2812B_Strip_Effect_Walking_Pixels_Handler+0x1c>
                    NOS_WS2812B_Strip_SetPixelByPixelColor(strip,(pixelPos+i) - strip->pixelCount,effect->color);
                }
            }
            effect->timer = 0;
        }
        effect->timer++;
 80025a4:	8b23      	ldrh	r3, [r4, #24]
 80025a6:	3301      	adds	r3, #1
 80025a8:	8323      	strh	r3, [r4, #24]
    }
}
 80025aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            NOS_Math_SinValue_Handler(&effect->value);
 80025ac:	4608      	mov	r0, r1
 80025ae:	f7fe fb8f 	bl	8000cd0 <NOS_Math_SinValue_Handler>
            uint16_t pixelPos = NOS_Math_GetSinValue(&effect->value);
 80025b2:	4620      	mov	r0, r4
 80025b4:	f7fe fb8a 	bl	8000ccc <NOS_Math_GetSinValue>
 80025b8:	4607      	mov	r7, r0
            for(int i = 0; i < effect->param1; i++)
 80025ba:	2500      	movs	r5, #0
 80025bc:	e009      	b.n	80025d2 <NOS_WS2812B_Strip_Effect_Walking_Pixels_Handler+0x42>
                    NOS_WS2812B_Strip_SetPixelByPixelColor(strip,(pixelPos+i) - strip->pixelCount,effect->color);
 80025be:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80025c0:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 80025c4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80025c8:	1ac9      	subs	r1, r1, r3
 80025ca:	4630      	mov	r0, r6
 80025cc:	f7ff fc0f 	bl	8001dee <NOS_WS2812B_Strip_SetPixelByPixelColor>
            for(int i = 0; i < effect->param1; i++)
 80025d0:	3501      	adds	r5, #1
 80025d2:	8be3      	ldrh	r3, [r4, #30]
 80025d4:	42ab      	cmp	r3, r5
 80025d6:	dd0d      	ble.n	80025f4 <NOS_WS2812B_Strip_Effect_Walking_Pixels_Handler+0x64>
                if(pixelPos + i < strip->pixelCount)
 80025d8:	fa15 f187 	uxtah	r1, r5, r7
 80025dc:	68b3      	ldr	r3, [r6, #8]
 80025de:	4299      	cmp	r1, r3
 80025e0:	daed      	bge.n	80025be <NOS_WS2812B_Strip_Effect_Walking_Pixels_Handler+0x2e>
                    NOS_WS2812B_Strip_SetPixelByPixelColor(strip,pixelPos+i,effect->color);
 80025e2:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80025e4:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 80025e8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80025ec:	4630      	mov	r0, r6
 80025ee:	f7ff fbfe 	bl	8001dee <NOS_WS2812B_Strip_SetPixelByPixelColor>
 80025f2:	e7ed      	b.n	80025d0 <NOS_WS2812B_Strip_Effect_Walking_Pixels_Handler+0x40>
            effect->timer = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	8323      	strh	r3, [r4, #24]
 80025f8:	e7d4      	b.n	80025a4 <NOS_WS2812B_Strip_Effect_Walking_Pixels_Handler+0x14>

080025fa <NOS_WS2812B_Strip_Effect_Steady_Color_Handler>:
    }
}

void NOS_WS2812B_Strip_Effect_Steady_Color_Handler(WS2812B_Strip* strip,Effect_Struct* effect)
{
    if(strip != NULL)
 80025fa:	b160      	cbz	r0, 8002616 <NOS_WS2812B_Strip_Effect_Steady_Color_Handler+0x1c>
{
 80025fc:	b508      	push	{r3, lr}
    {
        if(effect->enabled)
 80025fe:	f891 3029 	ldrb.w	r3, [r1, #41]	@ 0x29
 8002602:	b903      	cbnz	r3, 8002606 <NOS_WS2812B_Strip_Effect_Steady_Color_Handler+0xc>
        {
            NOS_WS2812B_Strip_ColorFill(strip,effect->color);
        }
    }
}
 8002604:	bd08      	pop	{r3, pc}
            NOS_WS2812B_Strip_ColorFill(strip,effect->color);
 8002606:	8ccb      	ldrh	r3, [r1, #38]	@ 0x26
 8002608:	f891 1028 	ldrb.w	r1, [r1, #40]	@ 0x28
 800260c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8002610:	f7ff fbd6 	bl	8001dc0 <NOS_WS2812B_Strip_ColorFill>
}
 8002614:	e7f6      	b.n	8002604 <NOS_WS2812B_Strip_Effect_Steady_Color_Handler+0xa>
 8002616:	4770      	bx	lr

08002618 <NOS_WS2812B_Strip_Effects_Handler>:
{
 8002618:	b538      	push	{r3, r4, r5, lr}
 800261a:	4605      	mov	r5, r0
    for(int i = 0; i < strip->effectsCounter; i++)
 800261c:	2400      	movs	r4, #0
 800261e:	e008      	b.n	8002632 <NOS_WS2812B_Strip_Effects_Handler+0x1a>
                NOS_WS2812B_Strip_Effect_Breathe_Handler(strip,&strip->effects[i]);
 8002620:	212c      	movs	r1, #44	@ 0x2c
 8002622:	fb04 f101 	mul.w	r1, r4, r1
 8002626:	3110      	adds	r1, #16
 8002628:	4429      	add	r1, r5
 800262a:	4628      	mov	r0, r5
 800262c:	f7ff fdde 	bl	80021ec <NOS_WS2812B_Strip_Effect_Breathe_Handler>
    for(int i = 0; i < strip->effectsCounter; i++)
 8002630:	3401      	adds	r4, #1
 8002632:	f895 30ec 	ldrb.w	r3, [r5, #236]	@ 0xec
 8002636:	42a3      	cmp	r3, r4
 8002638:	dd38      	ble.n	80026ac <NOS_WS2812B_Strip_Effects_Handler+0x94>
        switch(strip->effects[i].effectId)
 800263a:	232c      	movs	r3, #44	@ 0x2c
 800263c:	fb03 5304 	mla	r3, r3, r4, r5
 8002640:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002644:	3b20      	subs	r3, #32
 8002646:	2b04      	cmp	r3, #4
 8002648:	d8f2      	bhi.n	8002630 <NOS_WS2812B_Strip_Effects_Handler+0x18>
 800264a:	a201      	add	r2, pc, #4	@ (adr r2, 8002650 <NOS_WS2812B_Strip_Effects_Handler+0x38>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	08002621 	.word	0x08002621
 8002654:	08002665 	.word	0x08002665
 8002658:	08002677 	.word	0x08002677
 800265c:	08002689 	.word	0x08002689
 8002660:	0800269b 	.word	0x0800269b
                NOS_WS2812B_Strip_Effect_Rainbow_Handler(strip,&strip->effects[i]);
 8002664:	212c      	movs	r1, #44	@ 0x2c
 8002666:	fb04 f101 	mul.w	r1, r4, r1
 800266a:	3110      	adds	r1, #16
 800266c:	4429      	add	r1, r5
 800266e:	4628      	mov	r0, r5
 8002670:	f7ff fdda 	bl	8002228 <NOS_WS2812B_Strip_Effect_Rainbow_Handler>
                break;
 8002674:	e7dc      	b.n	8002630 <NOS_WS2812B_Strip_Effects_Handler+0x18>
                NOS_WS2812B_Strip_Effect_Dots_Handler(strip,&strip->effects[i]);
 8002676:	212c      	movs	r1, #44	@ 0x2c
 8002678:	fb04 f101 	mul.w	r1, r4, r1
 800267c:	3110      	adds	r1, #16
 800267e:	4429      	add	r1, r5
 8002680:	4628      	mov	r0, r5
 8002682:	f7ff fed9 	bl	8002438 <NOS_WS2812B_Strip_Effect_Dots_Handler>
                break;
 8002686:	e7d3      	b.n	8002630 <NOS_WS2812B_Strip_Effects_Handler+0x18>
                NOS_WS2812B_Strip_Effect_Walking_Pixels_Handler(strip,&strip->effects[i]);
 8002688:	212c      	movs	r1, #44	@ 0x2c
 800268a:	fb04 f101 	mul.w	r1, r4, r1
 800268e:	3110      	adds	r1, #16
 8002690:	4429      	add	r1, r5
 8002692:	4628      	mov	r0, r5
 8002694:	f7ff ff7c 	bl	8002590 <NOS_WS2812B_Strip_Effect_Walking_Pixels_Handler>
                break;
 8002698:	e7ca      	b.n	8002630 <NOS_WS2812B_Strip_Effects_Handler+0x18>
                NOS_WS2812B_Strip_Effect_Steady_Color_Handler(strip,&strip->effects[i]);
 800269a:	212c      	movs	r1, #44	@ 0x2c
 800269c:	fb04 f101 	mul.w	r1, r4, r1
 80026a0:	3110      	adds	r1, #16
 80026a2:	4429      	add	r1, r5
 80026a4:	4628      	mov	r0, r5
 80026a6:	f7ff ffa8 	bl	80025fa <NOS_WS2812B_Strip_Effect_Steady_Color_Handler>
                break;
 80026aa:	e7c1      	b.n	8002630 <NOS_WS2812B_Strip_Effects_Handler+0x18>
}
 80026ac:	bd38      	pop	{r3, r4, r5, pc}
 80026ae:	bf00      	nop

080026b0 <visInit>:




void visInit()
{
 80026b0:	b508      	push	{r3, lr}
		// Set output channel/pin, GPIO_PIN_0 = 0, for GPIO_PIN_5 = 5 - this has to correspond to WS2812B_PINS
		ws2812b.item[0].channel = 4;
 80026b2:	4b0e      	ldr	r3, [pc, #56]	@ (80026ec <visInit+0x3c>)
 80026b4:	2204      	movs	r2, #4
 80026b6:	731a      	strb	r2, [r3, #12]
		ws2812b.item[0].frameBufferPointer = frameBufferA;
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <visInit+0x40>)
 80026ba:	601a      	str	r2, [r3, #0]
	    ws2812b.item[0].frameBufferSize = sizeof(frameBufferA);
 80026bc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80026c0:	605a      	str	r2, [r3, #4]
		ws2812b.item[1].channel = 5;
 80026c2:	2105      	movs	r1, #5
 80026c4:	7719      	strb	r1, [r3, #28]
		ws2812b.item[1].frameBufferPointer = frameBufferB;
 80026c6:	490b      	ldr	r1, [pc, #44]	@ (80026f4 <visInit+0x44>)
 80026c8:	6119      	str	r1, [r3, #16]
	    ws2812b.item[1].frameBufferSize = sizeof(frameBufferB);
 80026ca:	615a      	str	r2, [r3, #20]
		ws2812b.item[2].channel = 6;
 80026cc:	2106      	movs	r1, #6
 80026ce:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
		ws2812b.item[2].frameBufferPointer = frameBufferC;
 80026d2:	4909      	ldr	r1, [pc, #36]	@ (80026f8 <visInit+0x48>)
 80026d4:	6219      	str	r1, [r3, #32]
	    ws2812b.item[2].frameBufferSize = sizeof(frameBufferC);
 80026d6:	625a      	str	r2, [r3, #36]	@ 0x24
		ws2812b.item[3].channel = 7;
 80026d8:	2107      	movs	r1, #7
 80026da:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
		ws2812b.item[3].frameBufferPointer = frameBufferD;
 80026de:	4907      	ldr	r1, [pc, #28]	@ (80026fc <visInit+0x4c>)
 80026e0:	6319      	str	r1, [r3, #48]	@ 0x30
	    ws2812b.item[3].frameBufferSize = sizeof(frameBufferD);
 80026e2:	635a      	str	r2, [r3, #52]	@ 0x34
		ws2812b_init();
 80026e4:	f000 fafc 	bl	8002ce0 <ws2812b_init>
}
 80026e8:	bd08      	pop	{r3, pc}
 80026ea:	bf00      	nop
 80026ec:	20001a5c 	.word	0x20001a5c
 80026f0:	2000129c 	.word	0x2000129c
 80026f4:	20000c9c 	.word	0x20000c9c
 80026f8:	2000069c 	.word	0x2000069c
 80026fc:	2000009c 	.word	0x2000009c

08002700 <visHandle>:


void visHandle()
{
 8002700:	b508      	push	{r3, lr}

	if(ws2812b.transferComplete)
 8002702:	4b06      	ldr	r3, [pc, #24]	@ (800271c <visHandle+0x1c>)
 8002704:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002708:	b903      	cbnz	r3, 800270c <visHandle+0xc>

		// Signal that buffer is changed and transfer new data
		ws2812b.startTransfer = 1;
		ws2812b_handle();
	}
}
 800270a:	bd08      	pop	{r3, pc}
		ws2812b.startTransfer = 1;
 800270c:	4b03      	ldr	r3, [pc, #12]	@ (800271c <visHandle+0x1c>)
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		ws2812b_handle();
 8002714:	f000 faf2 	bl	8002cfc <ws2812b_handle>
}
 8002718:	e7f7      	b.n	800270a <visHandle+0xa>
 800271a:	bf00      	nop
 800271c:	20001a5c 	.word	0x20001a5c

08002720 <ws2812b_set_pixel>:
}



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 8002720:	b470      	push	{r4, r5, r6}

	// Apply gamma
	red = gammaTable[red];
 8002722:	4e2e      	ldr	r6, [pc, #184]	@ (80027dc <ws2812b_set_pixel+0xbc>)
 8002724:	5cb4      	ldrb	r4, [r6, r2]
	green = gammaTable[green];
 8002726:	5cf5      	ldrb	r5, [r6, r3]
	blue = gammaTable[blue];
 8002728:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800272c:	5cf2      	ldrb	r2, [r6, r3]


	uint32_t calcCol = (column*24);
 800272e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	uint32_t invRed = ~red;
 8002732:	43e4      	mvns	r4, r4
	uint32_t invGreen = ~green;
 8002734:	43ed      	mvns	r5, r5
	uint32_t invBlue = ~blue;
 8002736:	43d2      	mvns	r2, r2
	ws2812bDmaBitBuffer[(calcCol+8+7)] |= (((((invRed)<<7) & 0x80)>>7)<<row);
	ws2812bDmaBitBuffer[(calcCol+16+7)] |= (((((invBlue)<<7) & 0x80)>>7)<<row);
#elif defined(SETPIX_4)

	// Bitband optimizations with pure increments, 5us interrupts
	uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[(calcCol)], row);
 8002738:	4929      	ldr	r1, [pc, #164]	@ (80027e0 <ws2812b_set_pixel+0xc0>)
 800273a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800273e:	f101 4161 	add.w	r1, r1, #3774873600	@ 0xe1000000
 8002742:	f501 1180 	add.w	r1, r1, #1048576	@ 0x100000
 8002746:	014e      	lsls	r6, r1, #5
 8002748:	0083      	lsls	r3, r0, #2
 800274a:	eb03 1341 	add.w	r3, r3, r1, lsl #5

	*bitBand =  (invGreen >> 7);
 800274e:	09e9      	lsrs	r1, r5, #7
 8002750:	f846 1020 	str.w	r1, [r6, r0, lsl #2]
	bitBand+=16;

	*bitBand = (invGreen >> 6);
 8002754:	09a9      	lsrs	r1, r5, #6
 8002756:	6419      	str	r1, [r3, #64]	@ 0x40
	bitBand+=16;

	*bitBand = (invGreen >> 5);
 8002758:	0969      	lsrs	r1, r5, #5
 800275a:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
	bitBand+=16;

	*bitBand = (invGreen >> 4);
 800275e:	0929      	lsrs	r1, r5, #4
 8002760:	f8c3 10c0 	str.w	r1, [r3, #192]	@ 0xc0
	bitBand+=16;

	*bitBand = (invGreen >> 3);
 8002764:	08e9      	lsrs	r1, r5, #3
 8002766:	f8c3 1100 	str.w	r1, [r3, #256]	@ 0x100
	bitBand+=16;

	*bitBand = (invGreen >> 2);
 800276a:	08a9      	lsrs	r1, r5, #2
 800276c:	f8c3 1140 	str.w	r1, [r3, #320]	@ 0x140
	bitBand+=16;

	*bitBand = (invGreen >> 1);
 8002770:	0869      	lsrs	r1, r5, #1
 8002772:	f8c3 1180 	str.w	r1, [r3, #384]	@ 0x180
	bitBand+=16;

	*bitBand = (invGreen >> 0);
 8002776:	f8c3 51c0 	str.w	r5, [r3, #448]	@ 0x1c0
	bitBand+=16;

	// RED
	*bitBand =  (invRed >> 7);
 800277a:	09e1      	lsrs	r1, r4, #7
 800277c:	f8c3 1200 	str.w	r1, [r3, #512]	@ 0x200
	bitBand+=16;

	*bitBand = (invRed >> 6);
 8002780:	09a1      	lsrs	r1, r4, #6
 8002782:	f8c3 1240 	str.w	r1, [r3, #576]	@ 0x240
	bitBand+=16;

	*bitBand = (invRed >> 5);
 8002786:	0961      	lsrs	r1, r4, #5
 8002788:	f8c3 1280 	str.w	r1, [r3, #640]	@ 0x280
	bitBand+=16;

	*bitBand = (invRed >> 4);
 800278c:	0921      	lsrs	r1, r4, #4
 800278e:	f8c3 12c0 	str.w	r1, [r3, #704]	@ 0x2c0
	bitBand+=16;

	*bitBand = (invRed >> 3);
 8002792:	08e1      	lsrs	r1, r4, #3
 8002794:	f8c3 1300 	str.w	r1, [r3, #768]	@ 0x300
	bitBand+=16;

	*bitBand = (invRed >> 2);
 8002798:	08a1      	lsrs	r1, r4, #2
 800279a:	f8c3 1340 	str.w	r1, [r3, #832]	@ 0x340
	bitBand+=16;

	*bitBand = (invRed >> 1);
 800279e:	0861      	lsrs	r1, r4, #1
 80027a0:	f8c3 1380 	str.w	r1, [r3, #896]	@ 0x380
	bitBand+=16;

	*bitBand = (invRed >> 0);
 80027a4:	f8c3 43c0 	str.w	r4, [r3, #960]	@ 0x3c0
	bitBand+=16;

	// BLUE
	*bitBand =  (invBlue >> 7);
 80027a8:	09d1      	lsrs	r1, r2, #7
 80027aa:	f8c3 1400 	str.w	r1, [r3, #1024]	@ 0x400
	bitBand+=16;

	*bitBand = (invBlue >> 6);
 80027ae:	0991      	lsrs	r1, r2, #6
 80027b0:	f8c3 1440 	str.w	r1, [r3, #1088]	@ 0x440
	bitBand+=16;

	*bitBand = (invBlue >> 5);
 80027b4:	0951      	lsrs	r1, r2, #5
 80027b6:	f8c3 1480 	str.w	r1, [r3, #1152]	@ 0x480
	bitBand+=16;

	*bitBand = (invBlue >> 4);
 80027ba:	0911      	lsrs	r1, r2, #4
 80027bc:	f8c3 14c0 	str.w	r1, [r3, #1216]	@ 0x4c0
	bitBand+=16;

	*bitBand = (invBlue >> 3);
 80027c0:	08d1      	lsrs	r1, r2, #3
 80027c2:	f8c3 1500 	str.w	r1, [r3, #1280]	@ 0x500
	bitBand+=16;

	*bitBand = (invBlue >> 2);
 80027c6:	0891      	lsrs	r1, r2, #2
 80027c8:	f8c3 1540 	str.w	r1, [r3, #1344]	@ 0x540
	bitBand+=16;

	*bitBand = (invBlue >> 1);
 80027cc:	0851      	lsrs	r1, r2, #1
 80027ce:	f8c3 1580 	str.w	r1, [r3, #1408]	@ 0x580
	bitBand+=16;

	*bitBand = (invBlue >> 0);
 80027d2:	f8c3 25c0 	str.w	r2, [r3, #1472]	@ 0x5c0
    ws2812bDmaBitBuffer[5] = cur5;
    ws2812bDmaBitBuffer[6] = cur6;
    ws2812bDmaBitBuffer[7] = cur7;

#endif
}
 80027d6:	bc70      	pop	{r4, r5, r6}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	08008b98 	.word	0x08008b98
 80027e0:	200019fc 	.word	0x200019fc

080027e4 <loadNextFramebufferData>:
{
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	b082      	sub	sp, #8
	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80027e8:	6805      	ldr	r5, [r0, #0]
 80027ea:	6884      	ldr	r4, [r0, #8]
 80027ec:	1c63      	adds	r3, r4, #1
 80027ee:	6083      	str	r3, [r0, #8]
 80027f0:	5d2a      	ldrb	r2, [r5, r4]
	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80027f2:	1ca6      	adds	r6, r4, #2
 80027f4:	6086      	str	r6, [r0, #8]
 80027f6:	5ceb      	ldrb	r3, [r5, r3]
	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80027f8:	3403      	adds	r4, #3
 80027fa:	6084      	str	r4, [r0, #8]
 80027fc:	5dad      	ldrb	r5, [r5, r6]
	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 80027fe:	6846      	ldr	r6, [r0, #4]
 8002800:	42b4      	cmp	r4, r6
 8002802:	d006      	beq.n	8002812 <loadNextFramebufferData+0x2e>
	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 8002804:	9500      	str	r5, [sp, #0]
 8002806:	b289      	uxth	r1, r1
 8002808:	7b00      	ldrb	r0, [r0, #12]
 800280a:	f7ff ff89 	bl	8002720 <ws2812b_set_pixel>
}
 800280e:	b002      	add	sp, #8
 8002810:	bd70      	pop	{r4, r5, r6, pc}
		bItem->frameBufferCounter = 0;
 8002812:	2400      	movs	r4, #0
 8002814:	6084      	str	r4, [r0, #8]
 8002816:	e7f5      	b.n	8002804 <loadNextFramebufferData+0x20>

08002818 <DMA_TransferCompleteHandler>:
	ws2812b.repeatCounter++;
 8002818:	4a20      	ldr	r2, [pc, #128]	@ (800289c <DMA_TransferCompleteHandler+0x84>)
 800281a:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 800281c:	3301      	adds	r3, #1
 800281e:	6493      	str	r3, [r2, #72]	@ 0x48
	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS / 2)
 8002820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002824:	d002      	beq.n	800282c <DMA_TransferCompleteHandler+0x14>
{
 8002826:	b510      	push	{r4, lr}
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002828:	2400      	movs	r4, #0
 800282a:	e034      	b.n	8002896 <DMA_TransferCompleteHandler+0x7e>
		ws2812b.repeatCounter = 0;
 800282c:	4613      	mov	r3, r2
 800282e:	2200      	movs	r2, #0
 8002830:	649a      	str	r2, [r3, #72]	@ 0x48
		__HAL_TIM_ENABLE_IT(&Tim2Handle, TIM_IT_UPDATE);
 8002832:	4a1b      	ldr	r2, [pc, #108]	@ (80028a0 <DMA_TransferCompleteHandler+0x88>)
 8002834:	6811      	ldr	r1, [r2, #0]
 8002836:	68cb      	ldr	r3, [r1, #12]
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	60cb      	str	r3, [r1, #12]
		__HAL_DMA_DISABLE(&dmaUpdate);
 800283e:	4b19      	ldr	r3, [pc, #100]	@ (80028a4 <DMA_TransferCompleteHandler+0x8c>)
 8002840:	6819      	ldr	r1, [r3, #0]
 8002842:	680b      	ldr	r3, [r1, #0]
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	600b      	str	r3, [r1, #0]
		__HAL_DMA_DISABLE(&dmaCC1);
 800284a:	4b17      	ldr	r3, [pc, #92]	@ (80028a8 <DMA_TransferCompleteHandler+0x90>)
 800284c:	6819      	ldr	r1, [r3, #0]
 800284e:	680b      	ldr	r3, [r1, #0]
 8002850:	f023 0301 	bic.w	r3, r3, #1
 8002854:	600b      	str	r3, [r1, #0]
		__HAL_DMA_DISABLE(&dmaCC2);
 8002856:	4b15      	ldr	r3, [pc, #84]	@ (80028ac <DMA_TransferCompleteHandler+0x94>)
 8002858:	6819      	ldr	r1, [r3, #0]
 800285a:	680b      	ldr	r3, [r1, #0]
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	600b      	str	r3, [r1, #0]
		__HAL_TIM_DISABLE_DMA(&Tim2Handle, TIM_DMA_UPDATE);
 8002862:	6813      	ldr	r3, [r2, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800286a:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&Tim2Handle, TIM_DMA_CC1);
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002872:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&Tim2Handle, TIM_DMA_CC2);
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800287a:	60da      	str	r2, [r3, #12]
		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 800287c:	4b0c      	ldr	r3, [pc, #48]	@ (80028b0 <DMA_TransferCompleteHandler+0x98>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002884:	619a      	str	r2, [r3, #24]
 8002886:	4770      	bx	lr
			loadNextFramebufferData(&ws2812b.item[i], 1);
 8002888:	2101      	movs	r1, #1
 800288a:	4804      	ldr	r0, [pc, #16]	@ (800289c <DMA_TransferCompleteHandler+0x84>)
 800288c:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8002890:	f7ff ffa8 	bl	80027e4 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8002894:	3401      	adds	r4, #1
 8002896:	2c03      	cmp	r4, #3
 8002898:	d9f6      	bls.n	8002888 <DMA_TransferCompleteHandler+0x70>
}
 800289a:	bd10      	pop	{r4, pc}
 800289c:	20001a5c 	.word	0x20001a5c
 80028a0:	200019b0 	.word	0x200019b0
 80028a4:	2000192c 	.word	0x2000192c
 80028a8:	200018e4 	.word	0x200018e4
 80028ac:	2000189c 	.word	0x2000189c
 80028b0:	20000000 	.word	0x20000000

080028b4 <WS2812_sendbuf>:
{
 80028b4:	b538      	push	{r3, r4, r5, lr}
	ws2812b.transferComplete = 0;
 80028b6:	2500      	movs	r5, #0
 80028b8:	4b37      	ldr	r3, [pc, #220]	@ (8002998 <WS2812_sendbuf+0xe4>)
 80028ba:	f883 5040 	strb.w	r5, [r3, #64]	@ 0x40
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80028be:	e00c      	b.n	80028da <WS2812_sendbuf+0x26>
		ws2812b.item[i].frameBufferCounter = 0;
 80028c0:	4c35      	ldr	r4, [pc, #212]	@ (8002998 <WS2812_sendbuf+0xe4>)
 80028c2:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 80028c6:	2100      	movs	r1, #0
 80028c8:	60a1      	str	r1, [r4, #8]
		loadNextFramebufferData(&ws2812b.item[i], 0); // ROW 0
 80028ca:	4620      	mov	r0, r4
 80028cc:	f7ff ff8a 	bl	80027e4 <loadNextFramebufferData>
		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 80028d0:	2101      	movs	r1, #1
 80028d2:	4620      	mov	r0, r4
 80028d4:	f7ff ff86 	bl	80027e4 <loadNextFramebufferData>
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80028d8:	3501      	adds	r5, #1
 80028da:	2d03      	cmp	r5, #3
 80028dc:	d9f0      	bls.n	80028c0 <WS2812_sendbuf+0xc>
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TC2 | DMA_FLAG_HT2 | DMA_FLAG_TE2);
 80028de:	4b2f      	ldr	r3, [pc, #188]	@ (800299c <WS2812_sendbuf+0xe8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2f      	ldr	r2, [pc, #188]	@ (80029a0 <WS2812_sendbuf+0xec>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d948      	bls.n	800297a <WS2812_sendbuf+0xc6>
 80028e8:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 80028ec:	21e0      	movs	r1, #224	@ 0xe0
 80028ee:	6051      	str	r1, [r2, #4]
	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TC5 | DMA_FLAG_HT5 | DMA_FLAG_TE5);
 80028f0:	4a2c      	ldr	r2, [pc, #176]	@ (80029a4 <WS2812_sendbuf+0xf0>)
 80028f2:	6810      	ldr	r0, [r2, #0]
 80028f4:	4a2a      	ldr	r2, [pc, #168]	@ (80029a0 <WS2812_sendbuf+0xec>)
 80028f6:	4290      	cmp	r0, r2
 80028f8:	d943      	bls.n	8002982 <WS2812_sendbuf+0xce>
 80028fa:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 80028fe:	f44f 2160 	mov.w	r1, #917504	@ 0xe0000
 8002902:	6051      	str	r1, [r2, #4]
	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TC7 | DMA_FLAG_HT7 | DMA_FLAG_TE7);
 8002904:	4a28      	ldr	r2, [pc, #160]	@ (80029a8 <WS2812_sendbuf+0xf4>)
 8002906:	6811      	ldr	r1, [r2, #0]
 8002908:	4a25      	ldr	r2, [pc, #148]	@ (80029a0 <WS2812_sendbuf+0xec>)
 800290a:	4291      	cmp	r1, r2
 800290c:	d93e      	bls.n	800298c <WS2812_sendbuf+0xd8>
 800290e:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8002912:	f04f 6460 	mov.w	r4, #234881024	@ 0xe000000
 8002916:	6054      	str	r4, [r2, #4]
	dmaUpdate.Instance->CNDTR = BUFFER_SIZE;
 8002918:	2230      	movs	r2, #48	@ 0x30
 800291a:	605a      	str	r2, [r3, #4]
	dmaCC1.Instance->CNDTR = BUFFER_SIZE;
 800291c:	6042      	str	r2, [r0, #4]
	dmaCC2.Instance->CNDTR = BUFFER_SIZE;
 800291e:	604a      	str	r2, [r1, #4]
	__HAL_TIM_CLEAR_FLAG(&Tim2Handle, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | TIM_FLAG_CC4);
 8002920:	4922      	ldr	r1, [pc, #136]	@ (80029ac <WS2812_sendbuf+0xf8>)
 8002922:	680a      	ldr	r2, [r1, #0]
 8002924:	f06f 001f 	mvn.w	r0, #31
 8002928:	6110      	str	r0, [r2, #16]
	__HAL_DMA_ENABLE(&dmaUpdate);
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	f042 0201 	orr.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC1);
 8002932:	4b1c      	ldr	r3, [pc, #112]	@ (80029a4 <WS2812_sendbuf+0xf0>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	6813      	ldr	r3, [r2, #0]
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6013      	str	r3, [r2, #0]
	__HAL_DMA_ENABLE(&dmaCC2);
 800293e:	4b1a      	ldr	r3, [pc, #104]	@ (80029a8 <WS2812_sendbuf+0xf4>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	6813      	ldr	r3, [r2, #0]
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6013      	str	r3, [r2, #0]
	__HAL_TIM_ENABLE_DMA(&Tim2Handle, TIM_DMA_UPDATE);
 800294a:	680b      	ldr	r3, [r1, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002952:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&Tim2Handle, TIM_DMA_CC1);
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&Tim2Handle, TIM_DMA_CC2);
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002962:	60da      	str	r2, [r3, #12]
	TIM2->CNT = tim_period-1;
 8002964:	4a12      	ldr	r2, [pc, #72]	@ (80029b0 <WS2812_sendbuf+0xfc>)
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	3a01      	subs	r2, #1
 800296a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800296e:	624a      	str	r2, [r1, #36]	@ 0x24
	__HAL_TIM_ENABLE(&Tim2Handle);
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]
}
 8002978:	bd38      	pop	{r3, r4, r5, pc}
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TC2 | DMA_FLAG_HT2 | DMA_FLAG_TE2);
 800297a:	4a0e      	ldr	r2, [pc, #56]	@ (80029b4 <WS2812_sendbuf+0x100>)
 800297c:	21e0      	movs	r1, #224	@ 0xe0
 800297e:	6051      	str	r1, [r2, #4]
 8002980:	e7b6      	b.n	80028f0 <WS2812_sendbuf+0x3c>
	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TC5 | DMA_FLAG_HT5 | DMA_FLAG_TE5);
 8002982:	4a0c      	ldr	r2, [pc, #48]	@ (80029b4 <WS2812_sendbuf+0x100>)
 8002984:	f44f 2160 	mov.w	r1, #917504	@ 0xe0000
 8002988:	6051      	str	r1, [r2, #4]
 800298a:	e7bb      	b.n	8002904 <WS2812_sendbuf+0x50>
	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TC7 | DMA_FLAG_HT7 | DMA_FLAG_TE7);
 800298c:	4a09      	ldr	r2, [pc, #36]	@ (80029b4 <WS2812_sendbuf+0x100>)
 800298e:	f04f 6460 	mov.w	r4, #234881024	@ 0xe000000
 8002992:	6054      	str	r4, [r2, #4]
 8002994:	e7c0      	b.n	8002918 <WS2812_sendbuf+0x64>
 8002996:	bf00      	nop
 8002998:	20001a5c 	.word	0x20001a5c
 800299c:	2000192c 	.word	0x2000192c
 80029a0:	40020080 	.word	0x40020080
 80029a4:	200018e4 	.word	0x200018e4
 80029a8:	2000189c 	.word	0x2000189c
 80029ac:	200019b0 	.word	0x200019b0
 80029b0:	20001974 	.word	0x20001974
 80029b4:	40020000 	.word	0x40020000

080029b8 <DMA_TransferHalfHandler>:
{
 80029b8:	b510      	push	{r4, lr}
 80029ba:	b082      	sub	sp, #8
	if(ws2812b.repeatCounter != (WS2812B_NUMBER_OF_LEDS / 2 - 1))
 80029bc:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <DMA_TransferHalfHandler+0x3c>)
 80029be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80029c0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d00c      	beq.n	80029e2 <DMA_TransferHalfHandler+0x2a>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80029c8:	2400      	movs	r4, #0
 80029ca:	e006      	b.n	80029da <DMA_TransferHalfHandler+0x22>
			loadNextFramebufferData(&ws2812b.item[i], 0);
 80029cc:	2100      	movs	r1, #0
 80029ce:	4809      	ldr	r0, [pc, #36]	@ (80029f4 <DMA_TransferHalfHandler+0x3c>)
 80029d0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80029d4:	f7ff ff06 	bl	80027e4 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80029d8:	3401      	adds	r4, #1
 80029da:	2c03      	cmp	r4, #3
 80029dc:	d9f6      	bls.n	80029cc <DMA_TransferHalfHandler+0x14>
}
 80029de:	b002      	add	sp, #8
 80029e0:	bd10      	pop	{r4, pc}
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 80029e2:	2000      	movs	r0, #0
 80029e4:	9000      	str	r0, [sp, #0]
 80029e6:	4603      	mov	r3, r0
 80029e8:	4602      	mov	r2, r0
 80029ea:	4601      	mov	r1, r0
 80029ec:	f7ff fe98 	bl	8002720 <ws2812b_set_pixel>
}
 80029f0:	e7f5      	b.n	80029de <DMA_TransferHalfHandler+0x26>
 80029f2:	bf00      	nop
 80029f4:	20001a5c 	.word	0x20001a5c

080029f8 <ws2812b_gpio_init>:
{
 80029f8:	b500      	push	{lr}
 80029fa:	b087      	sub	sp, #28
	WS2812B_GPIO_CLK_ENABLE();
 80029fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a30 <ws2812b_gpio_init+0x38>)
 80029fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStruct.Pin       = WS2812B_PINS;
 8002a10:	23f0      	movs	r3, #240	@ 0xf0
 8002a12:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 8002a14:	2301      	movs	r3, #1
 8002a16:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8002a1c:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 8002a1e:	a901      	add	r1, sp, #4
 8002a20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a24:	f001 f91a 	bl	8003c5c <HAL_GPIO_Init>
}
 8002a28:	b007      	add	sp, #28
 8002a2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000

08002a34 <DMA_init>:
{
 8002a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a38:	b083      	sub	sp, #12
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b30 <DMA_init+0xfc>)
 8002a3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	649a      	str	r2, [r3, #72]	@ 0x48
 8002a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	9b01      	ldr	r3, [sp, #4]
    dmaUpdate.Init.Request = DMA_REQUEST_4;
 8002a4e:	4c39      	ldr	r4, [pc, #228]	@ (8002b34 <DMA_init+0x100>)
 8002a50:	f04f 0b04 	mov.w	fp, #4
 8002a54:	f8c4 b004 	str.w	fp, [r4, #4]
	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a58:	f04f 0a10 	mov.w	sl, #16
 8002a5c:	f8c4 a008 	str.w	sl, [r4, #8]
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a60:	2500      	movs	r5, #0
 8002a62:	60e5      	str	r5, [r4, #12]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 8002a64:	6125      	str	r5, [r4, #16]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a66:	f44f 7900 	mov.w	r9, #512	@ 0x200
 8002a6a:	f8c4 9014 	str.w	r9, [r4, #20]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a72:	61a3      	str	r3, [r4, #24]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 8002a74:	f04f 0820 	mov.w	r8, #32
 8002a78:	f8c4 801c 	str.w	r8, [r4, #28]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a7c:	f44f 5740 	mov.w	r7, #12288	@ 0x3000
 8002a80:	6227      	str	r7, [r4, #32]
	dmaUpdate.Instance = DMA1_Channel2;
 8002a82:	4b2d      	ldr	r3, [pc, #180]	@ (8002b38 <DMA_init+0x104>)
 8002a84:	6023      	str	r3, [r4, #0]
	HAL_DMA_Init(&dmaUpdate);
 8002a86:	4620      	mov	r0, r4
 8002a88:	f000 ff50 	bl	800392c <HAL_DMA_Init>
	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 8002a8c:	2330      	movs	r3, #48	@ 0x30
 8002a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8002b3c <DMA_init+0x108>)
 8002a90:	492b      	ldr	r1, [pc, #172]	@ (8002b40 <DMA_init+0x10c>)
 8002a92:	4620      	mov	r0, r4
 8002a94:	f000 ffce 	bl	8003a34 <HAL_DMA_Start>
	__HAL_LINKDMA(&Tim2Handle,hdma[TIM_DMA_ID_UPDATE],dmaUpdate);
 8002a98:	4e2a      	ldr	r6, [pc, #168]	@ (8002b44 <DMA_init+0x110>)
 8002a9a:	6234      	str	r4, [r6, #32]
 8002a9c:	62a6      	str	r6, [r4, #40]	@ 0x28
	dmaCC1.Init.Request = DMA_REQUEST_4;
 8002a9e:	4c2a      	ldr	r4, [pc, #168]	@ (8002b48 <DMA_init+0x114>)
 8002aa0:	f8c4 b004 	str.w	fp, [r4, #4]
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aa4:	f8c4 a008 	str.w	sl, [r4, #8]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa8:	60e5      	str	r5, [r4, #12]
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 8002aaa:	2380      	movs	r3, #128	@ 0x80
 8002aac:	6123      	str	r3, [r4, #16]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002aae:	f8c4 9014 	str.w	r9, [r4, #20]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ab6:	61a3      	str	r3, [r4, #24]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 8002ab8:	f8c4 801c 	str.w	r8, [r4, #28]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002abc:	6227      	str	r7, [r4, #32]
	dmaCC1.Instance = DMA1_Channel5;
 8002abe:	4b23      	ldr	r3, [pc, #140]	@ (8002b4c <DMA_init+0x118>)
 8002ac0:	6023      	str	r3, [r4, #0]
	HAL_DMA_Init(&dmaCC1);
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f000 ff32 	bl	800392c <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&WS2812B_PORT->BRR, BUFFER_SIZE);
 8002ac8:	2330      	movs	r3, #48	@ 0x30
 8002aca:	4a21      	ldr	r2, [pc, #132]	@ (8002b50 <DMA_init+0x11c>)
 8002acc:	4921      	ldr	r1, [pc, #132]	@ (8002b54 <DMA_init+0x120>)
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f000 ffb0 	bl	8003a34 <HAL_DMA_Start>
	__HAL_LINKDMA(&Tim2Handle,hdma[TIM_DMA_ID_CC1],dmaCC1);
 8002ad4:	6274      	str	r4, [r6, #36]	@ 0x24
 8002ad6:	62a6      	str	r6, [r4, #40]	@ 0x28
	dmaCC2.Init.Request = DMA_REQUEST_4;
 8002ad8:	4c1f      	ldr	r4, [pc, #124]	@ (8002b58 <DMA_init+0x124>)
 8002ada:	f8c4 b004 	str.w	fp, [r4, #4]
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ade:	f8c4 a008 	str.w	sl, [r4, #8]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ae2:	60e5      	str	r5, [r4, #12]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 8002ae4:	6125      	str	r5, [r4, #16]
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ae6:	f8c4 9014 	str.w	r9, [r4, #20]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002aea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002aee:	61a3      	str	r3, [r4, #24]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 8002af0:	f8c4 801c 	str.w	r8, [r4, #28]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002af4:	6227      	str	r7, [r4, #32]
	dmaCC2.Instance = DMA1_Channel7;
 8002af6:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <DMA_init+0x128>)
 8002af8:	6023      	str	r3, [r4, #0]
	HAL_DMA_Init(&dmaCC2);
 8002afa:	4620      	mov	r0, r4
 8002afc:	f000 ff16 	bl	800392c <HAL_DMA_Init>
	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 8002b00:	4b17      	ldr	r3, [pc, #92]	@ (8002b60 <DMA_init+0x12c>)
 8002b02:	62e3      	str	r3, [r4, #44]	@ 0x2c
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 8002b04:	4b17      	ldr	r3, [pc, #92]	@ (8002b64 <DMA_init+0x130>)
 8002b06:	6323      	str	r3, [r4, #48]	@ 0x30
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002b08:	462a      	mov	r2, r5
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	2011      	movs	r0, #17
 8002b0e:	f000 fecb 	bl	80038a8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002b12:	2011      	movs	r0, #17
 8002b14:	f000 fed8 	bl	80038c8 <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 8002b18:	2330      	movs	r3, #48	@ 0x30
 8002b1a:	4a08      	ldr	r2, [pc, #32]	@ (8002b3c <DMA_init+0x108>)
 8002b1c:	4912      	ldr	r1, [pc, #72]	@ (8002b68 <DMA_init+0x134>)
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f000 ffb1 	bl	8003a86 <HAL_DMA_Start_IT>
	__HAL_LINKDMA(&Tim2Handle,hdma[TIM_DMA_ID_CC2],dmaCC2);
 8002b24:	62b4      	str	r4, [r6, #40]	@ 0x28
 8002b26:	62a6      	str	r6, [r4, #40]	@ 0x28
}
 8002b28:	b003      	add	sp, #12
 8002b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	2000192c 	.word	0x2000192c
 8002b38:	4002001c 	.word	0x4002001c
 8002b3c:	48000018 	.word	0x48000018
 8002b40:	20000004 	.word	0x20000004
 8002b44:	200019b0 	.word	0x200019b0
 8002b48:	200018e4 	.word	0x200018e4
 8002b4c:	40020058 	.word	0x40020058
 8002b50:	48000028 	.word	0x48000028
 8002b54:	200019fc 	.word	0x200019fc
 8002b58:	2000189c 	.word	0x2000189c
 8002b5c:	40020080 	.word	0x40020080
 8002b60:	08002819 	.word	0x08002819
 8002b64:	080029b9 	.word	0x080029b9
 8002b68:	20000000 	.word	0x20000000

08002b6c <TIM2_init>:
{
 8002b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b70:	b082      	sub	sp, #8
	__HAL_RCC_TIM2_CLK_ENABLE();
 8002b72:	4b2b      	ldr	r3, [pc, #172]	@ (8002c20 <TIM2_init+0xb4>)
 8002b74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002b76:	f042 0201 	orr.w	r2, r2, #1
 8002b7a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	9b01      	ldr	r3, [sp, #4]
	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 8002b86:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <TIM2_init+0xb8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	4a26      	ldr	r2, [pc, #152]	@ (8002c28 <TIM2_init+0xbc>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	4a25      	ldr	r2, [pc, #148]	@ (8002c2c <TIM2_init+0xc0>)
 8002b96:	6013      	str	r3, [r2, #0]
	uint32_t cc1 = (10 * tim_period) / 36;
 8002b98:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002b9c:	004a      	lsls	r2, r1, #1
 8002b9e:	4f24      	ldr	r7, [pc, #144]	@ (8002c30 <TIM2_init+0xc4>)
 8002ba0:	fba7 1702 	umull	r1, r7, r7, r2
 8002ba4:	08ff      	lsrs	r7, r7, #3
	uint32_t cc2 = (10 * tim_period) / 15;
 8002ba6:	4923      	ldr	r1, [pc, #140]	@ (8002c34 <TIM2_init+0xc8>)
 8002ba8:	fba1 1202 	umull	r1, r2, r1, r2
 8002bac:	08d6      	lsrs	r6, r2, #3
	Tim2Handle.Instance = TIM2;
 8002bae:	4d22      	ldr	r5, [pc, #136]	@ (8002c38 <TIM2_init+0xcc>)
 8002bb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002bb4:	602a      	str	r2, [r5, #0]
	Tim2Handle.Init.Period            = tim_period;
 8002bb6:	60eb      	str	r3, [r5, #12]
	Tim2Handle.Init.RepetitionCounter = 0;
 8002bb8:	2400      	movs	r4, #0
 8002bba:	616c      	str	r4, [r5, #20]
	Tim2Handle.Init.Prescaler         = 0;
 8002bbc:	606c      	str	r4, [r5, #4]
	Tim2Handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8002bbe:	612c      	str	r4, [r5, #16]
	Tim2Handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8002bc0:	60ac      	str	r4, [r5, #8]
	HAL_TIM_PWM_Init(&Tim2Handle);
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	f002 fcfe 	bl	80055c4 <HAL_TIM_PWM_Init>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bc8:	4622      	mov	r2, r4
 8002bca:	4621      	mov	r1, r4
 8002bcc:	201c      	movs	r0, #28
 8002bce:	f000 fe6b 	bl	80038a8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bd2:	201c      	movs	r0, #28
 8002bd4:	f000 fe78 	bl	80038c8 <HAL_NVIC_EnableIRQ>
	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 8002bd8:	4918      	ldr	r1, [pc, #96]	@ (8002c3c <TIM2_init+0xd0>)
 8002bda:	f04f 0860 	mov.w	r8, #96	@ 0x60
 8002bde:	f8c1 8000 	str.w	r8, [r1]
	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8002be2:	608c      	str	r4, [r1, #8]
	tim2OC1.Pulse        = cc1;
 8002be4:	604f      	str	r7, [r1, #4]
	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8002be6:	60cc      	str	r4, [r1, #12]
	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 8002be8:	610c      	str	r4, [r1, #16]
	HAL_TIM_PWM_ConfigChannel(&Tim2Handle, &tim2OC1, TIM_CHANNEL_1);
 8002bea:	4622      	mov	r2, r4
 8002bec:	4628      	mov	r0, r5
 8002bee:	f002 fd90 	bl	8005712 <HAL_TIM_PWM_ConfigChannel>
	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 8002bf2:	4913      	ldr	r1, [pc, #76]	@ (8002c40 <TIM2_init+0xd4>)
 8002bf4:	f8c1 8000 	str.w	r8, [r1]
	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8002bf8:	608c      	str	r4, [r1, #8]
	tim2OC2.Pulse        = cc2;
 8002bfa:	604e      	str	r6, [r1, #4]
	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8002bfc:	60cc      	str	r4, [r1, #12]
	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 8002bfe:	610c      	str	r4, [r1, #16]
	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 8002c00:	614c      	str	r4, [r1, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c02:	618c      	str	r4, [r1, #24]
	HAL_TIM_PWM_ConfigChannel(&Tim2Handle, &tim2OC2, TIM_CHANNEL_2);
 8002c04:	2204      	movs	r2, #4
 8002c06:	4628      	mov	r0, r5
 8002c08:	f002 fd83 	bl	8005712 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_Base_Start(&Tim2Handle);
 8002c0c:	4628      	mov	r0, r5
 8002c0e:	f002 fb75 	bl	80052fc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&Tim2Handle, TIM_CHANNEL_1);
 8002c12:	4621      	mov	r1, r4
 8002c14:	4628      	mov	r0, r5
 8002c16:	f002 fe29 	bl	800586c <HAL_TIM_PWM_Start>
}
 8002c1a:	b002      	add	sp, #8
 8002c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c20:	40021000 	.word	0x40021000
 8002c24:	20000010 	.word	0x20000010
 8002c28:	014f8b59 	.word	0x014f8b59
 8002c2c:	20001974 	.word	0x20001974
 8002c30:	38e38e39 	.word	0x38e38e39
 8002c34:	88888889 	.word	0x88888889
 8002c38:	200019b0 	.word	0x200019b0
 8002c3c:	20001994 	.word	0x20001994
 8002c40:	20001978 	.word	0x20001978

08002c44 <DMA1_Channel2_IRQHandler>:
{
 8002c44:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&dmaUpdate);
 8002c46:	4802      	ldr	r0, [pc, #8]	@ (8002c50 <DMA1_Channel2_IRQHandler+0xc>)
 8002c48:	f000 ffa5 	bl	8003b96 <HAL_DMA_IRQHandler>
}
 8002c4c:	bd08      	pop	{r3, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000192c 	.word	0x2000192c

08002c54 <DMA1_Channel5_IRQHandler>:
{
 8002c54:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&dmaCC1);
 8002c56:	4802      	ldr	r0, [pc, #8]	@ (8002c60 <DMA1_Channel5_IRQHandler+0xc>)
 8002c58:	f000 ff9d 	bl	8003b96 <HAL_DMA_IRQHandler>
}
 8002c5c:	bd08      	pop	{r3, pc}
 8002c5e:	bf00      	nop
 8002c60:	200018e4 	.word	0x200018e4

08002c64 <DMA1_Channel7_IRQHandler>:
{
 8002c64:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&dmaCC2);
 8002c66:	4802      	ldr	r0, [pc, #8]	@ (8002c70 <DMA1_Channel7_IRQHandler+0xc>)
 8002c68:	f000 ff95 	bl	8003b96 <HAL_DMA_IRQHandler>
}
 8002c6c:	bd08      	pop	{r3, pc}
 8002c6e:	bf00      	nop
 8002c70:	2000189c 	.word	0x2000189c

08002c74 <TIM2_IRQHandler>:
{
 8002c74:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&Tim2Handle);
 8002c76:	4802      	ldr	r0, [pc, #8]	@ (8002c80 <TIM2_IRQHandler+0xc>)
 8002c78:	f002 fb76 	bl	8005368 <HAL_TIM_IRQHandler>
}
 8002c7c:	bd08      	pop	{r3, pc}
 8002c7e:	bf00      	nop
 8002c80:	200019b0 	.word	0x200019b0

08002c84 <HAL_TIM_PeriodElapsedCallback>:
	if (ws2812b.timerPeriodCounter < (uint8_t)WS2812_RESET_PERIOD)
 8002c84:	4b14      	ldr	r3, [pc, #80]	@ (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c88:	2b0b      	cmp	r3, #11
 8002c8a:	d803      	bhi.n	8002c94 <HAL_TIM_PeriodElapsedCallback+0x10>
		ws2812b.timerPeriodCounter++;
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	4a12      	ldr	r2, [pc, #72]	@ (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c92:	4770      	bx	lr
		ws2812b.timerPeriodCounter = 0;
 8002c94:	4b10      	ldr	r3, [pc, #64]	@ (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	645a      	str	r2, [r3, #68]	@ 0x44
		__HAL_TIM_DISABLE(&Tim2Handle);
 8002c9a:	4b10      	ldr	r3, [pc, #64]	@ (8002cdc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6a19      	ldr	r1, [r3, #32]
 8002ca0:	f241 1211 	movw	r2, #4369	@ 0x1111
 8002ca4:	4211      	tst	r1, r2
 8002ca6:	d108      	bne.n	8002cba <HAL_TIM_PeriodElapsedCallback+0x36>
 8002ca8:	6a19      	ldr	r1, [r3, #32]
 8002caa:	f240 4244 	movw	r2, #1092	@ 0x444
 8002cae:	4211      	tst	r1, r2
 8002cb0:	d103      	bne.n	8002cba <HAL_TIM_PeriodElapsedCallback+0x36>
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	f022 0201 	bic.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
		TIM2->CR1 = 0; // disable timer
 8002cba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
		__HAL_TIM_DISABLE_IT(&Tim2Handle, TIM_IT_UPDATE);
 8002cc2:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68d3      	ldr	r3, [r2, #12]
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	60d3      	str	r3, [r2, #12]
		ws2812b.transferComplete = 1;
 8002cce:	4b02      	ldr	r3, [pc, #8]	@ (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002cd6:	4770      	bx	lr
 8002cd8:	20001a5c 	.word	0x20001a5c
 8002cdc:	200019b0 	.word	0x200019b0

08002ce0 <ws2812b_init>:


void ws2812b_init()
{
 8002ce0:	b508      	push	{r3, lr}

	ws2812b_gpio_init();
 8002ce2:	f7ff fe89 	bl	80029f8 <ws2812b_gpio_init>
	//void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue);
	DMA_init();
 8002ce6:	f7ff fea5 	bl	8002a34 <DMA_init>
	TIM2_init();
 8002cea:	f7ff ff3f 	bl	8002b6c <TIM2_init>
	// Need to start the first transfer
	ws2812b.transferComplete = 1;
 8002cee:	4b02      	ldr	r3, [pc, #8]	@ (8002cf8 <ws2812b_init+0x18>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002cf6:	bd08      	pop	{r3, pc}
 8002cf8:	20001a5c 	.word	0x20001a5c

08002cfc <ws2812b_handle>:


void ws2812b_handle()
{
 8002cfc:	b508      	push	{r3, lr}
	if(ws2812b.startTransfer) {
 8002cfe:	4b06      	ldr	r3, [pc, #24]	@ (8002d18 <ws2812b_handle+0x1c>)
 8002d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d04:	b903      	cbnz	r3, 8002d08 <ws2812b_handle+0xc>
		ws2812b.startTransfer = 0;
		WS2812_sendbuf();
	}

}
 8002d06:	bd08      	pop	{r3, pc}
		ws2812b.startTransfer = 0;
 8002d08:	4b03      	ldr	r3, [pc, #12]	@ (8002d18 <ws2812b_handle+0x1c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
		WS2812_sendbuf();
 8002d10:	f7ff fdd0 	bl	80028b4 <WS2812_sendbuf>
}
 8002d14:	e7f7      	b.n	8002d06 <ws2812b_handle+0xa>
 8002d16:	bf00      	nop
 8002d18:	20001a5c 	.word	0x20001a5c

08002d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d1c:	b510      	push	{r4, lr}
 8002d1e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	2400      	movs	r4, #0
 8002d22:	9403      	str	r4, [sp, #12]
 8002d24:	9404      	str	r4, [sp, #16]
 8002d26:	9405      	str	r4, [sp, #20]
 8002d28:	9406      	str	r4, [sp, #24]
 8002d2a:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d9c <MX_GPIO_Init+0x80>)
 8002d2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d30:	f042 0201 	orr.w	r2, r2, #1
 8002d34:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002d36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d38:	f002 0201 	and.w	r2, r2, #1
 8002d3c:	9200      	str	r2, [sp, #0]
 8002d3e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d42:	f042 0202 	orr.w	r2, r2, #2
 8002d46:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002d48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d4a:	f002 0202 	and.w	r2, r2, #2
 8002d4e:	9201      	str	r2, [sp, #4]
 8002d50:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d54:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d58:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d60:	9302      	str	r3, [sp, #8]
 8002d62:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIA_LED_Pin|WS_LED_1_Pin|WS_LED_2_Pin|WS_LED_3_Pin
 8002d64:	4622      	mov	r2, r4
 8002d66:	21f2      	movs	r1, #242	@ 0xf2
 8002d68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d6c:	f001 f85a 	bl	8003e24 <HAL_GPIO_WritePin>
                          |WS_LED_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIA_LED_Pin WS_LED_1_Pin WS_LED_2_Pin WS_LED_3_Pin
                           WS_LED_4_Pin */
  GPIO_InitStruct.Pin = DIA_LED_Pin|WS_LED_1_Pin|WS_LED_2_Pin|WS_LED_3_Pin
 8002d70:	23f2      	movs	r3, #242	@ 0xf2
 8002d72:	9303      	str	r3, [sp, #12]
                          |WS_LED_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d74:	2301      	movs	r3, #1
 8002d76:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7c:	a903      	add	r1, sp, #12
 8002d7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d82:	f000 ff6b 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d86:	2308      	movs	r3, #8
 8002d88:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d90:	a903      	add	r1, sp, #12
 8002d92:	4803      	ldr	r0, [pc, #12]	@ (8002da0 <MX_GPIO_Init+0x84>)
 8002d94:	f000 ff62 	bl	8003c5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d98:	b008      	add	sp, #32
 8002d9a:	bd10      	pop	{r4, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	48001c00 	.word	0x48001c00

08002da4 <MX_DMA_Init>:
{
 8002da4:	b500      	push	{lr}
 8002da6:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002da8:	4b12      	ldr	r3, [pc, #72]	@ (8002df4 <MX_DMA_Init+0x50>)
 8002daa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	649a      	str	r2, [r3, #72]	@ 0x48
 8002db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	200c      	movs	r0, #12
 8002dc2:	f000 fd71 	bl	80038a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002dc6:	200c      	movs	r0, #12
 8002dc8:	f000 fd7e 	bl	80038c8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	4611      	mov	r1, r2
 8002dd0:	200f      	movs	r0, #15
 8002dd2:	f000 fd69 	bl	80038a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002dd6:	200f      	movs	r0, #15
 8002dd8:	f000 fd76 	bl	80038c8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	4611      	mov	r1, r2
 8002de0:	2011      	movs	r0, #17
 8002de2:	f000 fd61 	bl	80038a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002de6:	2011      	movs	r0, #17
 8002de8:	f000 fd6e 	bl	80038c8 <HAL_NVIC_EnableIRQ>
}
 8002dec:	b003      	add	sp, #12
 8002dee:	f85d fb04 	ldr.w	pc, [sp], #4
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000

08002df8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8002df8:	b510      	push	{r4, lr}
 8002dfa:	4604      	mov	r4, r0
  if(huart->Instance == USART2)
 8002dfc:	6802      	ldr	r2, [r0, #0]
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <HAL_UART_RxCpltCallback+0x38>)
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d004      	beq.n	8002e0e <HAL_UART_RxCpltCallback+0x16>
  if(huart->Instance == USART1)
 8002e04:	6822      	ldr	r2, [r4, #0]
 8002e06:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <HAL_UART_RxCpltCallback+0x3c>)
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d008      	beq.n	8002e1e <HAL_UART_RxCpltCallback+0x26>
}
 8002e0c:	bd10      	pop	{r4, pc}
    NOS_UART_ReceiveHandler(&UART2,huart);
 8002e0e:	4601      	mov	r1, r0
 8002e10:	4809      	ldr	r0, [pc, #36]	@ (8002e38 <HAL_UART_RxCpltCallback+0x40>)
 8002e12:	f7fe fe66 	bl	8001ae2 <NOS_UART_ReceiveHandler>
    receive = true;
 8002e16:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <HAL_UART_RxCpltCallback+0x44>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	e7f2      	b.n	8002e04 <HAL_UART_RxCpltCallback+0xc>
    NOS_UART_ReceiveHandler(&UART1,huart);
 8002e1e:	4621      	mov	r1, r4
 8002e20:	4807      	ldr	r0, [pc, #28]	@ (8002e40 <HAL_UART_RxCpltCallback+0x48>)
 8002e22:	f7fe fe5e 	bl	8001ae2 <NOS_UART_ReceiveHandler>
    receive = true;
 8002e26:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <HAL_UART_RxCpltCallback+0x44>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
}
 8002e2c:	e7ee      	b.n	8002e0c <HAL_UART_RxCpltCallback+0x14>
 8002e2e:	bf00      	nop
 8002e30:	40004400 	.word	0x40004400
 8002e34:	40013800 	.word	0x40013800
 8002e38:	200023d8 	.word	0x200023d8
 8002e3c:	20001aa9 	.word	0x20001aa9
 8002e40:	20001da0 	.word	0x20001da0

08002e44 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e44:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e46:	e7fe      	b.n	8002e46 <Error_Handler+0x2>

08002e48 <MX_SPI2_Init>:
{
 8002e48:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8002e4a:	480f      	ldr	r0, [pc, #60]	@ (8002e88 <MX_SPI2_Init+0x40>)
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e8c <MX_SPI2_Init+0x44>)
 8002e4e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e50:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002e54:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e56:	2300      	movs	r3, #0
 8002e58:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002e5a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002e5e:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e60:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e62:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e68:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e6a:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e6c:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e6e:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e70:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002e72:	2207      	movs	r2, #7
 8002e74:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e76:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e78:	2308      	movs	r3, #8
 8002e7a:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e7c:	f002 f8d0 	bl	8005020 <HAL_SPI_Init>
 8002e80:	b900      	cbnz	r0, 8002e84 <MX_SPI2_Init+0x3c>
}
 8002e82:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002e84:	f7ff ffde 	bl	8002e44 <Error_Handler>
 8002e88:	2000485c 	.word	0x2000485c
 8002e8c:	40003800 	.word	0x40003800

08002e90 <MX_USART1_UART_Init>:
{
 8002e90:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8002e92:	480b      	ldr	r0, [pc, #44]	@ (8002ec0 <MX_USART1_UART_Init+0x30>)
 8002e94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <MX_USART1_UART_Init+0x34>)
 8002e96:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002e98:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002e9c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ea2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ea4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ea6:	220c      	movs	r2, #12
 8002ea8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eaa:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eac:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eae:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eb0:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eb2:	f003 fb68 	bl	8006586 <HAL_UART_Init>
 8002eb6:	b900      	cbnz	r0, 8002eba <MX_USART1_UART_Init+0x2a>
}
 8002eb8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002eba:	f7ff ffc3 	bl	8002e44 <Error_Handler>
 8002ebe:	bf00      	nop
 8002ec0:	20004664 	.word	0x20004664
 8002ec4:	40013800 	.word	0x40013800

08002ec8 <MX_USART2_UART_Init>:
{
 8002ec8:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8002eca:	480b      	ldr	r0, [pc, #44]	@ (8002ef8 <MX_USART2_UART_Init+0x30>)
 8002ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <MX_USART2_UART_Init+0x34>)
 8002ece:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 460800;
 8002ed0:	f44f 23e1 	mov.w	r3, #460800	@ 0x70800
 8002ed4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002eda:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002edc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ede:	220c      	movs	r2, #12
 8002ee0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ee2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ee6:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ee8:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eea:	f003 fb4c 	bl	8006586 <HAL_UART_Init>
 8002eee:	b900      	cbnz	r0, 8002ef2 <MX_USART2_UART_Init+0x2a>
}
 8002ef0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002ef2:	f7ff ffa7 	bl	8002e44 <Error_Handler>
 8002ef6:	bf00      	nop
 8002ef8:	200045dc 	.word	0x200045dc
 8002efc:	40004400 	.word	0x40004400

08002f00 <MX_TIM2_Init>:
{
 8002f00:	b500      	push	{lr}
 8002f02:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f04:	2300      	movs	r3, #0
 8002f06:	9307      	str	r3, [sp, #28]
 8002f08:	9308      	str	r3, [sp, #32]
 8002f0a:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	9301      	str	r3, [sp, #4]
 8002f10:	9302      	str	r3, [sp, #8]
 8002f12:	9303      	str	r3, [sp, #12]
 8002f14:	9304      	str	r3, [sp, #16]
 8002f16:	9305      	str	r3, [sp, #20]
 8002f18:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 8002f1a:	4819      	ldr	r0, [pc, #100]	@ (8002f80 <MX_TIM2_Init+0x80>)
 8002f1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f20:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8002f22:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f24:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8002f26:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2a:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f2c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f30:	f002 fb48 	bl	80055c4 <HAL_TIM_PWM_Init>
 8002f34:	b9d8      	cbnz	r0, 8002f6e <MX_TIM2_Init+0x6e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f3a:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f3c:	a907      	add	r1, sp, #28
 8002f3e:	4810      	ldr	r0, [pc, #64]	@ (8002f80 <MX_TIM2_Init+0x80>)
 8002f40:	f002 fd30 	bl	80059a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f44:	b9a8      	cbnz	r0, 8002f72 <MX_TIM2_Init+0x72>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f46:	2360      	movs	r3, #96	@ 0x60
 8002f48:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f4e:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f50:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f52:	4669      	mov	r1, sp
 8002f54:	480a      	ldr	r0, [pc, #40]	@ (8002f80 <MX_TIM2_Init+0x80>)
 8002f56:	f002 fbdc 	bl	8005712 <HAL_TIM_PWM_ConfigChannel>
 8002f5a:	b960      	cbnz	r0, 8002f76 <MX_TIM2_Init+0x76>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	4669      	mov	r1, sp
 8002f60:	4807      	ldr	r0, [pc, #28]	@ (8002f80 <MX_TIM2_Init+0x80>)
 8002f62:	f002 fbd6 	bl	8005712 <HAL_TIM_PWM_ConfigChannel>
 8002f66:	b940      	cbnz	r0, 8002f7a <MX_TIM2_Init+0x7a>
}
 8002f68:	b00b      	add	sp, #44	@ 0x2c
 8002f6a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002f6e:	f7ff ff69 	bl	8002e44 <Error_Handler>
    Error_Handler();
 8002f72:	f7ff ff67 	bl	8002e44 <Error_Handler>
    Error_Handler();
 8002f76:	f7ff ff65 	bl	8002e44 <Error_Handler>
    Error_Handler();
 8002f7a:	f7ff ff63 	bl	8002e44 <Error_Handler>
 8002f7e:	bf00      	nop
 8002f80:	200047c4 	.word	0x200047c4

08002f84 <MX_TIM1_Init>:
{
 8002f84:	b510      	push	{r4, lr}
 8002f86:	b096      	sub	sp, #88	@ 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f88:	2400      	movs	r4, #0
 8002f8a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8002f8c:	9414      	str	r4, [sp, #80]	@ 0x50
 8002f8e:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f90:	940c      	str	r4, [sp, #48]	@ 0x30
 8002f92:	940d      	str	r4, [sp, #52]	@ 0x34
 8002f94:	940e      	str	r4, [sp, #56]	@ 0x38
 8002f96:	940f      	str	r4, [sp, #60]	@ 0x3c
 8002f98:	9410      	str	r4, [sp, #64]	@ 0x40
 8002f9a:	9411      	str	r4, [sp, #68]	@ 0x44
 8002f9c:	9412      	str	r4, [sp, #72]	@ 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f9e:	222c      	movs	r2, #44	@ 0x2c
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	a801      	add	r0, sp, #4
 8002fa4:	f003 fd4b 	bl	8006a3e <memset>
  htim1.Instance = TIM1;
 8002fa8:	4821      	ldr	r0, [pc, #132]	@ (8003030 <MX_TIM1_Init+0xac>)
 8002faa:	4b22      	ldr	r3, [pc, #136]	@ (8003034 <MX_TIM1_Init+0xb0>)
 8002fac:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8002fae:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb0:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 65535;
 8002fb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fb6:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb8:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fba:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fbc:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002fbe:	f002 fad1 	bl	8005564 <HAL_TIM_OC_Init>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d12c      	bne.n	8003020 <MX_TIM1_Init+0x9c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	9313      	str	r3, [sp, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002fca:	9314      	str	r3, [sp, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fcc:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fce:	a913      	add	r1, sp, #76	@ 0x4c
 8002fd0:	4817      	ldr	r0, [pc, #92]	@ (8003030 <MX_TIM1_Init+0xac>)
 8002fd2:	f002 fce7 	bl	80059a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002fd6:	bb28      	cbnz	r0, 8003024 <MX_TIM1_Init+0xa0>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002fd8:	2200      	movs	r2, #0
 8002fda:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002fdc:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fde:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fe0:	920f      	str	r2, [sp, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fe2:	9210      	str	r2, [sp, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fe4:	9211      	str	r2, [sp, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fe6:	9212      	str	r2, [sp, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fe8:	a90c      	add	r1, sp, #48	@ 0x30
 8002fea:	4811      	ldr	r0, [pc, #68]	@ (8003030 <MX_TIM1_Init+0xac>)
 8002fec:	f002 fb54 	bl	8005698 <HAL_TIM_OC_ConfigChannel>
 8002ff0:	b9d0      	cbnz	r0, 8003028 <MX_TIM1_Init+0xa4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ff6:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ff8:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ffa:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ffc:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ffe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003002:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003004:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003006:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003008:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800300c:	9209      	str	r2, [sp, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800300e:	930a      	str	r3, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003010:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003012:	a901      	add	r1, sp, #4
 8003014:	4806      	ldr	r0, [pc, #24]	@ (8003030 <MX_TIM1_Init+0xac>)
 8003016:	f002 fcfd 	bl	8005a14 <HAL_TIMEx_ConfigBreakDeadTime>
 800301a:	b938      	cbnz	r0, 800302c <MX_TIM1_Init+0xa8>
}
 800301c:	b016      	add	sp, #88	@ 0x58
 800301e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003020:	f7ff ff10 	bl	8002e44 <Error_Handler>
    Error_Handler();
 8003024:	f7ff ff0e 	bl	8002e44 <Error_Handler>
    Error_Handler();
 8003028:	f7ff ff0c 	bl	8002e44 <Error_Handler>
    Error_Handler();
 800302c:	f7ff ff0a 	bl	8002e44 <Error_Handler>
 8003030:	20004810 	.word	0x20004810
 8003034:	40012c00 	.word	0x40012c00

08003038 <SystemClock_Config>:
{
 8003038:	b500      	push	{lr}
 800303a:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800303c:	2244      	movs	r2, #68	@ 0x44
 800303e:	2100      	movs	r1, #0
 8003040:	a805      	add	r0, sp, #20
 8003042:	f003 fcfc 	bl	8006a3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003046:	2300      	movs	r3, #0
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	9302      	str	r3, [sp, #8]
 800304e:	9303      	str	r3, [sp, #12]
 8003050:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003052:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003056:	f001 f86d 	bl	8004134 <HAL_PWREx_ControlVoltageScaling>
 800305a:	bb18      	cbnz	r0, 80030a4 <SystemClock_Config+0x6c>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800305c:	2302      	movs	r3, #2
 800305e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003060:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003064:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003066:	2210      	movs	r2, #16
 8003068:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800306a:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800306c:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800306e:	2201      	movs	r2, #1
 8003070:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003072:	2208      	movs	r2, #8
 8003074:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003076:	2207      	movs	r2, #7
 8003078:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800307a:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800307c:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800307e:	a805      	add	r0, sp, #20
 8003080:	f001 f942 	bl	8004308 <HAL_RCC_OscConfig>
 8003084:	b980      	cbnz	r0, 80030a8 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003086:	230f      	movs	r3, #15
 8003088:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800308a:	2103      	movs	r1, #3
 800308c:	9101      	str	r1, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800308e:	2300      	movs	r3, #0
 8003090:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003092:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003094:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003096:	4668      	mov	r0, sp
 8003098:	f001 fc6c 	bl	8004974 <HAL_RCC_ClockConfig>
 800309c:	b930      	cbnz	r0, 80030ac <SystemClock_Config+0x74>
}
 800309e:	b017      	add	sp, #92	@ 0x5c
 80030a0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80030a4:	f7ff fece 	bl	8002e44 <Error_Handler>
    Error_Handler();
 80030a8:	f7ff fecc 	bl	8002e44 <Error_Handler>
    Error_Handler();
 80030ac:	f7ff feca 	bl	8002e44 <Error_Handler>

080030b0 <main>:
{
 80030b0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80030b4:	b089      	sub	sp, #36	@ 0x24
  HAL_Init();
 80030b6:	f000 fb81 	bl	80037bc <HAL_Init>
  SystemClock_Config();
 80030ba:	f7ff ffbd 	bl	8003038 <SystemClock_Config>
  MX_GPIO_Init();
 80030be:	f7ff fe2d 	bl	8002d1c <MX_GPIO_Init>
  MX_DMA_Init();
 80030c2:	f7ff fe6f 	bl	8002da4 <MX_DMA_Init>
  MX_SPI2_Init();
 80030c6:	f7ff febf 	bl	8002e48 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80030ca:	f7ff fee1 	bl	8002e90 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80030ce:	f7ff fefb 	bl	8002ec8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80030d2:	f7ff ff15 	bl	8002f00 <MX_TIM2_Init>
  MX_TIM1_Init();
 80030d6:	f7ff ff55 	bl	8002f84 <MX_TIM1_Init>
  HAL_UART_Receive_IT(&huart1,UART1.rx_buff,1);
 80030da:	4ed0      	ldr	r6, [pc, #832]	@ (800341c <main+0x36c>)
 80030dc:	4cd0      	ldr	r4, [pc, #832]	@ (8003420 <main+0x370>)
 80030de:	2201      	movs	r2, #1
 80030e0:	4631      	mov	r1, r6
 80030e2:	4620      	mov	r0, r4
 80030e4:	f003 faea 	bl	80066bc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2,UART2.rx_buff,1);
 80030e8:	f8df 9380 	ldr.w	r9, [pc, #896]	@ 800346c <main+0x3bc>
 80030ec:	4dcd      	ldr	r5, [pc, #820]	@ (8003424 <main+0x374>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	4649      	mov	r1, r9
 80030f2:	4628      	mov	r0, r5
 80030f4:	f003 fae2 	bl	80066bc <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart1,"HELLO",sizeof("HELLO"),1000);
 80030f8:	4fcb      	ldr	r7, [pc, #812]	@ (8003428 <main+0x378>)
 80030fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030fe:	2206      	movs	r2, #6
 8003100:	4639      	mov	r1, r7
 8003102:	4620      	mov	r0, r4
 8003104:	f003 f978 	bl	80063f8 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2,"HELLO",sizeof("HELLO"),1000);
 8003108:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800310c:	2206      	movs	r2, #6
 800310e:	4639      	mov	r1, r7
 8003110:	4628      	mov	r0, r5
 8003112:	f003 f971 	bl	80063f8 <HAL_UART_Transmit>
  visInit();
 8003116:	f7ff facb 	bl	80026b0 <visInit>
  NOS_WS2812B_Strip_FullInit(&stripA,&frameBufferA,&pixelsA,128);
 800311a:	f8df 8354 	ldr.w	r8, [pc, #852]	@ 8003470 <main+0x3c0>
 800311e:	2380      	movs	r3, #128	@ 0x80
 8003120:	4ac2      	ldr	r2, [pc, #776]	@ (800342c <main+0x37c>)
 8003122:	49c3      	ldr	r1, [pc, #780]	@ (8003430 <main+0x380>)
 8003124:	4640      	mov	r0, r8
 8003126:	f7fe fdb8 	bl	8001c9a <NOS_WS2812B_Strip_FullInit>
  NOS_WS2812B_Strip_FullInit(&stripB,&frameBufferB,&pixelsB,128);
 800312a:	2380      	movs	r3, #128	@ 0x80
 800312c:	4ac1      	ldr	r2, [pc, #772]	@ (8003434 <main+0x384>)
 800312e:	49c2      	ldr	r1, [pc, #776]	@ (8003438 <main+0x388>)
 8003130:	48c2      	ldr	r0, [pc, #776]	@ (800343c <main+0x38c>)
 8003132:	f7fe fdb2 	bl	8001c9a <NOS_WS2812B_Strip_FullInit>
  NOS_WS2812B_Strip_FullInit(&stripC,&frameBufferC,&pixelsC,128);
 8003136:	f8df a33c 	ldr.w	sl, [pc, #828]	@ 8003474 <main+0x3c4>
 800313a:	2380      	movs	r3, #128	@ 0x80
 800313c:	4ac0      	ldr	r2, [pc, #768]	@ (8003440 <main+0x390>)
 800313e:	49c1      	ldr	r1, [pc, #772]	@ (8003444 <main+0x394>)
 8003140:	4650      	mov	r0, sl
 8003142:	f7fe fdaa 	bl	8001c9a <NOS_WS2812B_Strip_FullInit>
  NOS_WS2812B_Strip_FullInit(&stripD,&frameBufferD,&pixelsD,128);
 8003146:	2380      	movs	r3, #128	@ 0x80
 8003148:	4abf      	ldr	r2, [pc, #764]	@ (8003448 <main+0x398>)
 800314a:	49c0      	ldr	r1, [pc, #768]	@ (800344c <main+0x39c>)
 800314c:	48c0      	ldr	r0, [pc, #768]	@ (8003450 <main+0x3a0>)
 800314e:	f7fe fda4 	bl	8001c9a <NOS_WS2812B_Strip_FullInit>
  NOS_TimeEvent_Init(&screenUpdateEvent, 20);
 8003152:	2114      	movs	r1, #20
 8003154:	48bf      	ldr	r0, [pc, #764]	@ (8003454 <main+0x3a4>)
 8003156:	f7fe fc37 	bl	80019c8 <NOS_TimeEvent_Init>
  NOS_UART_ReceiveAbort(&UART2,&huart2);
 800315a:	4629      	mov	r1, r5
 800315c:	f5a9 7005 	sub.w	r0, r9, #532	@ 0x214
 8003160:	f7fe fc60 	bl	8001a24 <NOS_UART_ReceiveAbort>
  NOS_UART_ReceiveAbort(&UART1,&huart1);
 8003164:	4621      	mov	r1, r4
 8003166:	f5a6 7005 	sub.w	r0, r6, #532	@ 0x214
 800316a:	f7fe fc5b 	bl	8001a24 <NOS_UART_ReceiveAbort>
  NOS_WS2812B_Strip_Effect_Init(&breatheA,&nullColor,20,1,40,60,0,0,0,0,EFFECT_BREATHE_ID,true);
 800316e:	4fba      	ldr	r7, [pc, #744]	@ (8003458 <main+0x3a8>)
 8003170:	4eba      	ldr	r6, [pc, #744]	@ (800345c <main+0x3ac>)
 8003172:	f04f 0901 	mov.w	r9, #1
 8003176:	f8cd 901c 	str.w	r9, [sp, #28]
 800317a:	2320      	movs	r3, #32
 800317c:	9306      	str	r3, [sp, #24]
 800317e:	2400      	movs	r4, #0
 8003180:	9405      	str	r4, [sp, #20]
 8003182:	9404      	str	r4, [sp, #16]
 8003184:	9403      	str	r4, [sp, #12]
 8003186:	9402      	str	r4, [sp, #8]
 8003188:	233c      	movs	r3, #60	@ 0x3c
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	f04f 0b28 	mov.w	fp, #40	@ 0x28
 8003190:	f8cd b000 	str.w	fp, [sp]
 8003194:	464b      	mov	r3, r9
 8003196:	2214      	movs	r2, #20
 8003198:	4639      	mov	r1, r7
 800319a:	4630      	mov	r0, r6
 800319c:	f7fe fe38 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
  NOS_WS2812B_Strip_Effect_Init(&rainbowA,&nullColor,1000,1,200,800,0,0,0,0,EFFECT_RAINBOW_ID,false);
 80031a0:	4daf      	ldr	r5, [pc, #700]	@ (8003460 <main+0x3b0>)
 80031a2:	9407      	str	r4, [sp, #28]
 80031a4:	2321      	movs	r3, #33	@ 0x21
 80031a6:	9306      	str	r3, [sp, #24]
 80031a8:	9405      	str	r4, [sp, #20]
 80031aa:	9404      	str	r4, [sp, #16]
 80031ac:	9403      	str	r4, [sp, #12]
 80031ae:	9402      	str	r4, [sp, #8]
 80031b0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	23c8      	movs	r3, #200	@ 0xc8
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	464b      	mov	r3, r9
 80031bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031c0:	4639      	mov	r1, r7
 80031c2:	4628      	mov	r0, r5
 80031c4:	f7fe fe24 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
  NOS_WS2812B_Strip_Effect_Init(&dotsA,&white,40,1,0,100,0,0,0,0,EFFECT_DOTS_ID,false);
 80031c8:	4fa6      	ldr	r7, [pc, #664]	@ (8003464 <main+0x3b4>)
 80031ca:	9407      	str	r4, [sp, #28]
 80031cc:	2322      	movs	r3, #34	@ 0x22
 80031ce:	9306      	str	r3, [sp, #24]
 80031d0:	9405      	str	r4, [sp, #20]
 80031d2:	9404      	str	r4, [sp, #16]
 80031d4:	9403      	str	r4, [sp, #12]
 80031d6:	9402      	str	r4, [sp, #8]
 80031d8:	2364      	movs	r3, #100	@ 0x64
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	9400      	str	r4, [sp, #0]
 80031de:	464b      	mov	r3, r9
 80031e0:	465a      	mov	r2, fp
 80031e2:	49a1      	ldr	r1, [pc, #644]	@ (8003468 <main+0x3b8>)
 80031e4:	4638      	mov	r0, r7
 80031e6:	f7fe fe13 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
  NOS_WS2812B_Strip_Effect_Init(&walkingPixelA,&white,100,1,0,48,3,0,0,0,EFFECT_WALKING_PIXELS_ID,false);
 80031ea:	f8df b28c 	ldr.w	fp, [pc, #652]	@ 8003478 <main+0x3c8>
 80031ee:	9407      	str	r4, [sp, #28]
 80031f0:	2323      	movs	r3, #35	@ 0x23
 80031f2:	9306      	str	r3, [sp, #24]
 80031f4:	9405      	str	r4, [sp, #20]
 80031f6:	9404      	str	r4, [sp, #16]
 80031f8:	9403      	str	r4, [sp, #12]
 80031fa:	2303      	movs	r3, #3
 80031fc:	9302      	str	r3, [sp, #8]
 80031fe:	2330      	movs	r3, #48	@ 0x30
 8003200:	9301      	str	r3, [sp, #4]
 8003202:	9400      	str	r4, [sp, #0]
 8003204:	464b      	mov	r3, r9
 8003206:	2264      	movs	r2, #100	@ 0x64
 8003208:	4997      	ldr	r1, [pc, #604]	@ (8003468 <main+0x3b8>)
 800320a:	4658      	mov	r0, fp
 800320c:	f7fe fe00 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
  NOS_WS2812B_Strip_Effect_Init(&steadyColorA,&white,0,0,0,0,0,0,0,0,EFFECT_STEADY_COLOR_ID,false);
 8003210:	f8df 9268 	ldr.w	r9, [pc, #616]	@ 800347c <main+0x3cc>
 8003214:	9407      	str	r4, [sp, #28]
 8003216:	2324      	movs	r3, #36	@ 0x24
 8003218:	9306      	str	r3, [sp, #24]
 800321a:	9405      	str	r4, [sp, #20]
 800321c:	9404      	str	r4, [sp, #16]
 800321e:	9403      	str	r4, [sp, #12]
 8003220:	9402      	str	r4, [sp, #8]
 8003222:	9401      	str	r4, [sp, #4]
 8003224:	9400      	str	r4, [sp, #0]
 8003226:	4623      	mov	r3, r4
 8003228:	4622      	mov	r2, r4
 800322a:	498f      	ldr	r1, [pc, #572]	@ (8003468 <main+0x3b8>)
 800322c:	4648      	mov	r0, r9
 800322e:	f7fe fdef 	bl	8001e10 <NOS_WS2812B_Strip_Effect_Init>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripA,breatheA);
 8003232:	466c      	mov	r4, sp
 8003234:	f106 0c0c 	add.w	ip, r6, #12
 8003238:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800323c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800323e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003246:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800324a:	4640      	mov	r0, r8
 800324c:	f7fe fe1a 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripB,breatheA);
 8003250:	46ee      	mov	lr, sp
 8003252:	f106 0c0c 	add.w	ip, r6, #12
 8003256:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800325a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800325e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003266:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800326a:	4874      	ldr	r0, [pc, #464]	@ (800343c <main+0x38c>)
 800326c:	f7fe fe0a 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripC,breatheA);
 8003270:	46ee      	mov	lr, sp
 8003272:	f106 0c0c 	add.w	ip, r6, #12
 8003276:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800327a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800327e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003282:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003286:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800328a:	4650      	mov	r0, sl
 800328c:	f7fe fdfa 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripD,breatheA);
 8003290:	46ee      	mov	lr, sp
 8003292:	f106 0c0c 	add.w	ip, r6, #12
 8003296:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800329a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800329e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80032a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032a6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80032aa:	4869      	ldr	r0, [pc, #420]	@ (8003450 <main+0x3a0>)
 80032ac:	f7fe fdea 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripA,rainbowA);
 80032b0:	46ec      	mov	ip, sp
 80032b2:	f105 060c 	add.w	r6, r5, #12
 80032b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80032b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80032bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80032c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032c4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80032c8:	4640      	mov	r0, r8
 80032ca:	f7fe fddb 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripB,rainbowA);
 80032ce:	46ec      	mov	ip, sp
 80032d0:	f105 060c 	add.w	r6, r5, #12
 80032d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80032d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80032da:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80032de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032e2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80032e6:	4855      	ldr	r0, [pc, #340]	@ (800343c <main+0x38c>)
 80032e8:	f7fe fdcc 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripC,rainbowA);
 80032ec:	46ec      	mov	ip, sp
 80032ee:	f105 060c 	add.w	r6, r5, #12
 80032f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80032f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80032f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80032fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003300:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003304:	4650      	mov	r0, sl
 8003306:	f7fe fdbd 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripD,rainbowA);
 800330a:	46ec      	mov	ip, sp
 800330c:	f105 060c 	add.w	r6, r5, #12
 8003310:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003312:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003316:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800331a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800331e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8003322:	484b      	ldr	r0, [pc, #300]	@ (8003450 <main+0x3a0>)
 8003324:	f7fe fdae 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripA,dotsA);
 8003328:	466e      	mov	r6, sp
 800332a:	f107 050c 	add.w	r5, r7, #12
 800332e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003330:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003332:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003336:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800333a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800333e:	4640      	mov	r0, r8
 8003340:	f7fe fda0 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripB,dotsA);
 8003344:	466e      	mov	r6, sp
 8003346:	f107 050c 	add.w	r5, r7, #12
 800334a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800334c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800334e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003352:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003356:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800335a:	4838      	ldr	r0, [pc, #224]	@ (800343c <main+0x38c>)
 800335c:	f7fe fd92 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripC,dotsA);
 8003360:	466e      	mov	r6, sp
 8003362:	f107 050c 	add.w	r5, r7, #12
 8003366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003368:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800336a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800336e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003372:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8003376:	4650      	mov	r0, sl
 8003378:	f7fe fd84 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripD,dotsA);
 800337c:	466e      	mov	r6, sp
 800337e:	f107 050c 	add.w	r5, r7, #12
 8003382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003384:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003386:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800338a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800338e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8003392:	482f      	ldr	r0, [pc, #188]	@ (8003450 <main+0x3a0>)
 8003394:	f7fe fd76 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripA,walkingPixelA);
 8003398:	466e      	mov	r6, sp
 800339a:	f10b 050c 	add.w	r5, fp, #12
 800339e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80033a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80033aa:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 80033ae:	4640      	mov	r0, r8
 80033b0:	f7fe fd68 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripB,walkingPixelA);
 80033b4:	466e      	mov	r6, sp
 80033b6:	f10b 050c 	add.w	r5, fp, #12
 80033ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80033be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80033c6:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 80033ca:	481c      	ldr	r0, [pc, #112]	@ (800343c <main+0x38c>)
 80033cc:	f7fe fd5a 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripC,walkingPixelA);
 80033d0:	466e      	mov	r6, sp
 80033d2:	f10b 050c 	add.w	r5, fp, #12
 80033d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033d8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80033da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80033e2:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 80033e6:	4650      	mov	r0, sl
 80033e8:	f7fe fd4c 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripD,walkingPixelA);
 80033ec:	466e      	mov	r6, sp
 80033ee:	f10b 050c 	add.w	r5, fp, #12
 80033f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80033f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80033fe:	e89b 000e 	ldmia.w	fp, {r1, r2, r3}
 8003402:	4813      	ldr	r0, [pc, #76]	@ (8003450 <main+0x3a0>)
 8003404:	f7fe fd3e 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripA,steadyColorA);
 8003408:	466e      	mov	r6, sp
 800340a:	f109 050c 	add.w	r5, r9, #12
 800340e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003410:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003412:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003416:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800341a:	e031      	b.n	8003480 <main+0x3d0>
 800341c:	20001fb4 	.word	0x20001fb4
 8003420:	20004664 	.word	0x20004664
 8003424:	200045dc 	.word	0x200045dc
 8003428:	08008c98 	.word	0x08008c98
 800342c:	20003c10 	.word	0x20003c10
 8003430:	2000129c 	.word	0x2000129c
 8003434:	20003610 	.word	0x20003610
 8003438:	20000c9c 	.word	0x20000c9c
 800343c:	200043f0 	.word	0x200043f0
 8003440:	20003010 	.word	0x20003010
 8003444:	2000069c 	.word	0x2000069c
 8003448:	20002a10 	.word	0x20002a10
 800344c:	2000009c 	.word	0x2000009c
 8003450:	20004210 	.word	0x20004210
 8003454:	200045d0 	.word	0x200045d0
 8003458:	20001aac 	.word	0x20001aac
 800345c:	20001d74 	.word	0x20001d74
 8003460:	20001d48 	.word	0x20001d48
 8003464:	20001d1c 	.word	0x20001d1c
 8003468:	20000008 	.word	0x20000008
 800346c:	200025ec 	.word	0x200025ec
 8003470:	200044e0 	.word	0x200044e0
 8003474:	20004300 	.word	0x20004300
 8003478:	20001cf0 	.word	0x20001cf0
 800347c:	20001cc4 	.word	0x20001cc4
 8003480:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 8003484:	4640      	mov	r0, r8
 8003486:	f7fe fcfd 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripB,steadyColorA);
 800348a:	466e      	mov	r6, sp
 800348c:	f109 050c 	add.w	r5, r9, #12
 8003490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003492:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003494:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800349c:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 80034a0:	48a0      	ldr	r0, [pc, #640]	@ (8003724 <main+0x674>)
 80034a2:	f7fe fcef 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripC,steadyColorA);
 80034a6:	466e      	mov	r6, sp
 80034a8:	f109 050c 	add.w	r5, r9, #12
 80034ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80034b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80034b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034b8:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 80034bc:	4650      	mov	r0, sl
 80034be:	f7fe fce1 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripD,steadyColorA);
 80034c2:	466e      	mov	r6, sp
 80034c4:	f109 050c 	add.w	r5, r9, #12
 80034c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80034cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80034d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034d4:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 80034d8:	4893      	ldr	r0, [pc, #588]	@ (8003728 <main+0x678>)
 80034da:	f7fe fcd3 	bl	8001e84 <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_ColorFill(&stripA,white);
 80034de:	4b93      	ldr	r3, [pc, #588]	@ (800372c <main+0x67c>)
 80034e0:	461c      	mov	r4, r3
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	4640      	mov	r0, r8
 80034e6:	f7fe fc6b 	bl	8001dc0 <NOS_WS2812B_Strip_ColorFill>
  NOS_WS2812B_Strip_ColorFill(&stripB,white);
 80034ea:	6821      	ldr	r1, [r4, #0]
 80034ec:	488d      	ldr	r0, [pc, #564]	@ (8003724 <main+0x674>)
 80034ee:	f7fe fc67 	bl	8001dc0 <NOS_WS2812B_Strip_ColorFill>
  NOS_WS2812B_Strip_ColorFill(&stripC,white);
 80034f2:	6821      	ldr	r1, [r4, #0]
 80034f4:	4650      	mov	r0, sl
 80034f6:	f7fe fc63 	bl	8001dc0 <NOS_WS2812B_Strip_ColorFill>
  NOS_WS2812B_Strip_ColorFill(&stripD,white);
 80034fa:	6821      	ldr	r1, [r4, #0]
 80034fc:	488a      	ldr	r0, [pc, #552]	@ (8003728 <main+0x678>)
 80034fe:	f7fe fc5f 	bl	8001dc0 <NOS_WS2812B_Strip_ColorFill>
  NOS_WS2812B_Strip_Update(&stripA);
 8003502:	4640      	mov	r0, r8
 8003504:	f7fe fc12 	bl	8001d2c <NOS_WS2812B_Strip_Update>
  NOS_WS2812B_Strip_Update(&stripB);
 8003508:	4886      	ldr	r0, [pc, #536]	@ (8003724 <main+0x674>)
 800350a:	f7fe fc0f 	bl	8001d2c <NOS_WS2812B_Strip_Update>
  NOS_WS2812B_Strip_Update(&stripC);
 800350e:	4650      	mov	r0, sl
 8003510:	f7fe fc0c 	bl	8001d2c <NOS_WS2812B_Strip_Update>
  NOS_WS2812B_Strip_Update(&stripD);
 8003514:	4884      	ldr	r0, [pc, #528]	@ (8003728 <main+0x678>)
 8003516:	f7fe fc09 	bl	8001d2c <NOS_WS2812B_Strip_Update>
  NOS_Strip_UART_ParseStringCommand(&stripA,"&/Breathe/70/80/20/true/&/Rainbow/#0000ff/#7f00ff/60/false/&/Dots/#ffff00/60/true/&/Walking/#ffff00/5/70/false/&/Steady/#00ff00/false/&",136);
 800351a:	4c85      	ldr	r4, [pc, #532]	@ (8003730 <main+0x680>)
 800351c:	2288      	movs	r2, #136	@ 0x88
 800351e:	4621      	mov	r1, r4
 8003520:	4640      	mov	r0, r8
 8003522:	f7fd ffad 	bl	8001480 <NOS_Strip_UART_ParseStringCommand>
  NOS_Strip_UART_ParseStringCommand(&stripB,"&/Breathe/70/80/20/true/&/Rainbow/#0000ff/#7f00ff/60/false/&/Dots/#ffff00/60/true/&/Walking/#ffff00/5/70/false/&/Steady/#00ff00/false/&",136);
 8003526:	2288      	movs	r2, #136	@ 0x88
 8003528:	4621      	mov	r1, r4
 800352a:	487e      	ldr	r0, [pc, #504]	@ (8003724 <main+0x674>)
 800352c:	f7fd ffa8 	bl	8001480 <NOS_Strip_UART_ParseStringCommand>
  NOS_Strip_UART_ParseStringCommand(&stripC,"&/Breathe/70/80/20/true/&/Rainbow/#0000ff/#7f00ff/60/false/&/Dots/#ffff00/60/true/&/Walking/#ffff00/5/70/false/&/Steady/#00ff00/false/&",136);
 8003530:	2288      	movs	r2, #136	@ 0x88
 8003532:	4621      	mov	r1, r4
 8003534:	4650      	mov	r0, sl
 8003536:	f7fd ffa3 	bl	8001480 <NOS_Strip_UART_ParseStringCommand>
    if(tick)
 800353a:	4b7e      	ldr	r3, [pc, #504]	@ (8003734 <main+0x684>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	bb03      	cbnz	r3, 8003582 <main+0x4d2>
    if(NOS_UART_CheckReceive(&UART1))
 8003540:	487d      	ldr	r0, [pc, #500]	@ (8003738 <main+0x688>)
 8003542:	f7fe fba3 	bl	8001c8c <NOS_UART_CheckReceive>
 8003546:	2800      	cmp	r0, #0
 8003548:	d134      	bne.n	80035b4 <main+0x504>
    if(NOS_UART_CheckReceive(&UART2))
 800354a:	487c      	ldr	r0, [pc, #496]	@ (800373c <main+0x68c>)
 800354c:	f7fe fb9e 	bl	8001c8c <NOS_UART_CheckReceive>
 8003550:	2800      	cmp	r0, #0
 8003552:	d165      	bne.n	8003620 <main+0x570>
    if (NOS_TimeEvent_Check(&screenUpdateEvent))
 8003554:	487a      	ldr	r0, [pc, #488]	@ (8003740 <main+0x690>)
 8003556:	f7fe fa49 	bl	80019ec <NOS_TimeEvent_Check>
 800355a:	2800      	cmp	r0, #0
 800355c:	d0ed      	beq.n	800353a <main+0x48a>
      NOS_WS2812B_Strip_Update(&stripA);
 800355e:	4879      	ldr	r0, [pc, #484]	@ (8003744 <main+0x694>)
 8003560:	f7fe fbe4 	bl	8001d2c <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripB);
 8003564:	486f      	ldr	r0, [pc, #444]	@ (8003724 <main+0x674>)
 8003566:	f7fe fbe1 	bl	8001d2c <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripC);
 800356a:	4877      	ldr	r0, [pc, #476]	@ (8003748 <main+0x698>)
 800356c:	f7fe fbde 	bl	8001d2c <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripD);
 8003570:	486d      	ldr	r0, [pc, #436]	@ (8003728 <main+0x678>)
 8003572:	f7fe fbdb 	bl	8001d2c <NOS_WS2812B_Strip_Update>
      visHandle();
 8003576:	f7ff f8c3 	bl	8002700 <visHandle>
      NOS_TimeEvent_FinishEvent(&screenUpdateEvent);
 800357a:	4871      	ldr	r0, [pc, #452]	@ (8003740 <main+0x690>)
 800357c:	f7fe fa3d 	bl	80019fa <NOS_TimeEvent_FinishEvent>
 8003580:	e7db      	b.n	800353a <main+0x48a>
          NOS_UART_Timer_Handler(&UART2);
 8003582:	486e      	ldr	r0, [pc, #440]	@ (800373c <main+0x68c>)
 8003584:	f7fe fa76 	bl	8001a74 <NOS_UART_Timer_Handler>
          NOS_UART_Timer_Handler(&UART1);
 8003588:	486b      	ldr	r0, [pc, #428]	@ (8003738 <main+0x688>)
 800358a:	f7fe fa73 	bl	8001a74 <NOS_UART_Timer_Handler>
          NOS_TimeEvent_TickHandler(&screenUpdateEvent);
 800358e:	486c      	ldr	r0, [pc, #432]	@ (8003740 <main+0x690>)
 8003590:	f7fe fa21 	bl	80019d6 <NOS_TimeEvent_TickHandler>
          NOS_WS2812B_Strip_Effects_Handler(&stripA);
 8003594:	486b      	ldr	r0, [pc, #428]	@ (8003744 <main+0x694>)
 8003596:	f7ff f83f 	bl	8002618 <NOS_WS2812B_Strip_Effects_Handler>
          NOS_WS2812B_Strip_Effects_Handler(&stripB);
 800359a:	4862      	ldr	r0, [pc, #392]	@ (8003724 <main+0x674>)
 800359c:	f7ff f83c 	bl	8002618 <NOS_WS2812B_Strip_Effects_Handler>
          NOS_WS2812B_Strip_Effects_Handler(&stripC);
 80035a0:	4869      	ldr	r0, [pc, #420]	@ (8003748 <main+0x698>)
 80035a2:	f7ff f839 	bl	8002618 <NOS_WS2812B_Strip_Effects_Handler>
          NOS_WS2812B_Strip_Effects_Handler(&stripD);
 80035a6:	4860      	ldr	r0, [pc, #384]	@ (8003728 <main+0x678>)
 80035a8:	f7ff f836 	bl	8002618 <NOS_WS2812B_Strip_Effects_Handler>
          tick = false;
 80035ac:	4b61      	ldr	r3, [pc, #388]	@ (8003734 <main+0x684>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]
 80035b2:	e7c5      	b.n	8003540 <main+0x490>
      if(NOS_Strip_UART_ParseStringCommand(&stripA,UART1.rx_buff,UART1.lastMessageSize))
 80035b4:	4960      	ldr	r1, [pc, #384]	@ (8003738 <main+0x688>)
 80035b6:	f8b1 262a 	ldrh.w	r2, [r1, #1578]	@ 0x62a
 80035ba:	f501 7105 	add.w	r1, r1, #532	@ 0x214
 80035be:	4861      	ldr	r0, [pc, #388]	@ (8003744 <main+0x694>)
 80035c0:	f7fd ff5e 	bl	8001480 <NOS_Strip_UART_ParseStringCommand>
 80035c4:	b9b0      	cbnz	r0, 80035f4 <main+0x544>
      NOS_UART_EndReceive(&UART1);
 80035c6:	485c      	ldr	r0, [pc, #368]	@ (8003738 <main+0x688>)
 80035c8:	f7fe fb63 	bl	8001c92 <NOS_UART_EndReceive>
      HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80035cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80035d0:	485e      	ldr	r0, [pc, #376]	@ (800374c <main+0x69c>)
 80035d2:	f000 fc2c 	bl	8003e2e <HAL_GPIO_TogglePin>
      NOS_WS2812B_Strip_Update(&stripA);
 80035d6:	485b      	ldr	r0, [pc, #364]	@ (8003744 <main+0x694>)
 80035d8:	f7fe fba8 	bl	8001d2c <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripB);
 80035dc:	4851      	ldr	r0, [pc, #324]	@ (8003724 <main+0x674>)
 80035de:	f7fe fba5 	bl	8001d2c <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripC);
 80035e2:	4859      	ldr	r0, [pc, #356]	@ (8003748 <main+0x698>)
 80035e4:	f7fe fba2 	bl	8001d2c <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripD);
 80035e8:	484f      	ldr	r0, [pc, #316]	@ (8003728 <main+0x678>)
 80035ea:	f7fe fb9f 	bl	8001d2c <NOS_WS2812B_Strip_Update>
      visHandle();
 80035ee:	f7ff f887 	bl	8002700 <visHandle>
 80035f2:	e7aa      	b.n	800354a <main+0x49a>
        NOS_Strip_UART_ParseStringCommand(&stripB,UART1.rx_buff,UART1.lastMessageSize);
 80035f4:	4c50      	ldr	r4, [pc, #320]	@ (8003738 <main+0x688>)
 80035f6:	f504 7505 	add.w	r5, r4, #532	@ 0x214
 80035fa:	f8b4 262a 	ldrh.w	r2, [r4, #1578]	@ 0x62a
 80035fe:	4629      	mov	r1, r5
 8003600:	4848      	ldr	r0, [pc, #288]	@ (8003724 <main+0x674>)
 8003602:	f7fd ff3d 	bl	8001480 <NOS_Strip_UART_ParseStringCommand>
        NOS_Strip_UART_ParseStringCommand(&stripC,UART1.rx_buff,UART1.lastMessageSize);
 8003606:	f8b4 262a 	ldrh.w	r2, [r4, #1578]	@ 0x62a
 800360a:	4629      	mov	r1, r5
 800360c:	484e      	ldr	r0, [pc, #312]	@ (8003748 <main+0x698>)
 800360e:	f7fd ff37 	bl	8001480 <NOS_Strip_UART_ParseStringCommand>
        NOS_Strip_UART_ParseStringCommand(&stripD,UART1.rx_buff,UART1.lastMessageSize);
 8003612:	f8b4 262a 	ldrh.w	r2, [r4, #1578]	@ 0x62a
 8003616:	4629      	mov	r1, r5
 8003618:	4843      	ldr	r0, [pc, #268]	@ (8003728 <main+0x678>)
 800361a:	f7fd ff31 	bl	8001480 <NOS_Strip_UART_ParseStringCommand>
 800361e:	e7d2      	b.n	80035c6 <main+0x516>
      if(NOS_UART_ParsePacket(&UART2,&lastMessage)) 
 8003620:	494b      	ldr	r1, [pc, #300]	@ (8003750 <main+0x6a0>)
 8003622:	4846      	ldr	r0, [pc, #280]	@ (800373c <main+0x68c>)
 8003624:	f7fe fa7d 	bl	8001b22 <NOS_UART_ParsePacket>
 8003628:	2800      	cmp	r0, #0
 800362a:	d034      	beq.n	8003696 <main+0x5e6>
      switch (lastMessage.channel.data)
 800362c:	4b48      	ldr	r3, [pc, #288]	@ (8003750 <main+0x6a0>)
 800362e:	885b      	ldrh	r3, [r3, #2]
 8003630:	3b01      	subs	r3, #1
 8003632:	2b04      	cmp	r3, #4
 8003634:	d82f      	bhi.n	8003696 <main+0x5e6>
 8003636:	e8df f003 	tbb	[pc, r3]
 800363a:	4903      	.short	0x4903
 800363c:	5f54      	.short	0x5f54
 800363e:	6a          	.byte	0x6a
 800363f:	00          	.byte	0x00
          NOS_Strip_UART_ParseCommand(&stripA,&lastMessage);
 8003640:	4d43      	ldr	r5, [pc, #268]	@ (8003750 <main+0x6a0>)
 8003642:	4c40      	ldr	r4, [pc, #256]	@ (8003744 <main+0x694>)
 8003644:	4629      	mov	r1, r5
 8003646:	4620      	mov	r0, r4
 8003648:	f7fd fb69 	bl	8000d1e <NOS_Strip_UART_ParseCommand>
          NOS_Strip_UART_ParseCommand(&stripB,&lastMessage);
 800364c:	4629      	mov	r1, r5
 800364e:	4835      	ldr	r0, [pc, #212]	@ (8003724 <main+0x674>)
 8003650:	f7fd fb65 	bl	8000d1e <NOS_Strip_UART_ParseCommand>
          NOS_Strip_UART_ParseCommand(&stripC,&lastMessage);
 8003654:	4629      	mov	r1, r5
 8003656:	483c      	ldr	r0, [pc, #240]	@ (8003748 <main+0x698>)
 8003658:	f7fd fb61 	bl	8000d1e <NOS_Strip_UART_ParseCommand>
          NOS_Strip_UART_ParseCommand(&stripD,&lastMessage);
 800365c:	4629      	mov	r1, r5
 800365e:	4832      	ldr	r0, [pc, #200]	@ (8003728 <main+0x678>)
 8003660:	f7fd fb5d 	bl	8000d1e <NOS_Strip_UART_ParseCommand>
          NOS_WS2812B_Strip_Effect_Copy(&breatheA,&stripA.effects[0]);
 8003664:	f104 0110 	add.w	r1, r4, #16
 8003668:	483a      	ldr	r0, [pc, #232]	@ (8003754 <main+0x6a4>)
 800366a:	f7fe fd9c 	bl	80021a6 <NOS_WS2812B_Strip_Effect_Copy>
          NOS_WS2812B_Strip_Effect_Copy(&rainbowA,&stripA.effects[1]);
 800366e:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8003672:	4839      	ldr	r0, [pc, #228]	@ (8003758 <main+0x6a8>)
 8003674:	f7fe fd97 	bl	80021a6 <NOS_WS2812B_Strip_Effect_Copy>
          NOS_WS2812B_Strip_Effect_Copy(&dotsA,&stripA.effects[2]);
 8003678:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 800367c:	4837      	ldr	r0, [pc, #220]	@ (800375c <main+0x6ac>)
 800367e:	f7fe fd92 	bl	80021a6 <NOS_WS2812B_Strip_Effect_Copy>
          NOS_WS2812B_Strip_Effect_Copy(&walkingPixelA,&stripA.effects[3]);
 8003682:	f104 0194 	add.w	r1, r4, #148	@ 0x94
 8003686:	4836      	ldr	r0, [pc, #216]	@ (8003760 <main+0x6b0>)
 8003688:	f7fe fd8d 	bl	80021a6 <NOS_WS2812B_Strip_Effect_Copy>
          NOS_WS2812B_Strip_Effect_Copy(&steadyColorA,&stripA.effects[4]);
 800368c:	f104 01c0 	add.w	r1, r4, #192	@ 0xc0
 8003690:	4834      	ldr	r0, [pc, #208]	@ (8003764 <main+0x6b4>)
 8003692:	f7fe fd88 	bl	80021a6 <NOS_WS2812B_Strip_Effect_Copy>
      NOS_UART_EndReceive(&UART2);
 8003696:	4829      	ldr	r0, [pc, #164]	@ (800373c <main+0x68c>)
 8003698:	f7fe fafb 	bl	8001c92 <NOS_UART_EndReceive>
      HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800369c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80036a0:	482a      	ldr	r0, [pc, #168]	@ (800374c <main+0x69c>)
 80036a2:	f000 fbc4 	bl	8003e2e <HAL_GPIO_TogglePin>
      NOS_UART_PacketApprovedNotice(&lastMessage,&huart2);
 80036a6:	4930      	ldr	r1, [pc, #192]	@ (8003768 <main+0x6b8>)
 80036a8:	4829      	ldr	r0, [pc, #164]	@ (8003750 <main+0x6a0>)
 80036aa:	f7fe fa9c 	bl	8001be6 <NOS_UART_PacketApprovedNotice>
      NOS_WS2812B_Strip_Update(&stripA);
 80036ae:	4825      	ldr	r0, [pc, #148]	@ (8003744 <main+0x694>)
 80036b0:	f7fe fb3c 	bl	8001d2c <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripB);
 80036b4:	481b      	ldr	r0, [pc, #108]	@ (8003724 <main+0x674>)
 80036b6:	f7fe fb39 	bl	8001d2c <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripC);
 80036ba:	4823      	ldr	r0, [pc, #140]	@ (8003748 <main+0x698>)
 80036bc:	f7fe fb36 	bl	8001d2c <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripD);
 80036c0:	4819      	ldr	r0, [pc, #100]	@ (8003728 <main+0x678>)
 80036c2:	f7fe fb33 	bl	8001d2c <NOS_WS2812B_Strip_Update>
      visHandle();
 80036c6:	f7ff f81b 	bl	8002700 <visHandle>
 80036ca:	e743      	b.n	8003554 <main+0x4a4>
          NOS_Strip_UART_ParseCommand(&stripA,&lastMessage);
 80036cc:	4c1d      	ldr	r4, [pc, #116]	@ (8003744 <main+0x694>)
 80036ce:	4920      	ldr	r1, [pc, #128]	@ (8003750 <main+0x6a0>)
 80036d0:	4620      	mov	r0, r4
 80036d2:	f7fd fb24 	bl	8000d1e <NOS_Strip_UART_ParseCommand>
          NOS_WS2812B_Strip_Effect_Copy(&dotsA,&stripA.effects[2]);
 80036d6:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 80036da:	4820      	ldr	r0, [pc, #128]	@ (800375c <main+0x6ac>)
 80036dc:	f7fe fd63 	bl	80021a6 <NOS_WS2812B_Strip_Effect_Copy>
        break;
 80036e0:	e7d9      	b.n	8003696 <main+0x5e6>
          NOS_Strip_UART_ParseCommand(&stripB,&lastMessage);
 80036e2:	4c10      	ldr	r4, [pc, #64]	@ (8003724 <main+0x674>)
 80036e4:	491a      	ldr	r1, [pc, #104]	@ (8003750 <main+0x6a0>)
 80036e6:	4620      	mov	r0, r4
 80036e8:	f7fd fb19 	bl	8000d1e <NOS_Strip_UART_ParseCommand>
          NOS_WS2812B_Strip_Effect_Copy(&dotsA,&stripB.effects[2]);
 80036ec:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 80036f0:	481a      	ldr	r0, [pc, #104]	@ (800375c <main+0x6ac>)
 80036f2:	f7fe fd58 	bl	80021a6 <NOS_WS2812B_Strip_Effect_Copy>
        break;
 80036f6:	e7ce      	b.n	8003696 <main+0x5e6>
          NOS_Strip_UART_ParseCommand(&stripC,&lastMessage);
 80036f8:	4c13      	ldr	r4, [pc, #76]	@ (8003748 <main+0x698>)
 80036fa:	4915      	ldr	r1, [pc, #84]	@ (8003750 <main+0x6a0>)
 80036fc:	4620      	mov	r0, r4
 80036fe:	f7fd fb0e 	bl	8000d1e <NOS_Strip_UART_ParseCommand>
          NOS_WS2812B_Strip_Effect_Copy(&dotsA,&stripC.effects[2]);
 8003702:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 8003706:	4815      	ldr	r0, [pc, #84]	@ (800375c <main+0x6ac>)
 8003708:	f7fe fd4d 	bl	80021a6 <NOS_WS2812B_Strip_Effect_Copy>
        break;
 800370c:	e7c3      	b.n	8003696 <main+0x5e6>
          NOS_Strip_UART_ParseCommand(&stripD,&lastMessage);
 800370e:	4c06      	ldr	r4, [pc, #24]	@ (8003728 <main+0x678>)
 8003710:	490f      	ldr	r1, [pc, #60]	@ (8003750 <main+0x6a0>)
 8003712:	4620      	mov	r0, r4
 8003714:	f7fd fb03 	bl	8000d1e <NOS_Strip_UART_ParseCommand>
          NOS_WS2812B_Strip_Effect_Copy(&dotsA,&stripD.effects[2]);
 8003718:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 800371c:	480f      	ldr	r0, [pc, #60]	@ (800375c <main+0x6ac>)
 800371e:	f7fe fd42 	bl	80021a6 <NOS_WS2812B_Strip_Effect_Copy>
        break;
 8003722:	e7b8      	b.n	8003696 <main+0x5e6>
 8003724:	200043f0 	.word	0x200043f0
 8003728:	20004210 	.word	0x20004210
 800372c:	20000008 	.word	0x20000008
 8003730:	08008ca0 	.word	0x08008ca0
 8003734:	20001aa8 	.word	0x20001aa8
 8003738:	20001da0 	.word	0x20001da0
 800373c:	200023d8 	.word	0x200023d8
 8003740:	200045d0 	.word	0x200045d0
 8003744:	200044e0 	.word	0x200044e0
 8003748:	20004300 	.word	0x20004300
 800374c:	48000800 	.word	0x48000800
 8003750:	20001ab0 	.word	0x20001ab0
 8003754:	20001d74 	.word	0x20001d74
 8003758:	20001d48 	.word	0x20001d48
 800375c:	20001d1c 	.word	0x20001d1c
 8003760:	20001cf0 	.word	0x20001cf0
 8003764:	20001cc4 	.word	0x20001cc4
 8003768:	200045dc 	.word	0x200045dc

0800376c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800376c:	4b10      	ldr	r3, [pc, #64]	@ (80037b0 <HAL_InitTick+0x44>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b90b      	cbnz	r3, 8003776 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003772:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003774:	4770      	bx	lr
{
 8003776:	b510      	push	{r4, lr}
 8003778:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800377a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800377e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003782:	4a0c      	ldr	r2, [pc, #48]	@ (80037b4 <HAL_InitTick+0x48>)
 8003784:	6810      	ldr	r0, [r2, #0]
 8003786:	fbb0 f0f3 	udiv	r0, r0, r3
 800378a:	f000 f8a1 	bl	80038d0 <HAL_SYSTICK_Config>
 800378e:	b968      	cbnz	r0, 80037ac <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003790:	2c0f      	cmp	r4, #15
 8003792:	d901      	bls.n	8003798 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8003794:	2001      	movs	r0, #1
 8003796:	e00a      	b.n	80037ae <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003798:	2200      	movs	r2, #0
 800379a:	4621      	mov	r1, r4
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	f000 f882 	bl	80038a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037a4:	4b04      	ldr	r3, [pc, #16]	@ (80037b8 <HAL_InitTick+0x4c>)
 80037a6:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80037a8:	2000      	movs	r0, #0
 80037aa:	e000      	b.n	80037ae <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80037ac:	2001      	movs	r0, #1
}
 80037ae:	bd10      	pop	{r4, pc}
 80037b0:	2000000b 	.word	0x2000000b
 80037b4:	20000010 	.word	0x20000010
 80037b8:	2000000c 	.word	0x2000000c

080037bc <HAL_Init>:
{
 80037bc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037be:	2003      	movs	r0, #3
 80037c0:	f000 f860 	bl	8003884 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037c4:	200f      	movs	r0, #15
 80037c6:	f7ff ffd1 	bl	800376c <HAL_InitTick>
 80037ca:	b110      	cbz	r0, 80037d2 <HAL_Init+0x16>
    status = HAL_ERROR;
 80037cc:	2401      	movs	r4, #1
}
 80037ce:	4620      	mov	r0, r4
 80037d0:	bd10      	pop	{r4, pc}
 80037d2:	4604      	mov	r4, r0
    HAL_MspInit();
 80037d4:	f000 fb34 	bl	8003e40 <HAL_MspInit>
 80037d8:	e7f9      	b.n	80037ce <HAL_Init+0x12>
	...

080037dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80037dc:	4b03      	ldr	r3, [pc, #12]	@ (80037ec <HAL_IncTick+0x10>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	4a03      	ldr	r2, [pc, #12]	@ (80037f0 <HAL_IncTick+0x14>)
 80037e2:	6811      	ldr	r1, [r2, #0]
 80037e4:	440b      	add	r3, r1
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	2000000b 	.word	0x2000000b
 80037f0:	200048c0 	.word	0x200048c0

080037f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80037f4:	4b01      	ldr	r3, [pc, #4]	@ (80037fc <HAL_GetTick+0x8>)
 80037f6:	6818      	ldr	r0, [r3, #0]
}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	200048c0 	.word	0x200048c0

08003800 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8003800:	2800      	cmp	r0, #0
 8003802:	db07      	blt.n	8003814 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003804:	f000 021f 	and.w	r2, r0, #31
 8003808:	0940      	lsrs	r0, r0, #5
 800380a:	2301      	movs	r3, #1
 800380c:	4093      	lsls	r3, r2
 800380e:	4a02      	ldr	r2, [pc, #8]	@ (8003818 <__NVIC_EnableIRQ+0x18>)
 8003810:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000e100 	.word	0xe000e100

0800381c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800381c:	2800      	cmp	r0, #0
 800381e:	db08      	blt.n	8003832 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003820:	0109      	lsls	r1, r1, #4
 8003822:	b2c9      	uxtb	r1, r1
 8003824:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003828:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800382c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8003830:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003832:	f000 000f 	and.w	r0, r0, #15
 8003836:	0109      	lsls	r1, r1, #4
 8003838:	b2c9      	uxtb	r1, r1
 800383a:	4b01      	ldr	r3, [pc, #4]	@ (8003840 <__NVIC_SetPriority+0x24>)
 800383c:	5419      	strb	r1, [r3, r0]
  }
}
 800383e:	4770      	bx	lr
 8003840:	e000ed14 	.word	0xe000ed14

08003844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003844:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003846:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800384a:	f1c0 0c07 	rsb	ip, r0, #7
 800384e:	f1bc 0f04 	cmp.w	ip, #4
 8003852:	bf28      	it	cs
 8003854:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003858:	1d03      	adds	r3, r0, #4
 800385a:	2b06      	cmp	r3, #6
 800385c:	d90f      	bls.n	800387e <NVIC_EncodePriority+0x3a>
 800385e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003860:	f04f 3eff 	mov.w	lr, #4294967295
 8003864:	fa0e f00c 	lsl.w	r0, lr, ip
 8003868:	ea21 0100 	bic.w	r1, r1, r0
 800386c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800386e:	fa0e fe03 	lsl.w	lr, lr, r3
 8003872:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8003876:	ea41 0002 	orr.w	r0, r1, r2
 800387a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800387e:	2300      	movs	r3, #0
 8003880:	e7ee      	b.n	8003860 <NVIC_EncodePriority+0x1c>
	...

08003884 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003884:	4a07      	ldr	r2, [pc, #28]	@ (80038a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003886:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003888:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800388c:	041b      	lsls	r3, r3, #16
 800388e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003890:	0200      	lsls	r0, r0, #8
 8003892:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003896:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003898:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800389c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80038a0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80038a2:	4770      	bx	lr
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a8:	b510      	push	{r4, lr}
 80038aa:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038ac:	4b05      	ldr	r3, [pc, #20]	@ (80038c4 <HAL_NVIC_SetPriority+0x1c>)
 80038ae:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80038b4:	f7ff ffc6 	bl	8003844 <NVIC_EncodePriority>
 80038b8:	4601      	mov	r1, r0
 80038ba:	4620      	mov	r0, r4
 80038bc:	f7ff ffae 	bl	800381c <__NVIC_SetPriority>
}
 80038c0:	bd10      	pop	{r4, pc}
 80038c2:	bf00      	nop
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ca:	f7ff ff99 	bl	8003800 <__NVIC_EnableIRQ>
}
 80038ce:	bd08      	pop	{r3, pc}

080038d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d0:	3801      	subs	r0, #1
 80038d2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80038d6:	d20b      	bcs.n	80038f0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80038dc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038de:	4a05      	ldr	r2, [pc, #20]	@ (80038f4 <HAL_SYSTICK_Config+0x24>)
 80038e0:	21f0      	movs	r1, #240	@ 0xf0
 80038e2:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e6:	2000      	movs	r0, #0
 80038e8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ea:	2207      	movs	r2, #7
 80038ec:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ee:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80038f0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80038f2:	4770      	bx	lr
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f8:	b430      	push	{r4, r5}
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038fa:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80038fc:	f004 0c1c 	and.w	ip, r4, #28
 8003900:	2401      	movs	r4, #1
 8003902:	fa04 f40c 	lsl.w	r4, r4, ip
 8003906:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8003908:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800390a:	6804      	ldr	r4, [r0, #0]
 800390c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800390e:	6883      	ldr	r3, [r0, #8]
 8003910:	2b10      	cmp	r3, #16
 8003912:	d005      	beq.n	8003920 <DMA_SetConfig+0x28>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003914:	6803      	ldr	r3, [r0, #0]
 8003916:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003918:	6803      	ldr	r3, [r0, #0]
 800391a:	60da      	str	r2, [r3, #12]
  }
}
 800391c:	bc30      	pop	{r4, r5}
 800391e:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003920:	6803      	ldr	r3, [r0, #0]
 8003922:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003924:	6803      	ldr	r3, [r0, #0]
 8003926:	60d9      	str	r1, [r3, #12]
 8003928:	e7f8      	b.n	800391c <DMA_SetConfig+0x24>
	...

0800392c <HAL_DMA_Init>:
  if (hdma == NULL)
 800392c:	2800      	cmp	r0, #0
 800392e:	d073      	beq.n	8003a18 <HAL_DMA_Init+0xec>
{
 8003930:	b410      	push	{r4}
 8003932:	4603      	mov	r3, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003934:	6800      	ldr	r0, [r0, #0]
 8003936:	4a39      	ldr	r2, [pc, #228]	@ (8003a1c <HAL_DMA_Init+0xf0>)
 8003938:	4290      	cmp	r0, r2
 800393a:	d84a      	bhi.n	80039d2 <HAL_DMA_Init+0xa6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800393c:	4a38      	ldr	r2, [pc, #224]	@ (8003a20 <HAL_DMA_Init+0xf4>)
 800393e:	4402      	add	r2, r0
 8003940:	4938      	ldr	r1, [pc, #224]	@ (8003a24 <HAL_DMA_Init+0xf8>)
 8003942:	fba1 1202 	umull	r1, r2, r1, r2
 8003946:	0912      	lsrs	r2, r2, #4
 8003948:	0092      	lsls	r2, r2, #2
 800394a:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800394c:	4a36      	ldr	r2, [pc, #216]	@ (8003a28 <HAL_DMA_Init+0xfc>)
 800394e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp = hdma->Instance->CCR;
 8003956:	6801      	ldr	r1, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003958:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800395c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmp |=  hdma->Init.Direction        |
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	68dc      	ldr	r4, [r3, #12]
 8003964:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003966:	691c      	ldr	r4, [r3, #16]
 8003968:	4322      	orrs	r2, r4
 800396a:	695c      	ldr	r4, [r3, #20]
 800396c:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800396e:	699c      	ldr	r4, [r3, #24]
 8003970:	4322      	orrs	r2, r4
 8003972:	69dc      	ldr	r4, [r3, #28]
 8003974:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8003976:	6a1c      	ldr	r4, [r3, #32]
 8003978:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 800397a:	430a      	orrs	r2, r1
  hdma->Instance->CCR = tmp;
 800397c:	6002      	str	r2, [r0, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8003984:	d01b      	beq.n	80039be <HAL_DMA_Init+0x92>
    if (DMA1 == hdma->DmaBaseAddress)
 8003986:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003988:	4a27      	ldr	r2, [pc, #156]	@ (8003a28 <HAL_DMA_Init+0xfc>)
 800398a:	4291      	cmp	r1, r2
 800398c:	d02c      	beq.n	80039e8 <HAL_DMA_Init+0xbc>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800398e:	4a26      	ldr	r2, [pc, #152]	@ (8003a28 <HAL_DMA_Init+0xfc>)
 8003990:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	@ 0x4a8
 8003994:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8003996:	f000 0c1c 	and.w	ip, r0, #28
 800399a:	200f      	movs	r0, #15
 800399c:	fa00 f00c 	lsl.w	r0, r0, ip
 80039a0:	ea21 0100 	bic.w	r1, r1, r0
 80039a4:	f8c2 14a8 	str.w	r1, [r2, #1192]	@ 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80039a8:	f8d2 14a8 	ldr.w	r1, [r2, #1192]	@ 0x4a8
 80039ac:	6858      	ldr	r0, [r3, #4]
 80039ae:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80039b0:	f004 0c1c 	and.w	ip, r4, #28
 80039b4:	fa00 f00c 	lsl.w	r0, r0, ip
 80039b8:	4301      	orrs	r1, r0
 80039ba:	f8c2 14a8 	str.w	r1, [r2, #1192]	@ 0x4a8
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039be:	2000      	movs	r0, #0
 80039c0:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  hdma->Lock = HAL_UNLOCKED;
 80039c8:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
}
 80039cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039d0:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80039d2:	4a16      	ldr	r2, [pc, #88]	@ (8003a2c <HAL_DMA_Init+0x100>)
 80039d4:	4402      	add	r2, r0
 80039d6:	4913      	ldr	r1, [pc, #76]	@ (8003a24 <HAL_DMA_Init+0xf8>)
 80039d8:	fba1 1202 	umull	r1, r2, r1, r2
 80039dc:	0912      	lsrs	r2, r2, #4
 80039de:	0092      	lsls	r2, r2, #2
 80039e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80039e2:	4a13      	ldr	r2, [pc, #76]	@ (8003a30 <HAL_DMA_Init+0x104>)
 80039e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80039e6:	e7b3      	b.n	8003950 <HAL_DMA_Init+0x24>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80039e8:	f8d2 10a8 	ldr.w	r1, [r2, #168]	@ 0xa8
 80039ec:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80039ee:	f000 0c1c 	and.w	ip, r0, #28
 80039f2:	200f      	movs	r0, #15
 80039f4:	fa00 f00c 	lsl.w	r0, r0, ip
 80039f8:	ea21 0100 	bic.w	r1, r1, r0
 80039fc:	f8c2 10a8 	str.w	r1, [r2, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a00:	f8d2 10a8 	ldr.w	r1, [r2, #168]	@ 0xa8
 8003a04:	6858      	ldr	r0, [r3, #4]
 8003a06:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8003a08:	f004 0c1c 	and.w	ip, r4, #28
 8003a0c:	fa00 f00c 	lsl.w	r0, r0, ip
 8003a10:	4301      	orrs	r1, r0
 8003a12:	f8c2 10a8 	str.w	r1, [r2, #168]	@ 0xa8
 8003a16:	e7d2      	b.n	80039be <HAL_DMA_Init+0x92>
    return HAL_ERROR;
 8003a18:	2001      	movs	r0, #1
}
 8003a1a:	4770      	bx	lr
 8003a1c:	40020407 	.word	0x40020407
 8003a20:	bffdfff8 	.word	0xbffdfff8
 8003a24:	cccccccd 	.word	0xcccccccd
 8003a28:	40020000 	.word	0x40020000
 8003a2c:	bffdfbf8 	.word	0xbffdfbf8
 8003a30:	40020400 	.word	0x40020400

08003a34 <HAL_DMA_Start>:
{
 8003a34:	b570      	push	{r4, r5, r6, lr}
 8003a36:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003a38:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8003a3c:	2801      	cmp	r0, #1
 8003a3e:	d020      	beq.n	8003a82 <HAL_DMA_Start+0x4e>
 8003a40:	2001      	movs	r0, #1
 8003a42:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8003a46:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 8003a4a:	b2c0      	uxtb	r0, r0
 8003a4c:	2801      	cmp	r0, #1
 8003a4e:	d004      	beq.n	8003a5a <HAL_DMA_Start+0x26>
    __HAL_UNLOCK(hdma);
 8003a50:	2300      	movs	r3, #0
 8003a52:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_BUSY;
 8003a56:	2002      	movs	r0, #2
}
 8003a58:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a5a:	2002      	movs	r0, #2
 8003a5c:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a60:	2500      	movs	r5, #0
 8003a62:	63e5      	str	r5, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003a64:	6826      	ldr	r6, [r4, #0]
 8003a66:	6830      	ldr	r0, [r6, #0]
 8003a68:	f020 0001 	bic.w	r0, r0, #1
 8003a6c:	6030      	str	r0, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f7ff ff42 	bl	80038f8 <DMA_SetConfig>
    __HAL_DMA_ENABLE(hdma);
 8003a74:	6822      	ldr	r2, [r4, #0]
 8003a76:	6813      	ldr	r3, [r2, #0]
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7e:	4628      	mov	r0, r5
 8003a80:	e7ea      	b.n	8003a58 <HAL_DMA_Start+0x24>
  __HAL_LOCK(hdma);
 8003a82:	2002      	movs	r0, #2
 8003a84:	e7e8      	b.n	8003a58 <HAL_DMA_Start+0x24>

08003a86 <HAL_DMA_Start_IT>:
{
 8003a86:	b538      	push	{r3, r4, r5, lr}
 8003a88:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003a8a:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8003a8e:	2801      	cmp	r0, #1
 8003a90:	d032      	beq.n	8003af8 <HAL_DMA_Start_IT+0x72>
 8003a92:	2001      	movs	r0, #1
 8003a94:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8003a98:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 8003a9c:	b2c0      	uxtb	r0, r0
 8003a9e:	2801      	cmp	r0, #1
 8003aa0:	d004      	beq.n	8003aac <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_BUSY;
 8003aa8:	2002      	movs	r0, #2
}
 8003aaa:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aac:	2002      	movs	r0, #2
 8003aae:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003ab6:	6825      	ldr	r5, [r4, #0]
 8003ab8:	6828      	ldr	r0, [r5, #0]
 8003aba:	f020 0001 	bic.w	r0, r0, #1
 8003abe:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f7ff ff19 	bl	80038f8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003ac6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003ac8:	b15b      	cbz	r3, 8003ae2 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aca:	6822      	ldr	r2, [r4, #0]
 8003acc:	6813      	ldr	r3, [r2, #0]
 8003ace:	f043 030e 	orr.w	r3, r3, #14
 8003ad2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003ad4:	6822      	ldr	r2, [r4, #0]
 8003ad6:	6813      	ldr	r3, [r2, #0]
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ade:	2000      	movs	r0, #0
 8003ae0:	e7e3      	b.n	8003aaa <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ae2:	6822      	ldr	r2, [r4, #0]
 8003ae4:	6813      	ldr	r3, [r2, #0]
 8003ae6:	f023 0304 	bic.w	r3, r3, #4
 8003aea:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003aec:	6822      	ldr	r2, [r4, #0]
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	f043 030a 	orr.w	r3, r3, #10
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	e7ed      	b.n	8003ad4 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8003af8:	2002      	movs	r0, #2
 8003afa:	e7d6      	b.n	8003aaa <HAL_DMA_Start_IT+0x24>

08003afc <HAL_DMA_Abort>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003afc:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d006      	beq.n	8003b14 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b06:	2304      	movs	r3, #4
 8003b08:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8003b10:	2001      	movs	r0, #1
 8003b12:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b14:	6802      	ldr	r2, [r0, #0]
 8003b16:	6813      	ldr	r3, [r2, #0]
 8003b18:	f023 030e 	bic.w	r3, r3, #14
 8003b1c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003b1e:	6802      	ldr	r2, [r0, #0]
 8003b20:	6813      	ldr	r3, [r2, #0]
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b28:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003b2a:	f003 031c 	and.w	r3, r3, #28
 8003b2e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003b30:	2201      	movs	r2, #1
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003b38:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    return status;
 8003b42:	4618      	mov	r0, r3
}
 8003b44:	4770      	bx	lr

08003b46 <HAL_DMA_Abort_IT>:
{
 8003b46:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003b48:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d003      	beq.n	8003b5a <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b52:	2304      	movs	r3, #4
 8003b54:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8003b56:	2001      	movs	r0, #1
}
 8003b58:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b5a:	6802      	ldr	r2, [r0, #0]
 8003b5c:	6813      	ldr	r3, [r2, #0]
 8003b5e:	f023 030e 	bic.w	r3, r3, #14
 8003b62:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003b64:	6802      	ldr	r2, [r0, #0]
 8003b66:	6813      	ldr	r3, [r2, #0]
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b6e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003b70:	f003 031c 	and.w	r3, r3, #28
 8003b74:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003b76:	2201      	movs	r2, #1
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003b7e:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8003b82:	2300      	movs	r3, #0
 8003b84:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8003b88:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003b8a:	b113      	cbz	r3, 8003b92 <HAL_DMA_Abort_IT+0x4c>
      hdma->XferAbortCallback(hdma);
 8003b8c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003b8e:	2000      	movs	r0, #0
 8003b90:	e7e2      	b.n	8003b58 <HAL_DMA_Abort_IT+0x12>
 8003b92:	2000      	movs	r0, #0
 8003b94:	e7e0      	b.n	8003b58 <HAL_DMA_Abort_IT+0x12>

08003b96 <HAL_DMA_IRQHandler>:
{
 8003b96:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b98:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003b9a:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003b9c:	6804      	ldr	r4, [r0, #0]
 8003b9e:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ba0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003ba2:	f003 031c 	and.w	r3, r3, #28
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	409a      	lsls	r2, r3
 8003baa:	420a      	tst	r2, r1
 8003bac:	d015      	beq.n	8003bda <HAL_DMA_IRQHandler+0x44>
 8003bae:	f015 0f04 	tst.w	r5, #4
 8003bb2:	d012      	beq.n	8003bda <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	f013 0f20 	tst.w	r3, #32
 8003bba:	d103      	bne.n	8003bc4 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bbc:	6823      	ldr	r3, [r4, #0]
 8003bbe:	f023 0304 	bic.w	r3, r3, #4
 8003bc2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003bc4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003bc6:	f003 021c 	and.w	r2, r3, #28
 8003bca:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003bcc:	2304      	movs	r3, #4
 8003bce:	4093      	lsls	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8003bd2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003bd4:	b103      	cbz	r3, 8003bd8 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8003bd6:	4798      	blx	r3
}
 8003bd8:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003bda:	2202      	movs	r2, #2
 8003bdc:	409a      	lsls	r2, r3
 8003bde:	420a      	tst	r2, r1
 8003be0:	d01c      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x86>
 8003be2:	f015 0f02 	tst.w	r5, #2
 8003be6:	d019      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	f013 0f20 	tst.w	r3, #32
 8003bee:	d106      	bne.n	8003bfe <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	f023 030a 	bic.w	r3, r3, #10
 8003bf6:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bfe:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003c00:	f003 021c 	and.w	r2, r3, #28
 8003c04:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003c06:	2302      	movs	r3, #2
 8003c08:	4093      	lsls	r3, r2
 8003c0a:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8003c12:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0df      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8003c18:	4798      	blx	r3
 8003c1a:	e7dd      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	420b      	tst	r3, r1
 8003c24:	d0d8      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x42>
 8003c26:	f015 0f08 	tst.w	r5, #8
 8003c2a:	d0d5      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	f023 030e 	bic.w	r3, r3, #14
 8003c32:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c34:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003c36:	f003 031c 	and.w	r3, r3, #28
 8003c3a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c44:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003c46:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8003c50:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0c0      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003c56:	4798      	blx	r3
  return;
 8003c58:	e7be      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x42>
	...

08003c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c5e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8003c60:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c62:	e062      	b.n	8003d2a <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c64:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c66:	005e      	lsls	r6, r3, #1
 8003c68:	2403      	movs	r4, #3
 8003c6a:	40b4      	lsls	r4, r6
 8003c6c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c70:	68cc      	ldr	r4, [r1, #12]
 8003c72:	40b4      	lsls	r4, r6
 8003c74:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003c76:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c78:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c7a:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c7e:	684c      	ldr	r4, [r1, #4]
 8003c80:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003c84:	409c      	lsls	r4, r3
 8003c86:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003c88:	6044      	str	r4, [r0, #4]
 8003c8a:	e05f      	b.n	8003d4c <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c8c:	08dd      	lsrs	r5, r3, #3
 8003c8e:	3508      	adds	r5, #8
 8003c90:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c94:	f003 0c07 	and.w	ip, r3, #7
 8003c98:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003c9c:	f04f 0e0f 	mov.w	lr, #15
 8003ca0:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003ca4:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ca8:	690c      	ldr	r4, [r1, #16]
 8003caa:	fa04 f40c 	lsl.w	r4, r4, ip
 8003cae:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003cb2:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003cb6:	e060      	b.n	8003d7a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cb8:	2404      	movs	r4, #4
 8003cba:	e000      	b.n	8003cbe <HAL_GPIO_Init+0x62>
 8003cbc:	2400      	movs	r4, #0
 8003cbe:	fa04 f40e 	lsl.w	r4, r4, lr
 8003cc2:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cc4:	f10c 0c02 	add.w	ip, ip, #2
 8003cc8:	4d52      	ldr	r5, [pc, #328]	@ (8003e14 <HAL_GPIO_Init+0x1b8>)
 8003cca:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cce:	4c52      	ldr	r4, [pc, #328]	@ (8003e18 <HAL_GPIO_Init+0x1bc>)
 8003cd0:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8003cd2:	43d4      	mvns	r4, r2
 8003cd4:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cd8:	684f      	ldr	r7, [r1, #4]
 8003cda:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 8003cde:	d001      	beq.n	8003ce4 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8003ce0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003ce4:	4d4c      	ldr	r5, [pc, #304]	@ (8003e18 <HAL_GPIO_Init+0x1bc>)
 8003ce6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8003ce8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8003cea:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cee:	684f      	ldr	r7, [r1, #4]
 8003cf0:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 8003cf4:	d001      	beq.n	8003cfa <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8003cf6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003cfa:	4d47      	ldr	r5, [pc, #284]	@ (8003e18 <HAL_GPIO_Init+0x1bc>)
 8003cfc:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cfe:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003d00:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d04:	684f      	ldr	r7, [r1, #4]
 8003d06:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8003d0a:	d001      	beq.n	8003d10 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8003d0c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8003d10:	4d41      	ldr	r5, [pc, #260]	@ (8003e18 <HAL_GPIO_Init+0x1bc>)
 8003d12:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 8003d14:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8003d16:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d18:	684e      	ldr	r6, [r1, #4]
 8003d1a:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8003d1e:	d001      	beq.n	8003d24 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8003d20:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8003d24:	4a3c      	ldr	r2, [pc, #240]	@ (8003e18 <HAL_GPIO_Init+0x1bc>)
 8003d26:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8003d28:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d2a:	680a      	ldr	r2, [r1, #0]
 8003d2c:	fa32 f403 	lsrs.w	r4, r2, r3
 8003d30:	d06e      	beq.n	8003e10 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d32:	f04f 0c01 	mov.w	ip, #1
 8003d36:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8003d3a:	ea1c 0202 	ands.w	r2, ip, r2
 8003d3e:	d0f3      	beq.n	8003d28 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d40:	684c      	ldr	r4, [r1, #4]
 8003d42:	f004 0403 	and.w	r4, r4, #3
 8003d46:	3c01      	subs	r4, #1
 8003d48:	2c01      	cmp	r4, #1
 8003d4a:	d98b      	bls.n	8003c64 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d4c:	684c      	ldr	r4, [r1, #4]
 8003d4e:	f004 0403 	and.w	r4, r4, #3
 8003d52:	2c03      	cmp	r4, #3
 8003d54:	d00c      	beq.n	8003d70 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8003d56:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d58:	005d      	lsls	r5, r3, #1
 8003d5a:	f04f 0c03 	mov.w	ip, #3
 8003d5e:	fa0c fc05 	lsl.w	ip, ip, r5
 8003d62:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d66:	688c      	ldr	r4, [r1, #8]
 8003d68:	40ac      	lsls	r4, r5
 8003d6a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8003d6e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d70:	684c      	ldr	r4, [r1, #4]
 8003d72:	f004 0403 	and.w	r4, r4, #3
 8003d76:	2c02      	cmp	r4, #2
 8003d78:	d088      	beq.n	8003c8c <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8003d7a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d7c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003d80:	f04f 0c03 	mov.w	ip, #3
 8003d84:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003d88:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d8c:	684c      	ldr	r4, [r1, #4]
 8003d8e:	f004 0403 	and.w	r4, r4, #3
 8003d92:	fa04 f40e 	lsl.w	r4, r4, lr
 8003d96:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003d9a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d9c:	684c      	ldr	r4, [r1, #4]
 8003d9e:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8003da2:	d0c1      	beq.n	8003d28 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da4:	4c1d      	ldr	r4, [pc, #116]	@ (8003e1c <HAL_GPIO_Init+0x1c0>)
 8003da6:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8003da8:	f045 0501 	orr.w	r5, r5, #1
 8003dac:	6625      	str	r5, [r4, #96]	@ 0x60
 8003dae:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 8003db0:	f004 0401 	and.w	r4, r4, #1
 8003db4:	9401      	str	r4, [sp, #4]
 8003db6:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003db8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003dbc:	f10c 0502 	add.w	r5, ip, #2
 8003dc0:	4c14      	ldr	r4, [pc, #80]	@ (8003e14 <HAL_GPIO_Init+0x1b8>)
 8003dc2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dc6:	f003 0e03 	and.w	lr, r3, #3
 8003dca:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003dce:	240f      	movs	r4, #15
 8003dd0:	fa04 f40e 	lsl.w	r4, r4, lr
 8003dd4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dd8:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8003ddc:	f43f af6e 	beq.w	8003cbc <HAL_GPIO_Init+0x60>
 8003de0:	4c0f      	ldr	r4, [pc, #60]	@ (8003e20 <HAL_GPIO_Init+0x1c4>)
 8003de2:	42a0      	cmp	r0, r4
 8003de4:	d00e      	beq.n	8003e04 <HAL_GPIO_Init+0x1a8>
 8003de6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003dea:	42a0      	cmp	r0, r4
 8003dec:	d00c      	beq.n	8003e08 <HAL_GPIO_Init+0x1ac>
 8003dee:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003df2:	42a0      	cmp	r0, r4
 8003df4:	d00a      	beq.n	8003e0c <HAL_GPIO_Init+0x1b0>
 8003df6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003dfa:	42a0      	cmp	r0, r4
 8003dfc:	f43f af5c 	beq.w	8003cb8 <HAL_GPIO_Init+0x5c>
 8003e00:	2407      	movs	r4, #7
 8003e02:	e75c      	b.n	8003cbe <HAL_GPIO_Init+0x62>
 8003e04:	2401      	movs	r4, #1
 8003e06:	e75a      	b.n	8003cbe <HAL_GPIO_Init+0x62>
 8003e08:	2402      	movs	r4, #2
 8003e0a:	e758      	b.n	8003cbe <HAL_GPIO_Init+0x62>
 8003e0c:	2403      	movs	r4, #3
 8003e0e:	e756      	b.n	8003cbe <HAL_GPIO_Init+0x62>
  }
}
 8003e10:	b003      	add	sp, #12
 8003e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e14:	40010000 	.word	0x40010000
 8003e18:	40010400 	.word	0x40010400
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	48000400 	.word	0x48000400

08003e24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e24:	b10a      	cbz	r2, 8003e2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e26:	6181      	str	r1, [r0, #24]
 8003e28:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e2a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8003e2c:	4770      	bx	lr

08003e2e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e2e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e30:	ea01 0203 	and.w	r2, r1, r3
 8003e34:	ea21 0103 	bic.w	r1, r1, r3
 8003e38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003e3c:	6181      	str	r1, [r0, #24]
}
 8003e3e:	4770      	bx	lr

08003e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e40:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e42:	4b0a      	ldr	r3, [pc, #40]	@ (8003e6c <HAL_MspInit+0x2c>)
 8003e44:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	661a      	str	r2, [r3, #96]	@ 0x60
 8003e4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e4e:	f002 0201 	and.w	r2, r2, #1
 8003e52:	9200      	str	r2, [sp, #0]
 8003e54:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e56:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003e58:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003e5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e64:	9301      	str	r3, [sp, #4]
 8003e66:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e68:	b002      	add	sp, #8
 8003e6a:	4770      	bx	lr
 8003e6c:	40021000 	.word	0x40021000

08003e70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e70:	b500      	push	{lr}
 8003e72:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e74:	2300      	movs	r3, #0
 8003e76:	9303      	str	r3, [sp, #12]
 8003e78:	9304      	str	r3, [sp, #16]
 8003e7a:	9305      	str	r3, [sp, #20]
 8003e7c:	9306      	str	r3, [sp, #24]
 8003e7e:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8003e80:	6802      	ldr	r2, [r0, #0]
 8003e82:	4b14      	ldr	r3, [pc, #80]	@ (8003ed4 <HAL_SPI_MspInit+0x64>)
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d002      	beq.n	8003e8e <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003e88:	b009      	add	sp, #36	@ 0x24
 8003e8a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003e8e:	f503 33ec 	add.w	r3, r3, #120832	@ 0x1d800
 8003e92:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003e94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e98:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e9a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003e9c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003ea0:	9201      	str	r2, [sp, #4]
 8003ea2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ea4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ea6:	f042 0202 	orr.w	r2, r2, #2
 8003eaa:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	9302      	str	r3, [sp, #8]
 8003eb4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003eb6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003eba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ec4:	2305      	movs	r3, #5
 8003ec6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec8:	a903      	add	r1, sp, #12
 8003eca:	4803      	ldr	r0, [pc, #12]	@ (8003ed8 <HAL_SPI_MspInit+0x68>)
 8003ecc:	f7ff fec6 	bl	8003c5c <HAL_GPIO_Init>
}
 8003ed0:	e7da      	b.n	8003e88 <HAL_SPI_MspInit+0x18>
 8003ed2:	bf00      	nop
 8003ed4:	40003800 	.word	0x40003800
 8003ed8:	48000400 	.word	0x48000400

08003edc <HAL_TIM_OC_MspInit>:
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
  if(htim_oc->Instance==TIM1)
 8003edc:	6802      	ldr	r2, [r0, #0]
 8003ede:	4b09      	ldr	r3, [pc, #36]	@ (8003f04 <HAL_TIM_OC_MspInit+0x28>)
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d000      	beq.n	8003ee6 <HAL_TIM_OC_MspInit+0xa>
 8003ee4:	4770      	bx	lr
{
 8003ee6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ee8:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8003eec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003eee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ef2:	661a      	str	r2, [r3, #96]	@ 0x60
 8003ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003efe:	b002      	add	sp, #8
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40012c00 	.word	0x40012c00

08003f08 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8003f08:	6803      	ldr	r3, [r0, #0]
 8003f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0e:	d000      	beq.n	8003f12 <HAL_TIM_PWM_MspInit+0xa>
 8003f10:	4770      	bx	lr
{
 8003f12:	b510      	push	{r4, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	4604      	mov	r4, r0
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f18:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8003f1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	9b01      	ldr	r3, [sp, #4]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8003f2e:	4834      	ldr	r0, [pc, #208]	@ (8004000 <HAL_TIM_PWM_MspInit+0xf8>)
 8003f30:	4b34      	ldr	r3, [pc, #208]	@ (8004004 <HAL_TIM_PWM_MspInit+0xfc>)
 8003f32:	6003      	str	r3, [r0, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8003f34:	2304      	movs	r3, #4
 8003f36:	6043      	str	r3, [r0, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f38:	2310      	movs	r3, #16
 8003f3a:	6083      	str	r3, [r0, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60c3      	str	r3, [r0, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003f40:	2380      	movs	r3, #128	@ 0x80
 8003f42:	6103      	str	r3, [r0, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f48:	6143      	str	r3, [r0, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f4e:	6183      	str	r3, [r0, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8003f50:	2320      	movs	r3, #32
 8003f52:	61c3      	str	r3, [r0, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f54:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003f58:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8003f5a:	f7ff fce7 	bl	800392c <HAL_DMA_Init>
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d145      	bne.n	8003fee <HAL_TIM_PWM_MspInit+0xe6>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8003f62:	4b27      	ldr	r3, [pc, #156]	@ (8004000 <HAL_TIM_PWM_MspInit+0xf8>)
 8003f64:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f66:	629c      	str	r4, [r3, #40]	@ 0x28

    /* TIM2_UP Init */
    hdma_tim2_up.Instance = DMA1_Channel2;
 8003f68:	4827      	ldr	r0, [pc, #156]	@ (8004008 <HAL_TIM_PWM_MspInit+0x100>)
 8003f6a:	4b28      	ldr	r3, [pc, #160]	@ (800400c <HAL_TIM_PWM_MspInit+0x104>)
 8003f6c:	6003      	str	r3, [r0, #0]
    hdma_tim2_up.Init.Request = DMA_REQUEST_4;
 8003f6e:	2304      	movs	r3, #4
 8003f70:	6043      	str	r3, [r0, #4]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f72:	2310      	movs	r3, #16
 8003f74:	6083      	str	r3, [r0, #8]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60c3      	str	r3, [r0, #12]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8003f7a:	2380      	movs	r3, #128	@ 0x80
 8003f7c:	6103      	str	r3, [r0, #16]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f82:	6143      	str	r3, [r0, #20]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f88:	6183      	str	r3, [r0, #24]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 8003f8a:	2320      	movs	r3, #32
 8003f8c:	61c3      	str	r3, [r0, #28]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f8e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003f92:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8003f94:	f7ff fcca 	bl	800392c <HAL_DMA_Init>
 8003f98:	bb60      	cbnz	r0, 8003ff4 <HAL_TIM_PWM_MspInit+0xec>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8003f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004008 <HAL_TIM_PWM_MspInit+0x100>)
 8003f9c:	6223      	str	r3, [r4, #32]
 8003f9e:	629c      	str	r4, [r3, #40]	@ 0x28

    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8003fa0:	481b      	ldr	r0, [pc, #108]	@ (8004010 <HAL_TIM_PWM_MspInit+0x108>)
 8003fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8004014 <HAL_TIM_PWM_MspInit+0x10c>)
 8003fa4:	6003      	str	r3, [r0, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	6043      	str	r3, [r0, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003faa:	2310      	movs	r3, #16
 8003fac:	6083      	str	r3, [r0, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60c3      	str	r3, [r0, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003fb2:	2380      	movs	r3, #128	@ 0x80
 8003fb4:	6103      	str	r3, [r0, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003fb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fba:	6143      	str	r3, [r0, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003fbc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003fc0:	6183      	str	r3, [r0, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8003fc2:	2320      	movs	r3, #32
 8003fc4:	61c3      	str	r3, [r0, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003fc6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003fca:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8003fcc:	f7ff fcae 	bl	800392c <HAL_DMA_Init>
 8003fd0:	b998      	cbnz	r0, 8003ffa <HAL_TIM_PWM_MspInit+0xf2>
      Error_Handler();
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004010 <HAL_TIM_PWM_MspInit+0x108>)
 8003fd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003fd6:	629c      	str	r4, [r3, #40]	@ 0x28
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8003fd8:	6323      	str	r3, [r4, #48]	@ 0x30

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4611      	mov	r1, r2
 8003fde:	201c      	movs	r0, #28
 8003fe0:	f7ff fc62 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fe4:	201c      	movs	r0, #28
 8003fe6:	f7ff fc6f 	bl	80038c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003fea:	b002      	add	sp, #8
 8003fec:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003fee:	f7fe ff29 	bl	8002e44 <Error_Handler>
 8003ff2:	e7b6      	b.n	8003f62 <HAL_TIM_PWM_MspInit+0x5a>
      Error_Handler();
 8003ff4:	f7fe ff26 	bl	8002e44 <Error_Handler>
 8003ff8:	e7cf      	b.n	8003f9a <HAL_TIM_PWM_MspInit+0x92>
      Error_Handler();
 8003ffa:	f7fe ff23 	bl	8002e44 <Error_Handler>
 8003ffe:	e7e8      	b.n	8003fd2 <HAL_TIM_PWM_MspInit+0xca>
 8004000:	2000477c 	.word	0x2000477c
 8004004:	40020058 	.word	0x40020058
 8004008:	20004734 	.word	0x20004734
 800400c:	4002001c 	.word	0x4002001c
 8004010:	200046ec 	.word	0x200046ec
 8004014:	40020080 	.word	0x40020080

08004018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004018:	b510      	push	{r4, lr}
 800401a:	b0a2      	sub	sp, #136	@ 0x88
 800401c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800401e:	2100      	movs	r1, #0
 8004020:	911d      	str	r1, [sp, #116]	@ 0x74
 8004022:	911e      	str	r1, [sp, #120]	@ 0x78
 8004024:	911f      	str	r1, [sp, #124]	@ 0x7c
 8004026:	9120      	str	r1, [sp, #128]	@ 0x80
 8004028:	9121      	str	r1, [sp, #132]	@ 0x84
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800402a:	2260      	movs	r2, #96	@ 0x60
 800402c:	a805      	add	r0, sp, #20
 800402e:	f002 fd06 	bl	8006a3e <memset>
  if(huart->Instance==USART1)
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	4a38      	ldr	r2, [pc, #224]	@ (8004118 <HAL_UART_MspInit+0x100>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d004      	beq.n	8004044 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800403a:	4a38      	ldr	r2, [pc, #224]	@ (800411c <HAL_UART_MspInit+0x104>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d036      	beq.n	80040ae <HAL_UART_MspInit+0x96>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004040:	b022      	add	sp, #136	@ 0x88
 8004042:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004044:	2301      	movs	r3, #1
 8004046:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004048:	a805      	add	r0, sp, #20
 800404a:	f000 fe37 	bl	8004cbc <HAL_RCCEx_PeriphCLKConfig>
 800404e:	bb58      	cbnz	r0, 80040a8 <HAL_UART_MspInit+0x90>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004050:	4b33      	ldr	r3, [pc, #204]	@ (8004120 <HAL_UART_MspInit+0x108>)
 8004052:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004054:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004058:	661a      	str	r2, [r3, #96]	@ 0x60
 800405a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800405c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8004060:	9201      	str	r2, [sp, #4]
 8004062:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004064:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800406c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	9302      	str	r3, [sp, #8]
 8004074:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004076:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800407a:	931d      	str	r3, [sp, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407c:	2302      	movs	r3, #2
 800407e:	931e      	str	r3, [sp, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004080:	2400      	movs	r4, #0
 8004082:	941f      	str	r4, [sp, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004084:	2303      	movs	r3, #3
 8004086:	9320      	str	r3, [sp, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004088:	2307      	movs	r3, #7
 800408a:	9321      	str	r3, [sp, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800408c:	a91d      	add	r1, sp, #116	@ 0x74
 800408e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004092:	f7ff fde3 	bl	8003c5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004096:	4622      	mov	r2, r4
 8004098:	4621      	mov	r1, r4
 800409a:	2025      	movs	r0, #37	@ 0x25
 800409c:	f7ff fc04 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80040a0:	2025      	movs	r0, #37	@ 0x25
 80040a2:	f7ff fc11 	bl	80038c8 <HAL_NVIC_EnableIRQ>
 80040a6:	e7cb      	b.n	8004040 <HAL_UART_MspInit+0x28>
      Error_Handler();
 80040a8:	f7fe fecc 	bl	8002e44 <Error_Handler>
 80040ac:	e7d0      	b.n	8004050 <HAL_UART_MspInit+0x38>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80040ae:	2302      	movs	r3, #2
 80040b0:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040b2:	a805      	add	r0, sp, #20
 80040b4:	f000 fe02 	bl	8004cbc <HAL_RCCEx_PeriphCLKConfig>
 80040b8:	bb50      	cbnz	r0, 8004110 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80040ba:	4b19      	ldr	r3, [pc, #100]	@ (8004120 <HAL_UART_MspInit+0x108>)
 80040bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80040be:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80040c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80040c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80040c6:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80040ca:	9203      	str	r2, [sp, #12]
 80040cc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040d0:	f042 0201 	orr.w	r2, r2, #1
 80040d4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80040d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	9304      	str	r3, [sp, #16]
 80040de:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040e0:	230c      	movs	r3, #12
 80040e2:	931d      	str	r3, [sp, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e4:	2302      	movs	r3, #2
 80040e6:	931e      	str	r3, [sp, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e8:	2400      	movs	r4, #0
 80040ea:	941f      	str	r4, [sp, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ec:	2303      	movs	r3, #3
 80040ee:	9320      	str	r3, [sp, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040f0:	2307      	movs	r3, #7
 80040f2:	9321      	str	r3, [sp, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f4:	a91d      	add	r1, sp, #116	@ 0x74
 80040f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040fa:	f7ff fdaf 	bl	8003c5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80040fe:	4622      	mov	r2, r4
 8004100:	4621      	mov	r1, r4
 8004102:	2026      	movs	r0, #38	@ 0x26
 8004104:	f7ff fbd0 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004108:	2026      	movs	r0, #38	@ 0x26
 800410a:	f7ff fbdd 	bl	80038c8 <HAL_NVIC_EnableIRQ>
}
 800410e:	e797      	b.n	8004040 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8004110:	f7fe fe98 	bl	8002e44 <Error_Handler>
 8004114:	e7d1      	b.n	80040ba <HAL_UART_MspInit+0xa2>
 8004116:	bf00      	nop
 8004118:	40013800 	.word	0x40013800
 800411c:	40004400 	.word	0x40004400
 8004120:	40021000 	.word	0x40021000

08004124 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004124:	4b02      	ldr	r3, [pc, #8]	@ (8004130 <HAL_PWREx_GetVoltageRange+0xc>)
 8004126:	6818      	ldr	r0, [r3, #0]
#endif
}
 8004128:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40007000 	.word	0x40007000

08004134 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004134:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004138:	d00f      	beq.n	800415a <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800413a:	4b1f      	ldr	r3, [pc, #124]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004146:	d034      	beq.n	80041b2 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004148:	4a1b      	ldr	r2, [pc, #108]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800414a:	6813      	ldr	r3, [r2, #0]
 800414c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004150:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004154:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004156:	2000      	movs	r0, #0
 8004158:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800415a:	4b17      	ldr	r3, [pc, #92]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004162:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004166:	d020      	beq.n	80041aa <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004168:	4a13      	ldr	r2, [pc, #76]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800416a:	6813      	ldr	r3, [r2, #0]
 800416c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004170:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004174:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004176:	4b11      	ldr	r3, [pc, #68]	@ (80041bc <HAL_PWREx_ControlVoltageScaling+0x88>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2232      	movs	r2, #50	@ 0x32
 800417c:	fb02 f303 	mul.w	r3, r2, r3
 8004180:	4a0f      	ldr	r2, [pc, #60]	@ (80041c0 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	0c9b      	lsrs	r3, r3, #18
 8004188:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800418a:	e000      	b.n	800418e <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 800418c:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800418e:	4a0a      	ldr	r2, [pc, #40]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 8004190:	6952      	ldr	r2, [r2, #20]
 8004192:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8004196:	d001      	beq.n	800419c <HAL_PWREx_ControlVoltageScaling+0x68>
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f7      	bne.n	800418c <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800419c:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80041a4:	d103      	bne.n	80041ae <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 80041a6:	2000      	movs	r0, #0
 80041a8:	4770      	bx	lr
 80041aa:	2000      	movs	r0, #0
 80041ac:	4770      	bx	lr
        return HAL_TIMEOUT;
 80041ae:	2003      	movs	r0, #3
 80041b0:	4770      	bx	lr
  return HAL_OK;
 80041b2:	2000      	movs	r0, #0
}
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40007000 	.word	0x40007000
 80041bc:	20000010 	.word	0x20000010
 80041c0:	431bde83 	.word	0x431bde83

080041c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041c4:	b530      	push	{r4, r5, lr}
 80041c6:	b083      	sub	sp, #12
 80041c8:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041ca:	4b20      	ldr	r3, [pc, #128]	@ (800424c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80041cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ce:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80041d2:	d00b      	beq.n	80041ec <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041d4:	f7ff ffa6 	bl	8004124 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041d8:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80041dc:	d017      	beq.n	800420e <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041de:	2c80      	cmp	r4, #128	@ 0x80
 80041e0:	d81f      	bhi.n	8004222 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041e2:	d02d      	beq.n	8004240 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80041e4:	2c70      	cmp	r4, #112	@ 0x70
 80041e6:	d02d      	beq.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041e8:	2100      	movs	r1, #0
 80041ea:	e01b      	b.n	8004224 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80041ec:	4d17      	ldr	r5, [pc, #92]	@ (800424c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80041ee:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80041f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f4:	65ab      	str	r3, [r5, #88]	@ 0x58
 80041f6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80041f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8004200:	f7ff ff90 	bl	8004124 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8004204:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8004206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800420a:	65ab      	str	r3, [r5, #88]	@ 0x58
 800420c:	e7e4      	b.n	80041d8 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 800420e:	2c80      	cmp	r4, #128	@ 0x80
 8004210:	d903      	bls.n	800421a <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8004212:	2ca0      	cmp	r4, #160	@ 0xa0
 8004214:	d903      	bls.n	800421e <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8004216:	2102      	movs	r1, #2
 8004218:	e004      	b.n	8004224 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800421a:	2100      	movs	r1, #0
 800421c:	e002      	b.n	8004224 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800421e:	2101      	movs	r1, #1
 8004220:	e000      	b.n	8004224 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8004222:	2103      	movs	r1, #3
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004224:	4a0a      	ldr	r2, [pc, #40]	@ (8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8004226:	6813      	ldr	r3, [r2, #0]
 8004228:	f023 0307 	bic.w	r3, r3, #7
 800422c:	430b      	orrs	r3, r1
 800422e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004230:	6813      	ldr	r3, [r2, #0]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	428b      	cmp	r3, r1
 8004238:	d106      	bne.n	8004248 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800423a:	2000      	movs	r0, #0
}
 800423c:	b003      	add	sp, #12
 800423e:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8004240:	2102      	movs	r1, #2
 8004242:	e7ef      	b.n	8004224 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8004244:	2101      	movs	r1, #1
 8004246:	e7ed      	b.n	8004224 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 8004248:	2001      	movs	r0, #1
 800424a:	e7f7      	b.n	800423c <RCC_SetFlashLatencyFromMSIRange+0x78>
 800424c:	40021000 	.word	0x40021000
 8004250:	40022000 	.word	0x40022000

08004254 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004254:	4a28      	ldr	r2, [pc, #160]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004256:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004258:	68d2      	ldr	r2, [r2, #12]
 800425a:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800425e:	f013 030c 	ands.w	r3, r3, #12
 8004262:	d00a      	beq.n	800427a <HAL_RCC_GetSysClockFreq+0x26>
 8004264:	2b0c      	cmp	r3, #12
 8004266:	d006      	beq.n	8004276 <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004268:	2b04      	cmp	r3, #4
 800426a:	d01f      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800426c:	2b08      	cmp	r3, #8
 800426e:	d020      	beq.n	80042b2 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004270:	2000      	movs	r0, #0
 8004272:	4602      	mov	r2, r0
 8004274:	e010      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004276:	2a01      	cmp	r2, #1
 8004278:	d1f6      	bne.n	8004268 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800427a:	4a1f      	ldr	r2, [pc, #124]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	f012 0f08 	tst.w	r2, #8
 8004282:	d10c      	bne.n	800429e <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004284:	4a1c      	ldr	r2, [pc, #112]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004286:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 800428a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800428e:	491b      	ldr	r1, [pc, #108]	@ (80042fc <HAL_RCC_GetSysClockFreq+0xa8>)
 8004290:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004294:	b143      	cbz	r3, 80042a8 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004296:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004298:	2b0c      	cmp	r3, #12
 800429a:	d00d      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0x64>
}
 800429c:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800429e:	4a16      	ldr	r2, [pc, #88]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042a0:	6812      	ldr	r2, [r2, #0]
 80042a2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80042a6:	e7f2      	b.n	800428e <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 80042a8:	4610      	mov	r0, r2
 80042aa:	e7f5      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 80042ac:	4814      	ldr	r0, [pc, #80]	@ (8004300 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042ae:	2200      	movs	r2, #0
 80042b0:	e7f2      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 80042b2:	4814      	ldr	r0, [pc, #80]	@ (8004304 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042b4:	2200      	movs	r2, #0
 80042b6:	e7ef      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042b8:	4b0f      	ldr	r3, [pc, #60]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d016      	beq.n	80042f2 <HAL_RCC_GetSysClockFreq+0x9e>
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d100      	bne.n	80042ca <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 80042c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004304 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042ca:	490b      	ldr	r1, [pc, #44]	@ (80042f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042cc:	68cb      	ldr	r3, [r1, #12]
 80042ce:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80042d2:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042d4:	68c8      	ldr	r0, [r1, #12]
 80042d6:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80042da:	fb02 f000 	mul.w	r0, r2, r0
 80042de:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042e2:	68cb      	ldr	r3, [r1, #12]
 80042e4:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80042e8:	3301      	adds	r3, #1
 80042ea:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 80042ec:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80042f0:	e7d4      	b.n	800429c <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 80042f2:	4a03      	ldr	r2, [pc, #12]	@ (8004300 <HAL_RCC_GetSysClockFreq+0xac>)
 80042f4:	e7e9      	b.n	80042ca <HAL_RCC_GetSysClockFreq+0x76>
 80042f6:	bf00      	nop
 80042f8:	40021000 	.word	0x40021000
 80042fc:	08008d28 	.word	0x08008d28
 8004300:	00f42400 	.word	0x00f42400
 8004304:	007a1200 	.word	0x007a1200

08004308 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8004308:	2800      	cmp	r0, #0
 800430a:	f000 831c 	beq.w	8004946 <HAL_RCC_OscConfig+0x63e>
{
 800430e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004310:	b083      	sub	sp, #12
 8004312:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004314:	4b96      	ldr	r3, [pc, #600]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 8004316:	689d      	ldr	r5, [r3, #8]
 8004318:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800431c:	68de      	ldr	r6, [r3, #12]
 800431e:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004322:	6803      	ldr	r3, [r0, #0]
 8004324:	f013 0f10 	tst.w	r3, #16
 8004328:	d05a      	beq.n	80043e0 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800432a:	b1e5      	cbz	r5, 8004366 <HAL_RCC_OscConfig+0x5e>
 800432c:	2d0c      	cmp	r5, #12
 800432e:	d018      	beq.n	8004362 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004330:	69a3      	ldr	r3, [r4, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 80bb 	beq.w	80044ae <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 8004338:	4a8d      	ldr	r2, [pc, #564]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 800433a:	6813      	ldr	r3, [r2, #0]
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004342:	f7ff fa57 	bl	80037f4 <HAL_GetTick>
 8004346:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004348:	4b89      	ldr	r3, [pc, #548]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f013 0f02 	tst.w	r3, #2
 8004350:	f040 809a 	bne.w	8004488 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004354:	f7ff fa4e 	bl	80037f4 <HAL_GetTick>
 8004358:	1bc0      	subs	r0, r0, r7
 800435a:	2802      	cmp	r0, #2
 800435c:	d9f4      	bls.n	8004348 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800435e:	2003      	movs	r0, #3
 8004360:	e2fc      	b.n	800495c <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004362:	2e01      	cmp	r6, #1
 8004364:	d1e4      	bne.n	8004330 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004366:	4b82      	ldr	r3, [pc, #520]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f013 0f02 	tst.w	r3, #2
 800436e:	d003      	beq.n	8004378 <HAL_RCC_OscConfig+0x70>
 8004370:	69a3      	ldr	r3, [r4, #24]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 82e9 	beq.w	800494a <HAL_RCC_OscConfig+0x642>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004378:	6a20      	ldr	r0, [r4, #32]
 800437a:	4b7d      	ldr	r3, [pc, #500]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f013 0f08 	tst.w	r3, #8
 8004382:	d05b      	beq.n	800443c <HAL_RCC_OscConfig+0x134>
 8004384:	4b7a      	ldr	r3, [pc, #488]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800438c:	4298      	cmp	r0, r3
 800438e:	d85c      	bhi.n	800444a <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004390:	4b77      	ldr	r3, [pc, #476]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	f042 0208 	orr.w	r2, r2, #8
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80043a0:	6a21      	ldr	r1, [r4, #32]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80043ac:	69e1      	ldr	r1, [r4, #28]
 80043ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80043b2:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043b4:	2d00      	cmp	r5, #0
 80043b6:	d060      	beq.n	800447a <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043b8:	f7ff ff4c 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 80043bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80043c4:	4a6b      	ldr	r2, [pc, #428]	@ (8004574 <HAL_RCC_OscConfig+0x26c>)
 80043c6:	5cd3      	ldrb	r3, [r2, r3]
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	40d8      	lsrs	r0, r3
 80043ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004578 <HAL_RCC_OscConfig+0x270>)
 80043d0:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80043d2:	4b6a      	ldr	r3, [pc, #424]	@ (800457c <HAL_RCC_OscConfig+0x274>)
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	f7ff f9c9 	bl	800376c <HAL_InitTick>
        if(status != HAL_OK)
 80043da:	2800      	cmp	r0, #0
 80043dc:	f040 82be 	bne.w	800495c <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	f013 0f01 	tst.w	r3, #1
 80043e6:	f000 8081 	beq.w	80044ec <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80043ea:	2d08      	cmp	r5, #8
 80043ec:	d075      	beq.n	80044da <HAL_RCC_OscConfig+0x1d2>
 80043ee:	2d0c      	cmp	r5, #12
 80043f0:	d071      	beq.n	80044d6 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f2:	6863      	ldr	r3, [r4, #4]
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f8:	f000 8097 	beq.w	800452a <HAL_RCC_OscConfig+0x222>
 80043fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004400:	f000 8099 	beq.w	8004536 <HAL_RCC_OscConfig+0x22e>
 8004404:	4b5a      	ldr	r3, [pc, #360]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004414:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004416:	6863      	ldr	r3, [r4, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 8099 	beq.w	8004550 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 800441e:	f7ff f9e9 	bl	80037f4 <HAL_GetTick>
 8004422:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004424:	4b52      	ldr	r3, [pc, #328]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800442c:	d15e      	bne.n	80044ec <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800442e:	f7ff f9e1 	bl	80037f4 <HAL_GetTick>
 8004432:	1bc0      	subs	r0, r0, r7
 8004434:	2864      	cmp	r0, #100	@ 0x64
 8004436:	d9f5      	bls.n	8004424 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 8004438:	2003      	movs	r0, #3
 800443a:	e28f      	b.n	800495c <HAL_RCC_OscConfig+0x654>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800443c:	4b4c      	ldr	r3, [pc, #304]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 800443e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004442:	091b      	lsrs	r3, r3, #4
 8004444:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004448:	e7a0      	b.n	800438c <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800444a:	f7ff febb 	bl	80041c4 <RCC_SetFlashLatencyFromMSIRange>
 800444e:	2800      	cmp	r0, #0
 8004450:	f040 827d 	bne.w	800494e <HAL_RCC_OscConfig+0x646>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004454:	4b46      	ldr	r3, [pc, #280]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	f042 0208 	orr.w	r2, r2, #8
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004464:	6a21      	ldr	r1, [r4, #32]
 8004466:	430a      	orrs	r2, r1
 8004468:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004470:	69e1      	ldr	r1, [r4, #28]
 8004472:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004476:	605a      	str	r2, [r3, #4]
 8004478:	e79e      	b.n	80043b8 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800447a:	6a20      	ldr	r0, [r4, #32]
 800447c:	f7ff fea2 	bl	80041c4 <RCC_SetFlashLatencyFromMSIRange>
 8004480:	2800      	cmp	r0, #0
 8004482:	d099      	beq.n	80043b8 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8004484:	2001      	movs	r0, #1
 8004486:	e269      	b.n	800495c <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004488:	4b39      	ldr	r3, [pc, #228]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	f042 0208 	orr.w	r2, r2, #8
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004498:	6a21      	ldr	r1, [r4, #32]
 800449a:	430a      	orrs	r2, r1
 800449c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80044a4:	69e1      	ldr	r1, [r4, #28]
 80044a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80044aa:	605a      	str	r2, [r3, #4]
 80044ac:	e798      	b.n	80043e0 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 80044ae:	4a30      	ldr	r2, [pc, #192]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 80044b0:	6813      	ldr	r3, [r2, #0]
 80044b2:	f023 0301 	bic.w	r3, r3, #1
 80044b6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80044b8:	f7ff f99c 	bl	80037f4 <HAL_GetTick>
 80044bc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044be:	4b2c      	ldr	r3, [pc, #176]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f013 0f02 	tst.w	r3, #2
 80044c6:	d08b      	beq.n	80043e0 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044c8:	f7ff f994 	bl	80037f4 <HAL_GetTick>
 80044cc:	1bc0      	subs	r0, r0, r7
 80044ce:	2802      	cmp	r0, #2
 80044d0:	d9f5      	bls.n	80044be <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80044d2:	2003      	movs	r0, #3
 80044d4:	e242      	b.n	800495c <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044d6:	2e03      	cmp	r6, #3
 80044d8:	d18b      	bne.n	80043f2 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044da:	4b25      	ldr	r3, [pc, #148]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80044e2:	d003      	beq.n	80044ec <HAL_RCC_OscConfig+0x1e4>
 80044e4:	6863      	ldr	r3, [r4, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8233 	beq.w	8004952 <HAL_RCC_OscConfig+0x64a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	f013 0f02 	tst.w	r3, #2
 80044f2:	d058      	beq.n	80045a6 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80044f4:	2d04      	cmp	r5, #4
 80044f6:	d045      	beq.n	8004584 <HAL_RCC_OscConfig+0x27c>
 80044f8:	2d0c      	cmp	r5, #12
 80044fa:	d041      	beq.n	8004580 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044fc:	68e3      	ldr	r3, [r4, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d077      	beq.n	80045f2 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8004502:	4a1b      	ldr	r2, [pc, #108]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 8004504:	6813      	ldr	r3, [r2, #0]
 8004506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800450a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800450c:	f7ff f972 	bl	80037f4 <HAL_GetTick>
 8004510:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004512:	4b17      	ldr	r3, [pc, #92]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800451a:	d161      	bne.n	80045e0 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451c:	f7ff f96a 	bl	80037f4 <HAL_GetTick>
 8004520:	1b80      	subs	r0, r0, r6
 8004522:	2802      	cmp	r0, #2
 8004524:	d9f5      	bls.n	8004512 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 8004526:	2003      	movs	r0, #3
 8004528:	e218      	b.n	800495c <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800452a:	4a11      	ldr	r2, [pc, #68]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 800452c:	6813      	ldr	r3, [r2, #0]
 800452e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	e76f      	b.n	8004416 <HAL_RCC_OscConfig+0x10e>
 8004536:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800453a:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	e762      	b.n	8004416 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8004550:	f7ff f950 	bl	80037f4 <HAL_GetTick>
 8004554:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004556:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <HAL_RCC_OscConfig+0x268>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800455e:	d0c5      	beq.n	80044ec <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004560:	f7ff f948 	bl	80037f4 <HAL_GetTick>
 8004564:	1bc0      	subs	r0, r0, r7
 8004566:	2864      	cmp	r0, #100	@ 0x64
 8004568:	d9f5      	bls.n	8004556 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800456a:	2003      	movs	r0, #3
 800456c:	e1f6      	b.n	800495c <HAL_RCC_OscConfig+0x654>
 800456e:	bf00      	nop
 8004570:	40021000 	.word	0x40021000
 8004574:	08008d60 	.word	0x08008d60
 8004578:	20000010 	.word	0x20000010
 800457c:	2000000c 	.word	0x2000000c
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004580:	2e02      	cmp	r6, #2
 8004582:	d1bb      	bne.n	80044fc <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004584:	4ba4      	ldr	r3, [pc, #656]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800458c:	d003      	beq.n	8004596 <HAL_RCC_OscConfig+0x28e>
 800458e:	68e3      	ldr	r3, [r4, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 81e0 	beq.w	8004956 <HAL_RCC_OscConfig+0x64e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004596:	4aa0      	ldr	r2, [pc, #640]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 8004598:	6853      	ldr	r3, [r2, #4]
 800459a:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800459e:	6921      	ldr	r1, [r4, #16]
 80045a0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80045a4:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	f013 0f08 	tst.w	r3, #8
 80045ac:	d04c      	beq.n	8004648 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045ae:	6963      	ldr	r3, [r4, #20]
 80045b0:	b39b      	cbz	r3, 800461a <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 80045b2:	4a99      	ldr	r2, [pc, #612]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 80045b4:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80045c0:	f7ff f918 	bl	80037f4 <HAL_GetTick>
 80045c4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045c6:	4b94      	ldr	r3, [pc, #592]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 80045c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045cc:	f013 0f02 	tst.w	r3, #2
 80045d0:	d13a      	bne.n	8004648 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d2:	f7ff f90f 	bl	80037f4 <HAL_GetTick>
 80045d6:	1b80      	subs	r0, r0, r6
 80045d8:	2802      	cmp	r0, #2
 80045da:	d9f4      	bls.n	80045c6 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 80045dc:	2003      	movs	r0, #3
 80045de:	e1bd      	b.n	800495c <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e0:	4a8d      	ldr	r2, [pc, #564]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 80045e2:	6853      	ldr	r3, [r2, #4]
 80045e4:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 80045e8:	6921      	ldr	r1, [r4, #16]
 80045ea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80045ee:	6053      	str	r3, [r2, #4]
 80045f0:	e7d9      	b.n	80045a6 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 80045f2:	4a89      	ldr	r2, [pc, #548]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 80045f4:	6813      	ldr	r3, [r2, #0]
 80045f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045fa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80045fc:	f7ff f8fa 	bl	80037f4 <HAL_GetTick>
 8004600:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004602:	4b85      	ldr	r3, [pc, #532]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800460a:	d0cc      	beq.n	80045a6 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460c:	f7ff f8f2 	bl	80037f4 <HAL_GetTick>
 8004610:	1b80      	subs	r0, r0, r6
 8004612:	2802      	cmp	r0, #2
 8004614:	d9f5      	bls.n	8004602 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 8004616:	2003      	movs	r0, #3
 8004618:	e1a0      	b.n	800495c <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_LSI_DISABLE();
 800461a:	4a7f      	ldr	r2, [pc, #508]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 800461c:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004628:	f7ff f8e4 	bl	80037f4 <HAL_GetTick>
 800462c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800462e:	4b7a      	ldr	r3, [pc, #488]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 8004630:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004634:	f013 0f02 	tst.w	r3, #2
 8004638:	d006      	beq.n	8004648 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463a:	f7ff f8db 	bl	80037f4 <HAL_GetTick>
 800463e:	1b80      	subs	r0, r0, r6
 8004640:	2802      	cmp	r0, #2
 8004642:	d9f4      	bls.n	800462e <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8004644:	2003      	movs	r0, #3
 8004646:	e189      	b.n	800495c <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	f013 0f04 	tst.w	r3, #4
 800464e:	d07a      	beq.n	8004746 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004650:	4b71      	ldr	r3, [pc, #452]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 8004652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004654:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004658:	d136      	bne.n	80046c8 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800465a:	4b6f      	ldr	r3, [pc, #444]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 800465c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800465e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004662:	659a      	str	r2, [r3, #88]	@ 0x58
 8004664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800466e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004670:	4b6a      	ldr	r3, [pc, #424]	@ (800481c <HAL_RCC_OscConfig+0x514>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004678:	d028      	beq.n	80046cc <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800467a:	68a3      	ldr	r3, [r4, #8]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d039      	beq.n	80046f4 <HAL_RCC_OscConfig+0x3ec>
 8004680:	2b05      	cmp	r3, #5
 8004682:	d03f      	beq.n	8004704 <HAL_RCC_OscConfig+0x3fc>
 8004684:	4b64      	ldr	r3, [pc, #400]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 8004686:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800468a:	f022 0201 	bic.w	r2, r2, #1
 800468e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8004692:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004696:	f022 0204 	bic.w	r2, r2, #4
 800469a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800469e:	68a3      	ldr	r3, [r4, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d03d      	beq.n	8004720 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 80046a4:	f7ff f8a6 	bl	80037f4 <HAL_GetTick>
 80046a8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b0:	f013 0f02 	tst.w	r3, #2
 80046b4:	d146      	bne.n	8004744 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b6:	f7ff f89d 	bl	80037f4 <HAL_GetTick>
 80046ba:	1bc0      	subs	r0, r0, r7
 80046bc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80046c0:	4298      	cmp	r0, r3
 80046c2:	d9f2      	bls.n	80046aa <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 80046c4:	2003      	movs	r0, #3
 80046c6:	e149      	b.n	800495c <HAL_RCC_OscConfig+0x654>
    FlagStatus       pwrclkchanged = RESET;
 80046c8:	2600      	movs	r6, #0
 80046ca:	e7d1      	b.n	8004670 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046cc:	4a53      	ldr	r2, [pc, #332]	@ (800481c <HAL_RCC_OscConfig+0x514>)
 80046ce:	6813      	ldr	r3, [r2, #0]
 80046d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80046d6:	f7ff f88d 	bl	80037f4 <HAL_GetTick>
 80046da:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046dc:	4b4f      	ldr	r3, [pc, #316]	@ (800481c <HAL_RCC_OscConfig+0x514>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80046e4:	d1c9      	bne.n	800467a <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e6:	f7ff f885 	bl	80037f4 <HAL_GetTick>
 80046ea:	1bc0      	subs	r0, r0, r7
 80046ec:	2802      	cmp	r0, #2
 80046ee:	d9f5      	bls.n	80046dc <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 80046f0:	2003      	movs	r0, #3
 80046f2:	e133      	b.n	800495c <HAL_RCC_OscConfig+0x654>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f4:	4a48      	ldr	r2, [pc, #288]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 80046f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004702:	e7cc      	b.n	800469e <HAL_RCC_OscConfig+0x396>
 8004704:	4b44      	ldr	r3, [pc, #272]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 8004706:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800470a:	f042 0204 	orr.w	r2, r2, #4
 800470e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8004712:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800471e:	e7be      	b.n	800469e <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8004720:	f7ff f868 	bl	80037f4 <HAL_GetTick>
 8004724:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004726:	4b3c      	ldr	r3, [pc, #240]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472c:	f013 0f02 	tst.w	r3, #2
 8004730:	d008      	beq.n	8004744 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004732:	f7ff f85f 	bl	80037f4 <HAL_GetTick>
 8004736:	1bc0      	subs	r0, r0, r7
 8004738:	f241 3388 	movw	r3, #5000	@ 0x1388
 800473c:	4298      	cmp	r0, r3
 800473e:	d9f2      	bls.n	8004726 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8004740:	2003      	movs	r0, #3
 8004742:	e10b      	b.n	800495c <HAL_RCC_OscConfig+0x654>
    if(pwrclkchanged == SET)
 8004744:	b9e6      	cbnz	r6, 8004780 <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	f013 0f20 	tst.w	r3, #32
 800474c:	d035      	beq.n	80047ba <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800474e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004750:	b1e3      	cbz	r3, 800478c <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 8004752:	4a31      	ldr	r2, [pc, #196]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 8004754:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8004760:	f7ff f848 	bl	80037f4 <HAL_GetTick>
 8004764:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004766:	4b2c      	ldr	r3, [pc, #176]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 8004768:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800476c:	f013 0f02 	tst.w	r3, #2
 8004770:	d123      	bne.n	80047ba <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004772:	f7ff f83f 	bl	80037f4 <HAL_GetTick>
 8004776:	1b80      	subs	r0, r0, r6
 8004778:	2802      	cmp	r0, #2
 800477a:	d9f4      	bls.n	8004766 <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 800477c:	2003      	movs	r0, #3
 800477e:	e0ed      	b.n	800495c <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004780:	4a25      	ldr	r2, [pc, #148]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 8004782:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004788:	6593      	str	r3, [r2, #88]	@ 0x58
 800478a:	e7dc      	b.n	8004746 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 800478c:	4a22      	ldr	r2, [pc, #136]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 800478e:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8004792:	f023 0301 	bic.w	r3, r3, #1
 8004796:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800479a:	f7ff f82b 	bl	80037f4 <HAL_GetTick>
 800479e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 80047a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047a6:	f013 0f02 	tst.w	r3, #2
 80047aa:	d006      	beq.n	80047ba <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047ac:	f7ff f822 	bl	80037f4 <HAL_GetTick>
 80047b0:	1b80      	subs	r0, r0, r6
 80047b2:	2802      	cmp	r0, #2
 80047b4:	d9f4      	bls.n	80047a0 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 80047b6:	2003      	movs	r0, #3
 80047b8:	e0d0      	b.n	800495c <HAL_RCC_OscConfig+0x654>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80cc 	beq.w	800495a <HAL_RCC_OscConfig+0x652>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d017      	beq.n	80047f6 <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047c6:	2d0c      	cmp	r5, #12
 80047c8:	f000 80cc 	beq.w	8004964 <HAL_RCC_OscConfig+0x65c>
        __HAL_RCC_PLL_DISABLE();
 80047cc:	4a12      	ldr	r2, [pc, #72]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 80047ce:	6813      	ldr	r3, [r2, #0]
 80047d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80047d6:	f7ff f80d 	bl	80037f4 <HAL_GetTick>
 80047da:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80047e4:	f000 80a8 	beq.w	8004938 <HAL_RCC_OscConfig+0x630>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e8:	f7ff f804 	bl	80037f4 <HAL_GetTick>
 80047ec:	1b00      	subs	r0, r0, r4
 80047ee:	2802      	cmp	r0, #2
 80047f0:	d9f4      	bls.n	80047dc <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 80047f2:	2003      	movs	r0, #3
 80047f4:	e0b2      	b.n	800495c <HAL_RCC_OscConfig+0x654>
      pll_config = RCC->PLLCFGR;
 80047f6:	4b08      	ldr	r3, [pc, #32]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 80047f8:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	f003 0103 	and.w	r1, r3, #3
 80047fe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004800:	4291      	cmp	r1, r2
 8004802:	d00d      	beq.n	8004820 <HAL_RCC_OscConfig+0x518>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004804:	2d0c      	cmp	r5, #12
 8004806:	f000 80ab 	beq.w	8004960 <HAL_RCC_OscConfig+0x658>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800480a:	4b03      	ldr	r3, [pc, #12]	@ (8004818 <HAL_RCC_OscConfig+0x510>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8004812:	d02f      	beq.n	8004874 <HAL_RCC_OscConfig+0x56c>
            return HAL_ERROR;
 8004814:	2001      	movs	r0, #1
 8004816:	e0a1      	b.n	800495c <HAL_RCC_OscConfig+0x654>
 8004818:	40021000 	.word	0x40021000
 800481c:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004820:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004824:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004826:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004828:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800482c:	d1ea      	bne.n	8004804 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800482e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004832:	6b61      	ldr	r1, [r4, #52]	@ 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004834:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004838:	d1e4      	bne.n	8004804 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800483a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800483e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004840:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004844:	d1de      	bne.n	8004804 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004846:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800484a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800484c:	0852      	lsrs	r2, r2, #1
 800484e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004850:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004854:	d1d6      	bne.n	8004804 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004856:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800485a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800485c:	0852      	lsrs	r2, r2, #1
 800485e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004860:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004864:	d1ce      	bne.n	8004804 <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004866:	4b40      	ldr	r3, [pc, #256]	@ (8004968 <HAL_RCC_OscConfig+0x660>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800486e:	d049      	beq.n	8004904 <HAL_RCC_OscConfig+0x5fc>
  return HAL_OK;
 8004870:	2000      	movs	r0, #0
 8004872:	e073      	b.n	800495c <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_DISABLE();
 8004874:	4a3c      	ldr	r2, [pc, #240]	@ (8004968 <HAL_RCC_OscConfig+0x660>)
 8004876:	6813      	ldr	r3, [r2, #0]
 8004878:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800487c:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 800487e:	f7fe ffb9 	bl	80037f4 <HAL_GetTick>
 8004882:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004884:	4b38      	ldr	r3, [pc, #224]	@ (8004968 <HAL_RCC_OscConfig+0x660>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800488c:	d006      	beq.n	800489c <HAL_RCC_OscConfig+0x594>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800488e:	f7fe ffb1 	bl	80037f4 <HAL_GetTick>
 8004892:	1b40      	subs	r0, r0, r5
 8004894:	2802      	cmp	r0, #2
 8004896:	d9f5      	bls.n	8004884 <HAL_RCC_OscConfig+0x57c>
                return HAL_TIMEOUT;
 8004898:	2003      	movs	r0, #3
 800489a:	e05f      	b.n	800495c <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800489c:	4a32      	ldr	r2, [pc, #200]	@ (8004968 <HAL_RCC_OscConfig+0x660>)
 800489e:	68d3      	ldr	r3, [r2, #12]
 80048a0:	4932      	ldr	r1, [pc, #200]	@ (800496c <HAL_RCC_OscConfig+0x664>)
 80048a2:	4019      	ands	r1, r3
 80048a4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80048a6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80048a8:	3801      	subs	r0, #1
 80048aa:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80048ae:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80048b0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80048b4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80048b6:	0840      	lsrs	r0, r0, #1
 80048b8:	3801      	subs	r0, #1
 80048ba:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 80048be:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80048c0:	0840      	lsrs	r0, r0, #1
 80048c2:	3801      	subs	r0, #1
 80048c4:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80048c8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80048ca:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 80048ce:	4319      	orrs	r1, r3
 80048d0:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 80048d2:	6813      	ldr	r3, [r2, #0]
 80048d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048d8:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048da:	68d3      	ldr	r3, [r2, #12]
 80048dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048e0:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80048e2:	f7fe ff87 	bl	80037f4 <HAL_GetTick>
 80048e6:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004968 <HAL_RCC_OscConfig+0x660>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80048f0:	d106      	bne.n	8004900 <HAL_RCC_OscConfig+0x5f8>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f2:	f7fe ff7f 	bl	80037f4 <HAL_GetTick>
 80048f6:	1b00      	subs	r0, r0, r4
 80048f8:	2802      	cmp	r0, #2
 80048fa:	d9f5      	bls.n	80048e8 <HAL_RCC_OscConfig+0x5e0>
                return HAL_TIMEOUT;
 80048fc:	2003      	movs	r0, #3
 80048fe:	e02d      	b.n	800495c <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8004900:	2000      	movs	r0, #0
 8004902:	e02b      	b.n	800495c <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLL_ENABLE();
 8004904:	4b18      	ldr	r3, [pc, #96]	@ (8004968 <HAL_RCC_OscConfig+0x660>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800490c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004914:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8004916:	f7fe ff6d 	bl	80037f4 <HAL_GetTick>
 800491a:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800491c:	4b12      	ldr	r3, [pc, #72]	@ (8004968 <HAL_RCC_OscConfig+0x660>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004924:	d106      	bne.n	8004934 <HAL_RCC_OscConfig+0x62c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004926:	f7fe ff65 	bl	80037f4 <HAL_GetTick>
 800492a:	1b03      	subs	r3, r0, r4
 800492c:	2b02      	cmp	r3, #2
 800492e:	d9f5      	bls.n	800491c <HAL_RCC_OscConfig+0x614>
              return HAL_TIMEOUT;
 8004930:	2003      	movs	r0, #3
 8004932:	e013      	b.n	800495c <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 8004934:	2000      	movs	r0, #0
 8004936:	e011      	b.n	800495c <HAL_RCC_OscConfig+0x654>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004938:	4a0b      	ldr	r2, [pc, #44]	@ (8004968 <HAL_RCC_OscConfig+0x660>)
 800493a:	68d1      	ldr	r1, [r2, #12]
 800493c:	4b0c      	ldr	r3, [pc, #48]	@ (8004970 <HAL_RCC_OscConfig+0x668>)
 800493e:	400b      	ands	r3, r1
 8004940:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004942:	2000      	movs	r0, #0
 8004944:	e00a      	b.n	800495c <HAL_RCC_OscConfig+0x654>
    return HAL_ERROR;
 8004946:	2001      	movs	r0, #1
}
 8004948:	4770      	bx	lr
        return HAL_ERROR;
 800494a:	2001      	movs	r0, #1
 800494c:	e006      	b.n	800495c <HAL_RCC_OscConfig+0x654>
            return HAL_ERROR;
 800494e:	2001      	movs	r0, #1
 8004950:	e004      	b.n	800495c <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 8004952:	2001      	movs	r0, #1
 8004954:	e002      	b.n	800495c <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 8004956:	2001      	movs	r0, #1
 8004958:	e000      	b.n	800495c <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 800495a:	2000      	movs	r0, #0
}
 800495c:	b003      	add	sp, #12
 800495e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8004960:	2001      	movs	r0, #1
 8004962:	e7fb      	b.n	800495c <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 8004964:	2001      	movs	r0, #1
 8004966:	e7f9      	b.n	800495c <HAL_RCC_OscConfig+0x654>
 8004968:	40021000 	.word	0x40021000
 800496c:	019d808c 	.word	0x019d808c
 8004970:	feeefffc 	.word	0xfeeefffc

08004974 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004974:	2800      	cmp	r0, #0
 8004976:	f000 80af 	beq.w	8004ad8 <HAL_RCC_ClockConfig+0x164>
{
 800497a:	b570      	push	{r4, r5, r6, lr}
 800497c:	460d      	mov	r5, r1
 800497e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004980:	4b59      	ldr	r3, [pc, #356]	@ (8004ae8 <HAL_RCC_ClockConfig+0x174>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	428b      	cmp	r3, r1
 800498a:	d20b      	bcs.n	80049a4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498c:	4a56      	ldr	r2, [pc, #344]	@ (8004ae8 <HAL_RCC_ClockConfig+0x174>)
 800498e:	6813      	ldr	r3, [r2, #0]
 8004990:	f023 0307 	bic.w	r3, r3, #7
 8004994:	430b      	orrs	r3, r1
 8004996:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004998:	6813      	ldr	r3, [r2, #0]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	428b      	cmp	r3, r1
 80049a0:	f040 809c 	bne.w	8004adc <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	f013 0f02 	tst.w	r3, #2
 80049aa:	d00c      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049ac:	68a2      	ldr	r2, [r4, #8]
 80049ae:	4b4f      	ldr	r3, [pc, #316]	@ (8004aec <HAL_RCC_ClockConfig+0x178>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d905      	bls.n	80049c6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ba:	494c      	ldr	r1, [pc, #304]	@ (8004aec <HAL_RCC_ClockConfig+0x178>)
 80049bc:	688b      	ldr	r3, [r1, #8]
 80049be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049c2:	431a      	orrs	r2, r3
 80049c4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	f013 0f01 	tst.w	r3, #1
 80049cc:	d039      	beq.n	8004a42 <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ce:	6863      	ldr	r3, [r4, #4]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d009      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d026      	beq.n	8004a26 <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049d8:	bb63      	cbnz	r3, 8004a34 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049da:	4a44      	ldr	r2, [pc, #272]	@ (8004aec <HAL_RCC_ClockConfig+0x178>)
 80049dc:	6812      	ldr	r2, [r2, #0]
 80049de:	f012 0f02 	tst.w	r2, #2
 80049e2:	d106      	bne.n	80049f2 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 80049e4:	2001      	movs	r0, #1
 80049e6:	e076      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e8:	4a40      	ldr	r2, [pc, #256]	@ (8004aec <HAL_RCC_ClockConfig+0x178>)
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80049f0:	d076      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049f2:	493e      	ldr	r1, [pc, #248]	@ (8004aec <HAL_RCC_ClockConfig+0x178>)
 80049f4:	688a      	ldr	r2, [r1, #8]
 80049f6:	f022 0203 	bic.w	r2, r2, #3
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80049fe:	f7fe fef9 	bl	80037f4 <HAL_GetTick>
 8004a02:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a04:	4b39      	ldr	r3, [pc, #228]	@ (8004aec <HAL_RCC_ClockConfig+0x178>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 030c 	and.w	r3, r3, #12
 8004a0c:	6862      	ldr	r2, [r4, #4]
 8004a0e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004a12:	d016      	beq.n	8004a42 <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a14:	f7fe feee 	bl	80037f4 <HAL_GetTick>
 8004a18:	1b80      	subs	r0, r0, r6
 8004a1a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004a1e:	4298      	cmp	r0, r3
 8004a20:	d9f0      	bls.n	8004a04 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8004a22:	2003      	movs	r0, #3
 8004a24:	e057      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a26:	4a31      	ldr	r2, [pc, #196]	@ (8004aec <HAL_RCC_ClockConfig+0x178>)
 8004a28:	6812      	ldr	r2, [r2, #0]
 8004a2a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8004a2e:	d1e0      	bne.n	80049f2 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8004a30:	2001      	movs	r0, #1
 8004a32:	e050      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a34:	4a2d      	ldr	r2, [pc, #180]	@ (8004aec <HAL_RCC_ClockConfig+0x178>)
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8004a3c:	d1d9      	bne.n	80049f2 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 8004a3e:	2001      	movs	r0, #1
 8004a40:	e049      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	f013 0f02 	tst.w	r3, #2
 8004a48:	d00c      	beq.n	8004a64 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a4a:	68a2      	ldr	r2, [r4, #8]
 8004a4c:	4b27      	ldr	r3, [pc, #156]	@ (8004aec <HAL_RCC_ClockConfig+0x178>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d205      	bcs.n	8004a64 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a58:	4924      	ldr	r1, [pc, #144]	@ (8004aec <HAL_RCC_ClockConfig+0x178>)
 8004a5a:	688b      	ldr	r3, [r1, #8]
 8004a5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a60:	431a      	orrs	r2, r3
 8004a62:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a64:	4b20      	ldr	r3, [pc, #128]	@ (8004ae8 <HAL_RCC_ClockConfig+0x174>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	42ab      	cmp	r3, r5
 8004a6e:	d90a      	bls.n	8004a86 <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a70:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae8 <HAL_RCC_ClockConfig+0x174>)
 8004a72:	6813      	ldr	r3, [r2, #0]
 8004a74:	f023 0307 	bic.w	r3, r3, #7
 8004a78:	432b      	orrs	r3, r5
 8004a7a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7c:	6813      	ldr	r3, [r2, #0]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	42ab      	cmp	r3, r5
 8004a84:	d12e      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	f013 0f04 	tst.w	r3, #4
 8004a8c:	d006      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a8e:	4a17      	ldr	r2, [pc, #92]	@ (8004aec <HAL_RCC_ClockConfig+0x178>)
 8004a90:	6893      	ldr	r3, [r2, #8]
 8004a92:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004a96:	68e1      	ldr	r1, [r4, #12]
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	f013 0f08 	tst.w	r3, #8
 8004aa2:	d007      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aa4:	4a11      	ldr	r2, [pc, #68]	@ (8004aec <HAL_RCC_ClockConfig+0x178>)
 8004aa6:	6893      	ldr	r3, [r2, #8]
 8004aa8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004aac:	6921      	ldr	r1, [r4, #16]
 8004aae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004ab2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ab4:	f7ff fbce 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <HAL_RCC_ClockConfig+0x178>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8004af0 <HAL_RCC_ClockConfig+0x17c>)
 8004ac2:	5cd3      	ldrb	r3, [r2, r3]
 8004ac4:	f003 031f 	and.w	r3, r3, #31
 8004ac8:	40d8      	lsrs	r0, r3
 8004aca:	4b0a      	ldr	r3, [pc, #40]	@ (8004af4 <HAL_RCC_ClockConfig+0x180>)
 8004acc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004ace:	4b0a      	ldr	r3, [pc, #40]	@ (8004af8 <HAL_RCC_ClockConfig+0x184>)
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	f7fe fe4b 	bl	800376c <HAL_InitTick>
}
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004ad8:	2001      	movs	r0, #1
}
 8004ada:	4770      	bx	lr
      return HAL_ERROR;
 8004adc:	2001      	movs	r0, #1
 8004ade:	e7fa      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	e7f8      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	e7f6      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x162>
 8004ae8:	40022000 	.word	0x40022000
 8004aec:	40021000 	.word	0x40021000
 8004af0:	08008d60 	.word	0x08008d60
 8004af4:	20000010 	.word	0x20000010
 8004af8:	2000000c 	.word	0x2000000c

08004afc <HAL_RCC_GetHCLKFreq>:
}
 8004afc:	4b01      	ldr	r3, [pc, #4]	@ (8004b04 <HAL_RCC_GetHCLKFreq+0x8>)
 8004afe:	6818      	ldr	r0, [r3, #0]
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000010 	.word	0x20000010

08004b08 <HAL_RCC_GetPCLK1Freq>:
{
 8004b08:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b0a:	f7ff fff7 	bl	8004afc <HAL_RCC_GetHCLKFreq>
 8004b0e:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004b16:	4a04      	ldr	r2, [pc, #16]	@ (8004b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b18:	5cd3      	ldrb	r3, [r2, r3]
 8004b1a:	f003 031f 	and.w	r3, r3, #31
}
 8004b1e:	40d8      	lsrs	r0, r3
 8004b20:	bd08      	pop	{r3, pc}
 8004b22:	bf00      	nop
 8004b24:	40021000 	.word	0x40021000
 8004b28:	08008d58 	.word	0x08008d58

08004b2c <HAL_RCC_GetPCLK2Freq>:
{
 8004b2c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b2e:	f7ff ffe5 	bl	8004afc <HAL_RCC_GetHCLKFreq>
 8004b32:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004b3a:	4a04      	ldr	r2, [pc, #16]	@ (8004b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b3c:	5cd3      	ldrb	r3, [r2, r3]
 8004b3e:	f003 031f 	and.w	r3, r3, #31
}
 8004b42:	40d8      	lsrs	r0, r3
 8004b44:	bd08      	pop	{r3, pc}
 8004b46:	bf00      	nop
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	08008d58 	.word	0x08008d58

08004b50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b52:	4604      	mov	r4, r0
 8004b54:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b56:	4b58      	ldr	r3, [pc, #352]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x168>)
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f013 0f03 	tst.w	r3, #3
 8004b5e:	d017      	beq.n	8004b90 <RCCEx_PLLSAI1_Config+0x40>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b60:	4b55      	ldr	r3, [pc, #340]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x168>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0303 	and.w	r3, r3, #3
 8004b68:	6802      	ldr	r2, [r0, #0]
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d001      	beq.n	8004b72 <RCCEx_PLLSAI1_Config+0x22>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004b6e:	2601      	movs	r6, #1
 8004b70:	e016      	b.n	8004ba0 <RCCEx_PLLSAI1_Config+0x50>
       ||
 8004b72:	2a00      	cmp	r2, #0
 8004b74:	f000 809e 	beq.w	8004cb4 <RCCEx_PLLSAI1_Config+0x164>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b78:	4b4f      	ldr	r3, [pc, #316]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x168>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004b80:	3301      	adds	r3, #1
 8004b82:	6842      	ldr	r2, [r0, #4]
       ||
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d001      	beq.n	8004b8c <RCCEx_PLLSAI1_Config+0x3c>
      status = HAL_ERROR;
 8004b88:	2601      	movs	r6, #1
 8004b8a:	e009      	b.n	8004ba0 <RCCEx_PLLSAI1_Config+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8004b8c:	2600      	movs	r6, #0
 8004b8e:	e01b      	b.n	8004bc8 <RCCEx_PLLSAI1_Config+0x78>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b90:	6803      	ldr	r3, [r0, #0]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d057      	beq.n	8004c46 <RCCEx_PLLSAI1_Config+0xf6>
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d05c      	beq.n	8004c54 <RCCEx_PLLSAI1_Config+0x104>
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d002      	beq.n	8004ba4 <RCCEx_PLLSAI1_Config+0x54>
 8004b9e:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ba4:	4a44      	ldr	r2, [pc, #272]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x168>)
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	f012 0f02 	tst.w	r2, #2
 8004bac:	d05e      	beq.n	8004c6c <RCCEx_PLLSAI1_Config+0x11c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bae:	4842      	ldr	r0, [pc, #264]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x168>)
 8004bb0:	68c2      	ldr	r2, [r0, #12]
 8004bb2:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8004bb6:	6861      	ldr	r1, [r4, #4]
 8004bb8:	3901      	subs	r1, #1
 8004bba:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60c3      	str	r3, [r0, #12]
 8004bc2:	2600      	movs	r6, #0
  if(status == HAL_OK)
 8004bc4:	2e00      	cmp	r6, #0
 8004bc6:	d1eb      	bne.n	8004ba0 <RCCEx_PLLSAI1_Config+0x50>
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bc8:	4a3b      	ldr	r2, [pc, #236]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x168>)
 8004bca:	6813      	ldr	r3, [r2, #0]
 8004bcc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bd0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004bd2:	f7fe fe0f 	bl	80037f4 <HAL_GetTick>
 8004bd6:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bd8:	4b37      	ldr	r3, [pc, #220]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x168>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8004be0:	d005      	beq.n	8004bee <RCCEx_PLLSAI1_Config+0x9e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004be2:	f7fe fe07 	bl	80037f4 <HAL_GetTick>
 8004be6:	1bc3      	subs	r3, r0, r7
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d9f5      	bls.n	8004bd8 <RCCEx_PLLSAI1_Config+0x88>
        status = HAL_TIMEOUT;
 8004bec:	2603      	movs	r6, #3
    if(status == HAL_OK)
 8004bee:	2e00      	cmp	r6, #0
 8004bf0:	d1d6      	bne.n	8004ba0 <RCCEx_PLLSAI1_Config+0x50>
      if(Divider == DIVIDER_P_UPDATE)
 8004bf2:	2d00      	cmp	r5, #0
 8004bf4:	d13c      	bne.n	8004c70 <RCCEx_PLLSAI1_Config+0x120>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bf6:	4930      	ldr	r1, [pc, #192]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x168>)
 8004bf8:	690b      	ldr	r3, [r1, #16]
 8004bfa:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004bfe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c02:	68a0      	ldr	r0, [r4, #8]
 8004c04:	68e2      	ldr	r2, [r4, #12]
 8004c06:	06d2      	lsls	r2, r2, #27
 8004c08:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c10:	4a29      	ldr	r2, [pc, #164]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x168>)
 8004c12:	6813      	ldr	r3, [r2, #0]
 8004c14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c18:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004c1a:	f7fe fdeb 	bl	80037f4 <HAL_GetTick>
 8004c1e:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c20:	4b25      	ldr	r3, [pc, #148]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x168>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8004c28:	d105      	bne.n	8004c36 <RCCEx_PLLSAI1_Config+0xe6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c2a:	f7fe fde3 	bl	80037f4 <HAL_GetTick>
 8004c2e:	1b40      	subs	r0, r0, r5
 8004c30:	2802      	cmp	r0, #2
 8004c32:	d9f5      	bls.n	8004c20 <RCCEx_PLLSAI1_Config+0xd0>
          status = HAL_TIMEOUT;
 8004c34:	2603      	movs	r6, #3
      if(status == HAL_OK)
 8004c36:	2e00      	cmp	r6, #0
 8004c38:	d1b2      	bne.n	8004ba0 <RCCEx_PLLSAI1_Config+0x50>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x168>)
 8004c3c:	6913      	ldr	r3, [r2, #16]
 8004c3e:	69a1      	ldr	r1, [r4, #24]
 8004c40:	430b      	orrs	r3, r1
 8004c42:	6113      	str	r3, [r2, #16]
 8004c44:	e7ac      	b.n	8004ba0 <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c46:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x168>)
 8004c48:	6812      	ldr	r2, [r2, #0]
 8004c4a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8004c4e:	d1ae      	bne.n	8004bae <RCCEx_PLLSAI1_Config+0x5e>
 8004c50:	2601      	movs	r6, #1
 8004c52:	e7a5      	b.n	8004ba0 <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c54:	4a18      	ldr	r2, [pc, #96]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x168>)
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8004c5c:	d1a7      	bne.n	8004bae <RCCEx_PLLSAI1_Config+0x5e>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c5e:	4a16      	ldr	r2, [pc, #88]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x168>)
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8004c66:	d1a2      	bne.n	8004bae <RCCEx_PLLSAI1_Config+0x5e>
 8004c68:	2601      	movs	r6, #1
 8004c6a:	e799      	b.n	8004ba0 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 8004c6c:	2601      	movs	r6, #1
 8004c6e:	e7a9      	b.n	8004bc4 <RCCEx_PLLSAI1_Config+0x74>
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c70:	2d01      	cmp	r5, #1
 8004c72:	d00f      	beq.n	8004c94 <RCCEx_PLLSAI1_Config+0x144>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c74:	4810      	ldr	r0, [pc, #64]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x168>)
 8004c76:	6902      	ldr	r2, [r0, #16]
 8004c78:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8004c7c:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8004c80:	68a1      	ldr	r1, [r4, #8]
 8004c82:	6963      	ldr	r3, [r4, #20]
 8004c84:	085b      	lsrs	r3, r3, #1
 8004c86:	3b01      	subs	r3, #1
 8004c88:	065b      	lsls	r3, r3, #25
 8004c8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	6102      	str	r2, [r0, #16]
 8004c92:	e7bd      	b.n	8004c10 <RCCEx_PLLSAI1_Config+0xc0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c94:	4808      	ldr	r0, [pc, #32]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x168>)
 8004c96:	6902      	ldr	r2, [r0, #16]
 8004c98:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8004c9c:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8004ca0:	68a1      	ldr	r1, [r4, #8]
 8004ca2:	6923      	ldr	r3, [r4, #16]
 8004ca4:	085b      	lsrs	r3, r3, #1
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	055b      	lsls	r3, r3, #21
 8004caa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	6102      	str	r2, [r0, #16]
 8004cb2:	e7ad      	b.n	8004c10 <RCCEx_PLLSAI1_Config+0xc0>
      status = HAL_ERROR;
 8004cb4:	2601      	movs	r6, #1
 8004cb6:	e773      	b.n	8004ba0 <RCCEx_PLLSAI1_Config+0x50>
 8004cb8:	40021000 	.word	0x40021000

08004cbc <HAL_RCCEx_PeriphCLKConfig>:
{
 8004cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cc4:	6803      	ldr	r3, [r0, #0]
 8004cc6:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004cca:	d025      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ccc:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004cce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cd2:	d006      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004cd4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004cd8:	d012      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004cda:	b14b      	cbz	r3, 8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004cdc:	2601      	movs	r6, #1
 8004cde:	4637      	mov	r7, r6
 8004ce0:	e01c      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004ce2:	4ab1      	ldr	r2, [pc, #708]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ce4:	68d3      	ldr	r3, [r2, #12]
 8004ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cea:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cec:	2700      	movs	r7, #0
 8004cee:	e008      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	3004      	adds	r0, #4
 8004cf4:	f7ff ff2c 	bl	8004b50 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8004cf8:	4607      	mov	r7, r0
 8004cfa:	b110      	cbz	r0, 8004d02 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cfc:	4606      	mov	r6, r0
 8004cfe:	e00d      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x60>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004d00:	2700      	movs	r7, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d02:	4aa9      	ldr	r2, [pc, #676]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004d04:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004d08:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004d0c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d14:	2600      	movs	r6, #0
 8004d16:	e001      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004d18:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d1a:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004d22:	d06b      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d24:	4ba0      	ldr	r3, [pc, #640]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d28:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004d2c:	d14c      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	4b9e      	ldr	r3, [pc, #632]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004d30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d32:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004d36:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004d42:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d46:	4a99      	ldr	r2, [pc, #612]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d48:	6813      	ldr	r3, [r2, #0]
 8004d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d4e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004d50:	f7fe fd50 	bl	80037f4 <HAL_GetTick>
 8004d54:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d56:	4b95      	ldr	r3, [pc, #596]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004d5e:	d105      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d60:	f7fe fd48 	bl	80037f4 <HAL_GetTick>
 8004d64:	1b40      	subs	r0, r0, r5
 8004d66:	2802      	cmp	r0, #2
 8004d68:	d9f5      	bls.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = HAL_TIMEOUT;
 8004d6a:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 8004d6c:	2f00      	cmp	r7, #0
 8004d6e:	d140      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x136>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d70:	4b8d      	ldr	r3, [pc, #564]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d76:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004d7a:	d015      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004d7c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d012      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xec>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d82:	4a89      	ldr	r2, [pc, #548]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004d84:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d8c:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8004d90:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8004d94:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d98:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8004d9c:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8004da0:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8004da4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004da8:	f013 0f01 	tst.w	r3, #1
 8004dac:	d10f      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x112>
      if(ret == HAL_OK)
 8004dae:	2f00      	cmp	r7, #0
 8004db0:	f040 80f7 	bne.w	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004db4:	4a7c      	ldr	r2, [pc, #496]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004db6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dbe:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dc6:	e015      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    FlagStatus       pwrclkchanged = RESET;
 8004dc8:	f04f 0800 	mov.w	r8, #0
 8004dcc:	e7bb      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        tickstart = HAL_GetTick();
 8004dce:	f7fe fd11 	bl	80037f4 <HAL_GetTick>
 8004dd2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dd4:	4b74      	ldr	r3, [pc, #464]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dda:	f013 0f02 	tst.w	r3, #2
 8004dde:	d1e6      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xf2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de0:	f7fe fd08 	bl	80037f4 <HAL_GetTick>
 8004de4:	1b40      	subs	r0, r0, r5
 8004de6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004dea:	4298      	cmp	r0, r3
 8004dec:	d9f2      	bls.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
            ret = HAL_TIMEOUT;
 8004dee:	2703      	movs	r7, #3
 8004df0:	e7dd      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xf2>
      status = ret;
 8004df2:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 8004df4:	f1b8 0f00 	cmp.w	r8, #0
 8004df8:	f040 80da 	bne.w	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	f013 0f01 	tst.w	r3, #1
 8004e02:	d008      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e04:	4a68      	ldr	r2, [pc, #416]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e06:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004e0a:	f023 0303 	bic.w	r3, r3, #3
 8004e0e:	6a21      	ldr	r1, [r4, #32]
 8004e10:	430b      	orrs	r3, r1
 8004e12:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	f013 0f02 	tst.w	r3, #2
 8004e1c:	d008      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e1e:	4a62      	ldr	r2, [pc, #392]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e20:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004e24:	f023 030c 	bic.w	r3, r3, #12
 8004e28:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	f013 0f04 	tst.w	r3, #4
 8004e36:	d008      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x18e>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e38:	4a5b      	ldr	r2, [pc, #364]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e3a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004e3e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004e42:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004e44:	430b      	orrs	r3, r1
 8004e46:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	f013 0f20 	tst.w	r3, #32
 8004e50:	d008      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e52:	4a55      	ldr	r2, [pc, #340]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e54:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004e58:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004e5c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8004e6a:	d008      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e6c:	4a4e      	ldr	r2, [pc, #312]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e6e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004e72:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8004e76:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004e84:	d008      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e86:	4a48      	ldr	r2, [pc, #288]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e88:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004e8c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004e90:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004e92:	430b      	orrs	r3, r1
 8004e94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004e9e:	d008      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ea0:	4a41      	ldr	r2, [pc, #260]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ea2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004ea6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004eaa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004eac:	430b      	orrs	r3, r1
 8004eae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004eb8:	d008      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x210>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eba:	4a3b      	ldr	r2, [pc, #236]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ebc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004ec0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004ec4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ec6:	430b      	orrs	r3, r1
 8004ec8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004ed2:	d008      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ed4:	4a34      	ldr	r2, [pc, #208]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ed6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004eda:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004ede:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8004eec:	d00f      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eee:	4a2e      	ldr	r2, [pc, #184]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ef0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004ef4:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8004ef8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004efa:	430b      	orrs	r3, r1
 8004efc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f00:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004f02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f06:	d059      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x300>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f0c:	d05b      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8004f14:	d00f      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f16:	4a24      	ldr	r2, [pc, #144]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f18:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004f1c:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8004f20:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8004f22:	430b      	orrs	r3, r1
 8004f24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f28:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004f2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f2e:	d052      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f34:	d054      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x324>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8004f3c:	d00f      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f40:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004f44:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8004f48:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004f4a:	430b      	orrs	r3, r1
 8004f4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f50:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004f52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f56:	d04b      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f5c:	d04d      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x33e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004f64:	d00c      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f66:	4a10      	ldr	r2, [pc, #64]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f68:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004f6c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8004f70:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8004f72:	430b      	orrs	r3, r1
 8004f74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f78:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004f7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f7e:	d044      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004f86:	d008      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f88:	4a07      	ldr	r2, [pc, #28]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004f8e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f92:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8004f94:	430b      	orrs	r3, r1
 8004f96:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	b002      	add	sp, #8
 8004f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8004fa2:	463e      	mov	r6, r7
 8004fa4:	e726      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8004fa6:	bf00      	nop
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	40007000 	.word	0x40007000
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004fb2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004fb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fba:	e71f      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x140>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fbc:	68d3      	ldr	r3, [r2, #12]
 8004fbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fc2:	60d3      	str	r3, [r2, #12]
 8004fc4:	e7a3      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	1d20      	adds	r0, r4, #4
 8004fca:	f7ff fdc1 	bl	8004b50 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	d09d      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x252>
          status = ret;
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	e79b      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fd6:	68d3      	ldr	r3, [r2, #12]
 8004fd8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fdc:	60d3      	str	r3, [r2, #12]
 8004fde:	e7aa      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	1d20      	adds	r0, r4, #4
 8004fe4:	f7ff fdb4 	bl	8004b50 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	d0a4      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        status = ret;
 8004fec:	4606      	mov	r6, r0
 8004fee:	e7a2      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ff0:	68d3      	ldr	r3, [r2, #12]
 8004ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ff6:	60d3      	str	r3, [r2, #12]
 8004ff8:	e7b1      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	1d20      	adds	r0, r4, #4
 8004ffe:	f7ff fda7 	bl	8004b50 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8005002:	2800      	cmp	r0, #0
 8005004:	d0ab      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
        status = ret;
 8005006:	4606      	mov	r6, r0
 8005008:	e7a9      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800500a:	2102      	movs	r1, #2
 800500c:	1d20      	adds	r0, r4, #4
 800500e:	f7ff fd9f 	bl	8004b50 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8005012:	2800      	cmp	r0, #0
 8005014:	d0b4      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        status = ret;
 8005016:	4606      	mov	r6, r0
 8005018:	e7b2      	b.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800501a:	bf00      	nop
 800501c:	40021000 	.word	0x40021000

08005020 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005020:	2800      	cmp	r0, #0
 8005022:	d06a      	beq.n	80050fa <HAL_SPI_Init+0xda>
{
 8005024:	b510      	push	{r4, lr}
 8005026:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005028:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800502a:	b933      	cbnz	r3, 800503a <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800502c:	6843      	ldr	r3, [r0, #4]
 800502e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005032:	d005      	beq.n	8005040 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005034:	2300      	movs	r3, #0
 8005036:	61c3      	str	r3, [r0, #28]
 8005038:	e002      	b.n	8005040 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800503a:	2300      	movs	r3, #0
 800503c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800503e:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005040:	2300      	movs	r3, #0
 8005042:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005044:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8005048:	2b00      	cmp	r3, #0
 800504a:	d04d      	beq.n	80050e8 <HAL_SPI_Init+0xc8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800504c:	2302      	movs	r3, #2
 800504e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	6813      	ldr	r3, [r2, #0]
 8005056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800505a:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800505c:	68e3      	ldr	r3, [r4, #12]
 800505e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005062:	d947      	bls.n	80050f4 <HAL_SPI_Init+0xd4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005064:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005066:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800506a:	d004      	beq.n	8005076 <HAL_SPI_Init+0x56>
 800506c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005070:	d001      	beq.n	8005076 <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005072:	2300      	movs	r3, #0
 8005074:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005076:	6863      	ldr	r3, [r4, #4]
 8005078:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 800507c:	68a1      	ldr	r1, [r4, #8]
 800507e:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 8005082:	430b      	orrs	r3, r1
 8005084:	6921      	ldr	r1, [r4, #16]
 8005086:	f001 0102 	and.w	r1, r1, #2
 800508a:	430b      	orrs	r3, r1
 800508c:	6961      	ldr	r1, [r4, #20]
 800508e:	f001 0101 	and.w	r1, r1, #1
 8005092:	430b      	orrs	r3, r1
 8005094:	69a1      	ldr	r1, [r4, #24]
 8005096:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 800509a:	430b      	orrs	r3, r1
 800509c:	69e1      	ldr	r1, [r4, #28]
 800509e:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 80050a2:	430b      	orrs	r3, r1
 80050a4:	6a21      	ldr	r1, [r4, #32]
 80050a6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80050aa:	430b      	orrs	r3, r1
 80050ac:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80050ae:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 80050b2:	6820      	ldr	r0, [r4, #0]
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050b8:	8b63      	ldrh	r3, [r4, #26]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80050c0:	f001 0110 	and.w	r1, r1, #16
 80050c4:	430b      	orrs	r3, r1
 80050c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050c8:	f001 0108 	and.w	r1, r1, #8
 80050cc:	430b      	orrs	r3, r1
 80050ce:	68e1      	ldr	r1, [r4, #12]
 80050d0:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 80050d4:	430b      	orrs	r3, r1
 80050d6:	6821      	ldr	r1, [r4, #0]
 80050d8:	431a      	orrs	r2, r3
 80050da:	604a      	str	r2, [r1, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050dc:	2000      	movs	r0, #0
 80050de:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050e0:	2301      	movs	r3, #1
 80050e2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d

  return HAL_OK;
}
 80050e6:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80050e8:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 80050ec:	4620      	mov	r0, r4
 80050ee:	f7fe febf 	bl	8003e70 <HAL_SPI_MspInit>
 80050f2:	e7ab      	b.n	800504c <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80050f8:	e7b5      	b.n	8005066 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 80050fa:	2001      	movs	r0, #1
}
 80050fc:	4770      	bx	lr
	...

08005100 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005100:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005102:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005104:	6a03      	ldr	r3, [r0, #32]
 8005106:	f023 0301 	bic.w	r3, r3, #1
 800510a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800510e:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005110:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005114:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005118:	680d      	ldr	r5, [r1, #0]
 800511a:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800511c:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005120:	688b      	ldr	r3, [r1, #8]
 8005122:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005124:	4a14      	ldr	r2, [pc, #80]	@ (8005178 <TIM_OC1_SetConfig+0x78>)
 8005126:	4290      	cmp	r0, r2
 8005128:	d007      	beq.n	800513a <TIM_OC1_SetConfig+0x3a>
 800512a:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 800512e:	4290      	cmp	r0, r2
 8005130:	d003      	beq.n	800513a <TIM_OC1_SetConfig+0x3a>
 8005132:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005136:	4290      	cmp	r0, r2
 8005138:	d105      	bne.n	8005146 <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800513a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800513e:	68ca      	ldr	r2, [r1, #12]
 8005140:	431a      	orrs	r2, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005142:	f022 0304 	bic.w	r3, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005146:	4a0c      	ldr	r2, [pc, #48]	@ (8005178 <TIM_OC1_SetConfig+0x78>)
 8005148:	4290      	cmp	r0, r2
 800514a:	d007      	beq.n	800515c <TIM_OC1_SetConfig+0x5c>
 800514c:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 8005150:	4290      	cmp	r0, r2
 8005152:	d003      	beq.n	800515c <TIM_OC1_SetConfig+0x5c>
 8005154:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005158:	4290      	cmp	r0, r2
 800515a:	d105      	bne.n	8005168 <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800515c:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005160:	694a      	ldr	r2, [r1, #20]
 8005162:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005164:	698c      	ldr	r4, [r1, #24]
 8005166:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005168:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800516a:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800516c:	684a      	ldr	r2, [r1, #4]
 800516e:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005170:	6203      	str	r3, [r0, #32]
}
 8005172:	bc30      	pop	{r4, r5}
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40012c00 	.word	0x40012c00

0800517c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800517c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005180:	6a02      	ldr	r2, [r0, #32]
 8005182:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005186:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005188:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800518a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800518c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005190:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005194:	680d      	ldr	r5, [r1, #0]
 8005196:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005198:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800519c:	688a      	ldr	r2, [r1, #8]
 800519e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051a2:	4a10      	ldr	r2, [pc, #64]	@ (80051e4 <TIM_OC3_SetConfig+0x68>)
 80051a4:	4290      	cmp	r0, r2
 80051a6:	d007      	beq.n	80051b8 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a8:	4a0f      	ldr	r2, [pc, #60]	@ (80051e8 <TIM_OC3_SetConfig+0x6c>)
 80051aa:	4290      	cmp	r0, r2
 80051ac:	d00b      	beq.n	80051c6 <TIM_OC3_SetConfig+0x4a>
 80051ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80051b2:	4290      	cmp	r0, r2
 80051b4:	d10f      	bne.n	80051d6 <TIM_OC3_SetConfig+0x5a>
 80051b6:	e006      	b.n	80051c6 <TIM_OC3_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC3NP;
 80051b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051bc:	68ca      	ldr	r2, [r1, #12]
 80051be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80051c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051c6:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ca:	694a      	ldr	r2, [r1, #20]
 80051cc:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051d0:	698a      	ldr	r2, [r1, #24]
 80051d2:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051d8:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051da:	684a      	ldr	r2, [r1, #4]
 80051dc:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051de:	6203      	str	r3, [r0, #32]
}
 80051e0:	bc30      	pop	{r4, r5}
 80051e2:	4770      	bx	lr
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40014000 	.word	0x40014000

080051ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ee:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051f0:	6a03      	ldr	r3, [r0, #32]
 80051f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051f6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051fa:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005200:	f423 43e6 	bic.w	r3, r3, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005204:	680d      	ldr	r5, [r1, #0]
 8005206:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800520a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800520e:	688d      	ldr	r5, [r1, #8]
 8005210:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005214:	4d0b      	ldr	r5, [pc, #44]	@ (8005244 <TIM_OC4_SetConfig+0x58>)
 8005216:	42a8      	cmp	r0, r5
 8005218:	d007      	beq.n	800522a <TIM_OC4_SetConfig+0x3e>
 800521a:	f505 55a0 	add.w	r5, r5, #5120	@ 0x1400
 800521e:	42a8      	cmp	r0, r5
 8005220:	d003      	beq.n	800522a <TIM_OC4_SetConfig+0x3e>
 8005222:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005226:	42a8      	cmp	r0, r5
 8005228:	d104      	bne.n	8005234 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800522a:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800522e:	694d      	ldr	r5, [r1, #20]
 8005230:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005234:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005236:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005238:	684b      	ldr	r3, [r1, #4]
 800523a:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523c:	6202      	str	r2, [r0, #32]
}
 800523e:	bc30      	pop	{r4, r5}
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40012c00 	.word	0x40012c00

08005248 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005248:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800524c:	6a02      	ldr	r2, [r0, #32]
 800524e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005252:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005254:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005256:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005258:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800525c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005260:	680d      	ldr	r5, [r1, #0]
 8005262:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005264:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005268:	688d      	ldr	r5, [r1, #8]
 800526a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526e:	4d0b      	ldr	r5, [pc, #44]	@ (800529c <TIM_OC5_SetConfig+0x54>)
 8005270:	42a8      	cmp	r0, r5
 8005272:	d007      	beq.n	8005284 <TIM_OC5_SetConfig+0x3c>
 8005274:	f505 55a0 	add.w	r5, r5, #5120	@ 0x1400
 8005278:	42a8      	cmp	r0, r5
 800527a:	d003      	beq.n	8005284 <TIM_OC5_SetConfig+0x3c>
 800527c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005280:	42a8      	cmp	r0, r5
 8005282:	d104      	bne.n	800528e <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005284:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005288:	694d      	ldr	r5, [r1, #20]
 800528a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005290:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005292:	684a      	ldr	r2, [r1, #4]
 8005294:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005296:	6203      	str	r3, [r0, #32]
}
 8005298:	bc30      	pop	{r4, r5}
 800529a:	4770      	bx	lr
 800529c:	40012c00 	.word	0x40012c00

080052a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052a0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a2:	6a02      	ldr	r2, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052a4:	6a03      	ldr	r3, [r0, #32]
 80052a6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80052aa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052ac:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052ae:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b8:	680d      	ldr	r5, [r1, #0]
 80052ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052be:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052c2:	688d      	ldr	r5, [r1, #8]
 80052c4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c8:	4d0b      	ldr	r5, [pc, #44]	@ (80052f8 <TIM_OC6_SetConfig+0x58>)
 80052ca:	42a8      	cmp	r0, r5
 80052cc:	d007      	beq.n	80052de <TIM_OC6_SetConfig+0x3e>
 80052ce:	f505 55a0 	add.w	r5, r5, #5120	@ 0x1400
 80052d2:	42a8      	cmp	r0, r5
 80052d4:	d003      	beq.n	80052de <TIM_OC6_SetConfig+0x3e>
 80052d6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80052da:	42a8      	cmp	r0, r5
 80052dc:	d104      	bne.n	80052e8 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052de:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052e2:	694d      	ldr	r5, [r1, #20]
 80052e4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052ea:	6543      	str	r3, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052ec:	684b      	ldr	r3, [r1, #4]
 80052ee:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f0:	6202      	str	r2, [r0, #32]
}
 80052f2:	bc30      	pop	{r4, r5}
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40012c00 	.word	0x40012c00

080052fc <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80052fc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b01      	cmp	r3, #1
 8005304:	d121      	bne.n	800534a <HAL_TIM_Base_Start+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8005306:	2302      	movs	r3, #2
 8005308:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800530c:	6803      	ldr	r3, [r0, #0]
 800530e:	4a12      	ldr	r2, [pc, #72]	@ (8005358 <HAL_TIM_Base_Start+0x5c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00c      	beq.n	800532e <HAL_TIM_Base_Start+0x32>
 8005314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005318:	d009      	beq.n	800532e <HAL_TIM_Base_Start+0x32>
 800531a:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 800531e:	4293      	cmp	r3, r2
 8005320:	d005      	beq.n	800532e <HAL_TIM_Base_Start+0x32>
    __HAL_TIM_ENABLE(htim);
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	f042 0201 	orr.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800532a:	2000      	movs	r0, #0
 800532c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800532e:	6899      	ldr	r1, [r3, #8]
 8005330:	4a0a      	ldr	r2, [pc, #40]	@ (800535c <HAL_TIM_Base_Start+0x60>)
 8005332:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005334:	2a06      	cmp	r2, #6
 8005336:	d00a      	beq.n	800534e <HAL_TIM_Base_Start+0x52>
 8005338:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800533c:	d009      	beq.n	8005352 <HAL_TIM_Base_Start+0x56>
      __HAL_TIM_ENABLE(htim);
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	f042 0201 	orr.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005346:	2000      	movs	r0, #0
 8005348:	4770      	bx	lr
    return HAL_ERROR;
 800534a:	2001      	movs	r0, #1
 800534c:	4770      	bx	lr
  return HAL_OK;
 800534e:	2000      	movs	r0, #0
 8005350:	4770      	bx	lr
 8005352:	2000      	movs	r0, #0
}
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40012c00 	.word	0x40012c00
 800535c:	00010007 	.word	0x00010007

08005360 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8005360:	4770      	bx	lr

08005362 <HAL_TIM_IC_CaptureCallback>:
}
 8005362:	4770      	bx	lr

08005364 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8005364:	4770      	bx	lr

08005366 <HAL_TIM_TriggerCallback>:
}
 8005366:	4770      	bx	lr

08005368 <HAL_TIM_IRQHandler>:
{
 8005368:	b570      	push	{r4, r5, r6, lr}
 800536a:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800536c:	6803      	ldr	r3, [r0, #0]
 800536e:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005370:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005372:	f015 0f02 	tst.w	r5, #2
 8005376:	d010      	beq.n	800539a <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005378:	f016 0f02 	tst.w	r6, #2
 800537c:	d00d      	beq.n	800539a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800537e:	f06f 0202 	mvn.w	r2, #2
 8005382:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005384:	2301      	movs	r3, #1
 8005386:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005388:	6803      	ldr	r3, [r0, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	f013 0f03 	tst.w	r3, #3
 8005390:	d064      	beq.n	800545c <HAL_TIM_IRQHandler+0xf4>
          HAL_TIM_IC_CaptureCallback(htim);
 8005392:	f7ff ffe6 	bl	8005362 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005396:	2300      	movs	r3, #0
 8005398:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800539a:	f015 0f04 	tst.w	r5, #4
 800539e:	d012      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053a0:	f016 0f04 	tst.w	r6, #4
 80053a4:	d00f      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	f06f 0204 	mvn.w	r2, #4
 80053ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ae:	2302      	movs	r3, #2
 80053b0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80053ba:	d055      	beq.n	8005468 <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 80053bc:	4620      	mov	r0, r4
 80053be:	f7ff ffd0 	bl	8005362 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c2:	2300      	movs	r3, #0
 80053c4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053c6:	f015 0f08 	tst.w	r5, #8
 80053ca:	d012      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053cc:	f016 0f08 	tst.w	r6, #8
 80053d0:	d00f      	beq.n	80053f2 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	f06f 0208 	mvn.w	r2, #8
 80053d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053da:	2304      	movs	r3, #4
 80053dc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f013 0f03 	tst.w	r3, #3
 80053e6:	d046      	beq.n	8005476 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 80053e8:	4620      	mov	r0, r4
 80053ea:	f7ff ffba 	bl	8005362 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ee:	2300      	movs	r3, #0
 80053f0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053f2:	f015 0f10 	tst.w	r5, #16
 80053f6:	d012      	beq.n	800541e <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053f8:	f016 0f10 	tst.w	r6, #16
 80053fc:	d00f      	beq.n	800541e <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	f06f 0210 	mvn.w	r2, #16
 8005404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005406:	2308      	movs	r3, #8
 8005408:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005412:	d037      	beq.n	8005484 <HAL_TIM_IRQHandler+0x11c>
        HAL_TIM_IC_CaptureCallback(htim);
 8005414:	4620      	mov	r0, r4
 8005416:	f7ff ffa4 	bl	8005362 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541a:	2300      	movs	r3, #0
 800541c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800541e:	f015 0f01 	tst.w	r5, #1
 8005422:	d002      	beq.n	800542a <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005424:	f016 0f01 	tst.w	r6, #1
 8005428:	d133      	bne.n	8005492 <HAL_TIM_IRQHandler+0x12a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800542a:	f415 5f02 	tst.w	r5, #8320	@ 0x2080
 800542e:	d002      	beq.n	8005436 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005430:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8005434:	d135      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x13a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005436:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800543a:	d002      	beq.n	8005442 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800543c:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8005440:	d137      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x14a>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005442:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8005446:	d002      	beq.n	800544e <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005448:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800544c:	d139      	bne.n	80054c2 <HAL_TIM_IRQHandler+0x15a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800544e:	f015 0f20 	tst.w	r5, #32
 8005452:	d002      	beq.n	800545a <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005454:	f016 0f20 	tst.w	r6, #32
 8005458:	d13b      	bne.n	80054d2 <HAL_TIM_IRQHandler+0x16a>
}
 800545a:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800545c:	f7ff ff80 	bl	8005360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005460:	4620      	mov	r0, r4
 8005462:	f7ff ff7f 	bl	8005364 <HAL_TIM_PWM_PulseFinishedCallback>
 8005466:	e796      	b.n	8005396 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005468:	4620      	mov	r0, r4
 800546a:	f7ff ff79 	bl	8005360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800546e:	4620      	mov	r0, r4
 8005470:	f7ff ff78 	bl	8005364 <HAL_TIM_PWM_PulseFinishedCallback>
 8005474:	e7a5      	b.n	80053c2 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005476:	4620      	mov	r0, r4
 8005478:	f7ff ff72 	bl	8005360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547c:	4620      	mov	r0, r4
 800547e:	f7ff ff71 	bl	8005364 <HAL_TIM_PWM_PulseFinishedCallback>
 8005482:	e7b4      	b.n	80053ee <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005484:	4620      	mov	r0, r4
 8005486:	f7ff ff6b 	bl	8005360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548a:	4620      	mov	r0, r4
 800548c:	f7ff ff6a 	bl	8005364 <HAL_TIM_PWM_PulseFinishedCallback>
 8005490:	e7c3      	b.n	800541a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	f06f 0201 	mvn.w	r2, #1
 8005498:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800549a:	4620      	mov	r0, r4
 800549c:	f7fd fbf2 	bl	8002c84 <HAL_TIM_PeriodElapsedCallback>
 80054a0:	e7c3      	b.n	800542a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80054a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80054aa:	4620      	mov	r0, r4
 80054ac:	f000 faf7 	bl	8005a9e <HAL_TIMEx_BreakCallback>
 80054b0:	e7c1      	b.n	8005436 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80054b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 faf0 	bl	8005aa0 <HAL_TIMEx_Break2Callback>
 80054c0:	e7bf      	b.n	8005442 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80054ca:	4620      	mov	r0, r4
 80054cc:	f7ff ff4b 	bl	8005366 <HAL_TIM_TriggerCallback>
 80054d0:	e7bd      	b.n	800544e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	f06f 0220 	mvn.w	r2, #32
 80054d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 fade 	bl	8005a9c <HAL_TIMEx_CommutCallback>
}
 80054e0:	e7bb      	b.n	800545a <HAL_TIM_IRQHandler+0xf2>
	...

080054e4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80054e4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005560 <TIM_Base_SetConfig+0x7c>)
 80054e8:	4290      	cmp	r0, r2
 80054ea:	d002      	beq.n	80054f2 <TIM_Base_SetConfig+0xe>
 80054ec:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80054f0:	d103      	bne.n	80054fa <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80054f6:	684a      	ldr	r2, [r1, #4]
 80054f8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054fa:	4a19      	ldr	r2, [pc, #100]	@ (8005560 <TIM_Base_SetConfig+0x7c>)
 80054fc:	4290      	cmp	r0, r2
 80054fe:	d00a      	beq.n	8005516 <TIM_Base_SetConfig+0x32>
 8005500:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8005504:	d007      	beq.n	8005516 <TIM_Base_SetConfig+0x32>
 8005506:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 800550a:	4290      	cmp	r0, r2
 800550c:	d003      	beq.n	8005516 <TIM_Base_SetConfig+0x32>
 800550e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005512:	4290      	cmp	r0, r2
 8005514:	d103      	bne.n	800551e <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005516:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800551a:	68ca      	ldr	r2, [r1, #12]
 800551c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800551e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005522:	694a      	ldr	r2, [r1, #20]
 8005524:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005526:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005528:	688b      	ldr	r3, [r1, #8]
 800552a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800552c:	680b      	ldr	r3, [r1, #0]
 800552e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005530:	4b0b      	ldr	r3, [pc, #44]	@ (8005560 <TIM_Base_SetConfig+0x7c>)
 8005532:	4298      	cmp	r0, r3
 8005534:	d007      	beq.n	8005546 <TIM_Base_SetConfig+0x62>
 8005536:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 800553a:	4298      	cmp	r0, r3
 800553c:	d003      	beq.n	8005546 <TIM_Base_SetConfig+0x62>
 800553e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005542:	4298      	cmp	r0, r3
 8005544:	d101      	bne.n	800554a <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8005546:	690b      	ldr	r3, [r1, #16]
 8005548:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800554a:	2301      	movs	r3, #1
 800554c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800554e:	6903      	ldr	r3, [r0, #16]
 8005550:	f013 0f01 	tst.w	r3, #1
 8005554:	d003      	beq.n	800555e <TIM_Base_SetConfig+0x7a>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005556:	6903      	ldr	r3, [r0, #16]
 8005558:	f023 0301 	bic.w	r3, r3, #1
 800555c:	6103      	str	r3, [r0, #16]
}
 800555e:	4770      	bx	lr
 8005560:	40012c00 	.word	0x40012c00

08005564 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8005564:	b360      	cbz	r0, 80055c0 <HAL_TIM_OC_Init+0x5c>
{
 8005566:	b510      	push	{r4, lr}
 8005568:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800556a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800556e:	b313      	cbz	r3, 80055b6 <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	2302      	movs	r3, #2
 8005572:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005576:	4621      	mov	r1, r4
 8005578:	f851 0b04 	ldr.w	r0, [r1], #4
 800557c:	f7ff ffb2 	bl	80054e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005580:	2301      	movs	r3, #1
 8005582:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005586:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800558a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800558e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005592:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005596:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800559a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800559e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80055a2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80055a6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80055aa:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80055ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80055b2:	2000      	movs	r0, #0
}
 80055b4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80055b6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 80055ba:	f7fe fc8f 	bl	8003edc <HAL_TIM_OC_MspInit>
 80055be:	e7d7      	b.n	8005570 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 80055c0:	2001      	movs	r0, #1
}
 80055c2:	4770      	bx	lr

080055c4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80055c4:	b360      	cbz	r0, 8005620 <HAL_TIM_PWM_Init+0x5c>
{
 80055c6:	b510      	push	{r4, lr}
 80055c8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80055ca:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80055ce:	b313      	cbz	r3, 8005616 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	2302      	movs	r3, #2
 80055d2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055d6:	4621      	mov	r1, r4
 80055d8:	f851 0b04 	ldr.w	r0, [r1], #4
 80055dc:	f7ff ff82 	bl	80054e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80055ea:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80055ee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80055f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80055f6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005602:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005606:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800560a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800560e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005612:	2000      	movs	r0, #0
}
 8005614:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005616:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800561a:	f7fe fc75 	bl	8003f08 <HAL_TIM_PWM_MspInit>
 800561e:	e7d7      	b.n	80055d0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005620:	2001      	movs	r0, #1
}
 8005622:	4770      	bx	lr

08005624 <TIM_OC2_SetConfig>:
{
 8005624:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8005626:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005628:	6a02      	ldr	r2, [r0, #32]
 800562a:	f022 0210 	bic.w	r2, r2, #16
 800562e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005630:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005632:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005634:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8005638:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800563c:	680d      	ldr	r5, [r1, #0]
 800563e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8005642:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005646:	688d      	ldr	r5, [r1, #8]
 8005648:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800564c:	4d10      	ldr	r5, [pc, #64]	@ (8005690 <TIM_OC2_SetConfig+0x6c>)
 800564e:	42a8      	cmp	r0, r5
 8005650:	d007      	beq.n	8005662 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005652:	4d10      	ldr	r5, [pc, #64]	@ (8005694 <TIM_OC2_SetConfig+0x70>)
 8005654:	42a8      	cmp	r0, r5
 8005656:	d00b      	beq.n	8005670 <TIM_OC2_SetConfig+0x4c>
 8005658:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800565c:	42a8      	cmp	r0, r5
 800565e:	d10f      	bne.n	8005680 <TIM_OC2_SetConfig+0x5c>
 8005660:	e006      	b.n	8005670 <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 8005662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005666:	68cd      	ldr	r5, [r1, #12]
 8005668:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800566c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005670:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005674:	694d      	ldr	r5, [r1, #20]
 8005676:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800567a:	698d      	ldr	r5, [r1, #24]
 800567c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8005680:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005682:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005684:	684a      	ldr	r2, [r1, #4]
 8005686:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005688:	6203      	str	r3, [r0, #32]
}
 800568a:	bc30      	pop	{r4, r5}
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40012c00 	.word	0x40012c00
 8005694:	40014000 	.word	0x40014000

08005698 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8005698:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d036      	beq.n	800570e <HAL_TIM_OC_ConfigChannel+0x76>
{
 80056a0:	b510      	push	{r4, lr}
 80056a2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80056a4:	2301      	movs	r3, #1
 80056a6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80056aa:	2a14      	cmp	r2, #20
 80056ac:	d82a      	bhi.n	8005704 <HAL_TIM_OC_ConfigChannel+0x6c>
 80056ae:	e8df f002 	tbb	[pc, r2]
 80056b2:	290b      	.short	0x290b
 80056b4:	29102929 	.word	0x29102929
 80056b8:	29152929 	.word	0x29152929
 80056bc:	291a2929 	.word	0x291a2929
 80056c0:	291f2929 	.word	0x291f2929
 80056c4:	2929      	.short	0x2929
 80056c6:	24          	.byte	0x24
 80056c7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056c8:	6800      	ldr	r0, [r0, #0]
 80056ca:	f7ff fd19 	bl	8005100 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80056ce:	2000      	movs	r0, #0
      break;
 80056d0:	e019      	b.n	8005706 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056d2:	6800      	ldr	r0, [r0, #0]
 80056d4:	f7ff ffa6 	bl	8005624 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80056d8:	2000      	movs	r0, #0
      break;
 80056da:	e014      	b.n	8005706 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056dc:	6800      	ldr	r0, [r0, #0]
 80056de:	f7ff fd4d 	bl	800517c <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80056e2:	2000      	movs	r0, #0
      break;
 80056e4:	e00f      	b.n	8005706 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056e6:	6800      	ldr	r0, [r0, #0]
 80056e8:	f7ff fd80 	bl	80051ec <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80056ec:	2000      	movs	r0, #0
      break;
 80056ee:	e00a      	b.n	8005706 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056f0:	6800      	ldr	r0, [r0, #0]
 80056f2:	f7ff fda9 	bl	8005248 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80056f6:	2000      	movs	r0, #0
      break;
 80056f8:	e005      	b.n	8005706 <HAL_TIM_OC_ConfigChannel+0x6e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056fa:	6800      	ldr	r0, [r0, #0]
 80056fc:	f7ff fdd0 	bl	80052a0 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8005700:	2000      	movs	r0, #0
      break;
 8005702:	e000      	b.n	8005706 <HAL_TIM_OC_ConfigChannel+0x6e>
  switch (Channel)
 8005704:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005706:	2300      	movs	r3, #0
 8005708:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800570c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800570e:	2002      	movs	r0, #2
}
 8005710:	4770      	bx	lr

08005712 <HAL_TIM_PWM_ConfigChannel>:
{
 8005712:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005714:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005718:	2b01      	cmp	r3, #1
 800571a:	f000 8095 	beq.w	8005848 <HAL_TIM_PWM_ConfigChannel+0x136>
 800571e:	4604      	mov	r4, r0
 8005720:	460d      	mov	r5, r1
 8005722:	2301      	movs	r3, #1
 8005724:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005728:	2a14      	cmp	r2, #20
 800572a:	f200 8088 	bhi.w	800583e <HAL_TIM_PWM_ConfigChannel+0x12c>
 800572e:	e8df f002 	tbb	[pc, r2]
 8005732:	860b      	.short	0x860b
 8005734:	861f8686 	.word	0x861f8686
 8005738:	86348686 	.word	0x86348686
 800573c:	86488686 	.word	0x86488686
 8005740:	865d8686 	.word	0x865d8686
 8005744:	8686      	.short	0x8686
 8005746:	71          	.byte	0x71
 8005747:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005748:	6800      	ldr	r0, [r0, #0]
 800574a:	f7ff fcd9 	bl	8005100 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800574e:	6822      	ldr	r2, [r4, #0]
 8005750:	6993      	ldr	r3, [r2, #24]
 8005752:	f043 0308 	orr.w	r3, r3, #8
 8005756:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005758:	6822      	ldr	r2, [r4, #0]
 800575a:	6993      	ldr	r3, [r2, #24]
 800575c:	f023 0304 	bic.w	r3, r3, #4
 8005760:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005762:	6822      	ldr	r2, [r4, #0]
 8005764:	6993      	ldr	r3, [r2, #24]
 8005766:	6929      	ldr	r1, [r5, #16]
 8005768:	430b      	orrs	r3, r1
 800576a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800576c:	2000      	movs	r0, #0
      break;
 800576e:	e067      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005770:	6800      	ldr	r0, [r0, #0]
 8005772:	f7ff ff57 	bl	8005624 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005776:	6822      	ldr	r2, [r4, #0]
 8005778:	6993      	ldr	r3, [r2, #24]
 800577a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800577e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005780:	6822      	ldr	r2, [r4, #0]
 8005782:	6993      	ldr	r3, [r2, #24]
 8005784:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005788:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800578a:	6822      	ldr	r2, [r4, #0]
 800578c:	6993      	ldr	r3, [r2, #24]
 800578e:	6929      	ldr	r1, [r5, #16]
 8005790:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005794:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005796:	2000      	movs	r0, #0
      break;
 8005798:	e052      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800579a:	6800      	ldr	r0, [r0, #0]
 800579c:	f7ff fcee 	bl	800517c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057a0:	6822      	ldr	r2, [r4, #0]
 80057a2:	69d3      	ldr	r3, [r2, #28]
 80057a4:	f043 0308 	orr.w	r3, r3, #8
 80057a8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	69d3      	ldr	r3, [r2, #28]
 80057ae:	f023 0304 	bic.w	r3, r3, #4
 80057b2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057b4:	6822      	ldr	r2, [r4, #0]
 80057b6:	69d3      	ldr	r3, [r2, #28]
 80057b8:	6929      	ldr	r1, [r5, #16]
 80057ba:	430b      	orrs	r3, r1
 80057bc:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80057be:	2000      	movs	r0, #0
      break;
 80057c0:	e03e      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057c2:	6800      	ldr	r0, [r0, #0]
 80057c4:	f7ff fd12 	bl	80051ec <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057c8:	6822      	ldr	r2, [r4, #0]
 80057ca:	69d3      	ldr	r3, [r2, #28]
 80057cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80057d0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057d2:	6822      	ldr	r2, [r4, #0]
 80057d4:	69d3      	ldr	r3, [r2, #28]
 80057d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057da:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057dc:	6822      	ldr	r2, [r4, #0]
 80057de:	69d3      	ldr	r3, [r2, #28]
 80057e0:	6929      	ldr	r1, [r5, #16]
 80057e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80057e6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80057e8:	2000      	movs	r0, #0
      break;
 80057ea:	e029      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057ec:	6800      	ldr	r0, [r0, #0]
 80057ee:	f7ff fd2b 	bl	8005248 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057f2:	6822      	ldr	r2, [r4, #0]
 80057f4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80057f6:	f043 0308 	orr.w	r3, r3, #8
 80057fa:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057fc:	6822      	ldr	r2, [r4, #0]
 80057fe:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005800:	f023 0304 	bic.w	r3, r3, #4
 8005804:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005806:	6822      	ldr	r2, [r4, #0]
 8005808:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800580a:	6929      	ldr	r1, [r5, #16]
 800580c:	430b      	orrs	r3, r1
 800580e:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8005810:	2000      	movs	r0, #0
      break;
 8005812:	e015      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005814:	6800      	ldr	r0, [r0, #0]
 8005816:	f7ff fd43 	bl	80052a0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800581a:	6822      	ldr	r2, [r4, #0]
 800581c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800581e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005822:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005824:	6822      	ldr	r2, [r4, #0]
 8005826:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005828:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800582c:	6553      	str	r3, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800582e:	6822      	ldr	r2, [r4, #0]
 8005830:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8005832:	6929      	ldr	r1, [r5, #16]
 8005834:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005838:	6553      	str	r3, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800583a:	2000      	movs	r0, #0
      break;
 800583c:	e000      	b.n	8005840 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 800583e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005840:	2300      	movs	r3, #0
 8005842:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005846:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8005848:	2002      	movs	r0, #2
 800584a:	e7fc      	b.n	8005846 <HAL_TIM_PWM_ConfigChannel+0x134>

0800584c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800584c:	f001 011f 	and.w	r1, r1, #31
 8005850:	f04f 0c01 	mov.w	ip, #1
 8005854:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005858:	6a03      	ldr	r3, [r0, #32]
 800585a:	ea23 030c 	bic.w	r3, r3, ip
 800585e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005860:	6a03      	ldr	r3, [r0, #32]
 8005862:	408a      	lsls	r2, r1
 8005864:	4313      	orrs	r3, r2
 8005866:	6203      	str	r3, [r0, #32]
}
 8005868:	4770      	bx	lr
	...

0800586c <HAL_TIM_PWM_Start>:
{
 800586c:	b510      	push	{r4, lr}
 800586e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005870:	2910      	cmp	r1, #16
 8005872:	d83b      	bhi.n	80058ec <HAL_TIM_PWM_Start+0x80>
 8005874:	e8df f001 	tbb	[pc, r1]
 8005878:	3a3a3a09 	.word	0x3a3a3a09
 800587c:	3a3a3a1e 	.word	0x3a3a3a1e
 8005880:	3a3a3a25 	.word	0x3a3a3a25
 8005884:	3a3a3a2c 	.word	0x3a3a3a2c
 8005888:	33          	.byte	0x33
 8005889:	00          	.byte	0x00
 800588a:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800588e:	b2db      	uxtb	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	bf18      	it	ne
 8005894:	2301      	movne	r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d179      	bne.n	800598e <HAL_TIM_PWM_Start+0x122>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800589a:	2910      	cmp	r1, #16
 800589c:	d865      	bhi.n	800596a <HAL_TIM_PWM_Start+0xfe>
 800589e:	e8df f001 	tbb	[pc, r1]
 80058a2:	642c      	.short	0x642c
 80058a4:	64546464 	.word	0x64546464
 80058a8:	64586464 	.word	0x64586464
 80058ac:	645c6464 	.word	0x645c6464
 80058b0:	6464      	.short	0x6464
 80058b2:	60          	.byte	0x60
 80058b3:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058b4:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	bf18      	it	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	e7e9      	b.n	8005896 <HAL_TIM_PWM_Start+0x2a>
 80058c2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	bf18      	it	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	e7e2      	b.n	8005896 <HAL_TIM_PWM_Start+0x2a>
 80058d0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	bf18      	it	ne
 80058da:	2301      	movne	r3, #1
 80058dc:	e7db      	b.n	8005896 <HAL_TIM_PWM_Start+0x2a>
 80058de:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	bf18      	it	ne
 80058e8:	2301      	movne	r3, #1
 80058ea:	e7d4      	b.n	8005896 <HAL_TIM_PWM_Start+0x2a>
 80058ec:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	bf18      	it	ne
 80058f6:	2301      	movne	r3, #1
 80058f8:	e7cd      	b.n	8005896 <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fa:	2302      	movs	r3, #2
 80058fc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005900:	2201      	movs	r2, #1
 8005902:	6820      	ldr	r0, [r4, #0]
 8005904:	f7ff ffa2 	bl	800584c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	4a24      	ldr	r2, [pc, #144]	@ (800599c <HAL_TIM_PWM_Start+0x130>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d007      	beq.n	8005920 <HAL_TIM_PWM_Start+0xb4>
 8005910:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <HAL_TIM_PWM_Start+0xb4>
 8005918:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800591c:	4293      	cmp	r3, r2
 800591e:	d103      	bne.n	8005928 <HAL_TIM_PWM_Start+0xbc>
    __HAL_TIM_MOE_ENABLE(htim);
 8005920:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005922:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005926:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	4a1c      	ldr	r2, [pc, #112]	@ (800599c <HAL_TIM_PWM_Start+0x130>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d020      	beq.n	8005972 <HAL_TIM_PWM_Start+0x106>
 8005930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005934:	d01d      	beq.n	8005972 <HAL_TIM_PWM_Start+0x106>
 8005936:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 800593a:	4293      	cmp	r3, r2
 800593c:	d019      	beq.n	8005972 <HAL_TIM_PWM_Start+0x106>
    __HAL_TIM_ENABLE(htim);
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	f042 0201 	orr.w	r2, r2, #1
 8005944:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005946:	2000      	movs	r0, #0
 8005948:	e022      	b.n	8005990 <HAL_TIM_PWM_Start+0x124>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800594a:	2302      	movs	r3, #2
 800594c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005950:	e7d6      	b.n	8005900 <HAL_TIM_PWM_Start+0x94>
 8005952:	2302      	movs	r3, #2
 8005954:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005958:	e7d2      	b.n	8005900 <HAL_TIM_PWM_Start+0x94>
 800595a:	2302      	movs	r3, #2
 800595c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005960:	e7ce      	b.n	8005900 <HAL_TIM_PWM_Start+0x94>
 8005962:	2302      	movs	r3, #2
 8005964:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005968:	e7ca      	b.n	8005900 <HAL_TIM_PWM_Start+0x94>
 800596a:	2302      	movs	r3, #2
 800596c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005970:	e7c6      	b.n	8005900 <HAL_TIM_PWM_Start+0x94>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005972:	6899      	ldr	r1, [r3, #8]
 8005974:	4a0a      	ldr	r2, [pc, #40]	@ (80059a0 <HAL_TIM_PWM_Start+0x134>)
 8005976:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005978:	2a06      	cmp	r2, #6
 800597a:	d00a      	beq.n	8005992 <HAL_TIM_PWM_Start+0x126>
 800597c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005980:	d009      	beq.n	8005996 <HAL_TIM_PWM_Start+0x12a>
      __HAL_TIM_ENABLE(htim);
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	f042 0201 	orr.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800598a:	2000      	movs	r0, #0
 800598c:	e000      	b.n	8005990 <HAL_TIM_PWM_Start+0x124>
    return HAL_ERROR;
 800598e:	2001      	movs	r0, #1
}
 8005990:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8005992:	2000      	movs	r0, #0
 8005994:	e7fc      	b.n	8005990 <HAL_TIM_PWM_Start+0x124>
 8005996:	2000      	movs	r0, #0
 8005998:	e7fa      	b.n	8005990 <HAL_TIM_PWM_Start+0x124>
 800599a:	bf00      	nop
 800599c:	40012c00 	.word	0x40012c00
 80059a0:	00010007 	.word	0x00010007

080059a4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059a4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80059a8:	2a01      	cmp	r2, #1
 80059aa:	d02f      	beq.n	8005a0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
{
 80059ac:	b430      	push	{r4, r5}
 80059ae:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80059b0:	2201      	movs	r2, #1
 80059b2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b6:	2202      	movs	r2, #2
 80059b8:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059bc:	6800      	ldr	r0, [r0, #0]
 80059be:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059c0:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059c2:	4d13      	ldr	r5, [pc, #76]	@ (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80059c4:	42a8      	cmp	r0, r5
 80059c6:	d01c      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059c8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059cc:	680d      	ldr	r5, [r1, #0]
 80059ce:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059d0:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	480e      	ldr	r0, [pc, #56]	@ (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80059d6:	4282      	cmp	r2, r0
 80059d8:	d006      	beq.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80059da:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80059de:	d003      	beq.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80059e0:	f500 50a0 	add.w	r0, r0, #5120	@ 0x1400
 80059e4:	4282      	cmp	r2, r0
 80059e6:	d104      	bne.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059e8:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ec:	6889      	ldr	r1, [r1, #8]
 80059ee:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059f0:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059f8:	2000      	movs	r0, #0
 80059fa:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80059fe:	bc30      	pop	{r4, r5}
 8005a00:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a02:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a06:	684d      	ldr	r5, [r1, #4]
 8005a08:	432a      	orrs	r2, r5
 8005a0a:	e7dd      	b.n	80059c8 <HAL_TIMEx_MasterConfigSynchronization+0x24>
  __HAL_LOCK(htim);
 8005a0c:	2002      	movs	r0, #2
}
 8005a0e:	4770      	bx	lr
 8005a10:	40012c00 	.word	0x40012c00

08005a14 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a14:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d03b      	beq.n	8005a94 <HAL_TIMEx_ConfigBreakDeadTime+0x80>
{
 8005a1c:	b410      	push	{r4}
 8005a1e:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8005a20:	2301      	movs	r3, #1
 8005a22:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a26:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a2c:	6888      	ldr	r0, [r1, #8]
 8005a2e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a34:	6848      	ldr	r0, [r1, #4]
 8005a36:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a3c:	6808      	ldr	r0, [r1, #0]
 8005a3e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a44:	6908      	ldr	r0, [r1, #16]
 8005a46:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a4c:	6948      	ldr	r0, [r1, #20]
 8005a4e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a54:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 8005a56:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a58:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8005a5c:	6988      	ldr	r0, [r1, #24]
 8005a5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a62:	6810      	ldr	r0, [r2, #0]
 8005a64:	4c0c      	ldr	r4, [pc, #48]	@ (8005a98 <HAL_TIMEx_ConfigBreakDeadTime+0x84>)
 8005a66:	42a0      	cmp	r0, r4
 8005a68:	d006      	beq.n	8005a78 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a6a:	6443      	str	r3, [r0, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8005a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a76:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a78:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005a7c:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8005a7e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a86:	69cc      	ldr	r4, [r1, #28]
 8005a88:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a8a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005a8e:	6a09      	ldr	r1, [r1, #32]
 8005a90:	430b      	orrs	r3, r1
 8005a92:	e7ea      	b.n	8005a6a <HAL_TIMEx_ConfigBreakDeadTime+0x56>
  __HAL_LOCK(htim);
 8005a94:	2002      	movs	r0, #2
}
 8005a96:	4770      	bx	lr
 8005a98:	40012c00 	.word	0x40012c00

08005a9c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a9c:	4770      	bx	lr

08005a9e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005aa0:	4770      	bx	lr

08005aa2 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa2:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	e852 3f00 	ldrex	r3, [r2]
 8005aa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	e842 3100 	strex	r1, r3, [r2]
 8005ab0:	2900      	cmp	r1, #0
 8005ab2:	d1f6      	bne.n	8005aa2 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab6:	f102 0308 	add.w	r3, r2, #8
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	3208      	adds	r2, #8
 8005ac4:	e842 3100 	strex	r1, r3, [r2]
 8005ac8:	2900      	cmp	r1, #0
 8005aca:	d1f3      	bne.n	8005ab4 <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005acc:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d006      	beq.n	8005ae0 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ad2:	2320      	movs	r3, #32
 8005ad4:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005adc:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8005ade:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	e852 3f00 	ldrex	r3, [r2]
 8005ae6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	e842 3100 	strex	r1, r3, [r2]
 8005aee:	2900      	cmp	r1, #0
 8005af0:	d1f6      	bne.n	8005ae0 <UART_EndRxTransfer+0x3e>
 8005af2:	e7ee      	b.n	8005ad2 <UART_EndRxTransfer+0x30>

08005af4 <HAL_UART_TxCpltCallback>:
}
 8005af4:	4770      	bx	lr

08005af6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005af6:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005af8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	e852 3f00 	ldrex	r3, [r2]
 8005afe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	e842 3100 	strex	r1, r3, [r2]
 8005b06:	2900      	cmp	r1, #0
 8005b08:	d1f6      	bne.n	8005af8 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b0a:	2320      	movs	r3, #32
 8005b0c:	67c3      	str	r3, [r0, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	66c3      	str	r3, [r0, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b12:	f7ff ffef 	bl	8005af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b16:	bd08      	pop	{r3, pc}

08005b18 <HAL_UART_ErrorCallback>:
}
 8005b18:	4770      	bx	lr

08005b1a <UART_DMAAbortOnError>:
{
 8005b1a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b1c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005b24:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
  HAL_UART_ErrorCallback(huart);
 8005b28:	f7ff fff6 	bl	8005b18 <HAL_UART_ErrorCallback>
}
 8005b2c:	bd08      	pop	{r3, pc}

08005b2e <HAL_UARTEx_RxEventCallback>:
}
 8005b2e:	4770      	bx	lr

08005b30 <HAL_UART_IRQHandler>:
{
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b34:	6802      	ldr	r2, [r0, #0]
 8005b36:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b38:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b3a:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8005b3c:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 8005b40:	ea13 0f0c 	tst.w	r3, ip
 8005b44:	d10a      	bne.n	8005b5c <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b46:	f013 0f20 	tst.w	r3, #32
 8005b4a:	d00d      	beq.n	8005b68 <HAL_UART_IRQHandler+0x38>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b4c:	f011 0f20 	tst.w	r1, #32
 8005b50:	d00a      	beq.n	8005b68 <HAL_UART_IRQHandler+0x38>
      if (huart->RxISR != NULL)
 8005b52:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8005b54:	b30b      	cbz	r3, 8005b9a <HAL_UART_IRQHandler+0x6a>
        huart->RxISR(huart);
 8005b56:	4620      	mov	r0, r4
 8005b58:	4798      	blx	r3
      return;
 8005b5a:	e01e      	b.n	8005b9a <HAL_UART_IRQHandler+0x6a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b5c:	f010 0501 	ands.w	r5, r0, #1
 8005b60:	d11c      	bne.n	8005b9c <HAL_UART_IRQHandler+0x6c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b62:	4ead      	ldr	r6, [pc, #692]	@ (8005e18 <HAL_UART_IRQHandler+0x2e8>)
 8005b64:	4231      	tst	r1, r6
 8005b66:	d119      	bne.n	8005b9c <HAL_UART_IRQHandler+0x6c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b68:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8005b6a:	2d01      	cmp	r5, #1
 8005b6c:	f000 80a4 	beq.w	8005cb8 <HAL_UART_IRQHandler+0x188>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b70:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8005b74:	d003      	beq.n	8005b7e <HAL_UART_IRQHandler+0x4e>
 8005b76:	f410 0f80 	tst.w	r0, #4194304	@ 0x400000
 8005b7a:	f040 8146 	bne.w	8005e0a <HAL_UART_IRQHandler+0x2da>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b7e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b82:	d003      	beq.n	8005b8c <HAL_UART_IRQHandler+0x5c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b84:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005b88:	f040 814a 	bne.w	8005e20 <HAL_UART_IRQHandler+0x2f0>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b8c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005b90:	d003      	beq.n	8005b9a <HAL_UART_IRQHandler+0x6a>
 8005b92:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8005b96:	f040 814a 	bne.w	8005e2e <HAL_UART_IRQHandler+0x2fe>
}
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b9c:	f013 0f01 	tst.w	r3, #1
 8005ba0:	d009      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x86>
 8005ba2:	f411 7f80 	tst.w	r1, #256	@ 0x100
 8005ba6:	d006      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x86>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ba8:	2001      	movs	r0, #1
 8005baa:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bac:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8005bb0:	4302      	orrs	r2, r0
 8005bb2:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bb6:	f013 0f02 	tst.w	r3, #2
 8005bba:	d009      	beq.n	8005bd0 <HAL_UART_IRQHandler+0xa0>
 8005bbc:	b145      	cbz	r5, 8005bd0 <HAL_UART_IRQHandler+0xa0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bbe:	6822      	ldr	r2, [r4, #0]
 8005bc0:	2002      	movs	r0, #2
 8005bc2:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bc4:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8005bc8:	f042 0204 	orr.w	r2, r2, #4
 8005bcc:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bd0:	f013 0f04 	tst.w	r3, #4
 8005bd4:	d009      	beq.n	8005bea <HAL_UART_IRQHandler+0xba>
 8005bd6:	b145      	cbz	r5, 8005bea <HAL_UART_IRQHandler+0xba>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	2004      	movs	r0, #4
 8005bdc:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bde:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8005be2:	f042 0202 	orr.w	r2, r2, #2
 8005be6:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bea:	f013 0f08 	tst.w	r3, #8
 8005bee:	d00b      	beq.n	8005c08 <HAL_UART_IRQHandler+0xd8>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bf0:	f011 0f20 	tst.w	r1, #32
 8005bf4:	d100      	bne.n	8005bf8 <HAL_UART_IRQHandler+0xc8>
 8005bf6:	b13d      	cbz	r5, 8005c08 <HAL_UART_IRQHandler+0xd8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bf8:	6822      	ldr	r2, [r4, #0]
 8005bfa:	2008      	movs	r0, #8
 8005bfc:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bfe:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8005c02:	4302      	orrs	r2, r0
 8005c04:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c08:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8005c0c:	d00c      	beq.n	8005c28 <HAL_UART_IRQHandler+0xf8>
 8005c0e:	f011 6f80 	tst.w	r1, #67108864	@ 0x4000000
 8005c12:	d009      	beq.n	8005c28 <HAL_UART_IRQHandler+0xf8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c14:	6822      	ldr	r2, [r4, #0]
 8005c16:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005c1a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c1c:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8005c20:	f042 0220 	orr.w	r2, r2, #32
 8005c24:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c28:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8005c2c:	2a00      	cmp	r2, #0
 8005c2e:	d0b4      	beq.n	8005b9a <HAL_UART_IRQHandler+0x6a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c30:	f013 0f20 	tst.w	r3, #32
 8005c34:	d006      	beq.n	8005c44 <HAL_UART_IRQHandler+0x114>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c36:	f011 0f20 	tst.w	r1, #32
 8005c3a:	d003      	beq.n	8005c44 <HAL_UART_IRQHandler+0x114>
        if (huart->RxISR != NULL)
 8005c3c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8005c3e:	b10b      	cbz	r3, 8005c44 <HAL_UART_IRQHandler+0x114>
          huart->RxISR(huart);
 8005c40:	4620      	mov	r0, r4
 8005c42:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005c44:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005c50:	d102      	bne.n	8005c58 <HAL_UART_IRQHandler+0x128>
 8005c52:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8005c56:	d028      	beq.n	8005caa <HAL_UART_IRQHandler+0x17a>
        UART_EndRxTransfer(huart);
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f7ff ff22 	bl	8005aa2 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005c66:	d01c      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c68:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	f102 0308 	add.w	r3, r2, #8
 8005c6e:	e853 3f00 	ldrex	r3, [r3]
 8005c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	3208      	adds	r2, #8
 8005c78:	e842 3100 	strex	r1, r3, [r2]
 8005c7c:	2900      	cmp	r1, #0
 8005c7e:	d1f3      	bne.n	8005c68 <HAL_UART_IRQHandler+0x138>
          if (huart->hdmarx != NULL)
 8005c80:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8005c82:	b153      	cbz	r3, 8005c9a <HAL_UART_IRQHandler+0x16a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c84:	4a65      	ldr	r2, [pc, #404]	@ (8005e1c <HAL_UART_IRQHandler+0x2ec>)
 8005c86:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c88:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005c8a:	f7fd ff5c 	bl	8003b46 <HAL_DMA_Abort_IT>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d083      	beq.n	8005b9a <HAL_UART_IRQHandler+0x6a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c92:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005c94:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005c96:	4798      	blx	r3
 8005c98:	e77f      	b.n	8005b9a <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f7ff ff3c 	bl	8005b18 <HAL_UART_ErrorCallback>
 8005ca0:	e77b      	b.n	8005b9a <HAL_UART_IRQHandler+0x6a>
          HAL_UART_ErrorCallback(huart);
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f7ff ff38 	bl	8005b18 <HAL_UART_ErrorCallback>
 8005ca8:	e777      	b.n	8005b9a <HAL_UART_IRQHandler+0x6a>
        HAL_UART_ErrorCallback(huart);
 8005caa:	4620      	mov	r0, r4
 8005cac:	f7ff ff34 	bl	8005b18 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    return;
 8005cb6:	e770      	b.n	8005b9a <HAL_UART_IRQHandler+0x6a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cb8:	f013 0f10 	tst.w	r3, #16
 8005cbc:	f43f af58 	beq.w	8005b70 <HAL_UART_IRQHandler+0x40>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cc0:	f011 0f10 	tst.w	r1, #16
 8005cc4:	f43f af54 	beq.w	8005b70 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cc8:	2310      	movs	r3, #16
 8005cca:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005cd4:	d05f      	beq.n	8005d96 <HAL_UART_IRQHandler+0x266>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cd6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8005cd8:	680a      	ldr	r2, [r1, #0]
 8005cda:	6853      	ldr	r3, [r2, #4]
 8005cdc:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d049      	beq.n	8005d76 <HAL_UART_IRQHandler+0x246>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ce2:	f8b4 0058 	ldrh.w	r0, [r4, #88]	@ 0x58
 8005ce6:	4298      	cmp	r0, r3
 8005ce8:	d945      	bls.n	8005d76 <HAL_UART_IRQHandler+0x246>
        huart->RxXferCount = nb_remaining_rx_data;
 8005cea:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005cee:	680b      	ldr	r3, [r1, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f013 0f20 	tst.w	r3, #32
 8005cf6:	d131      	bne.n	8005d5c <HAL_UART_IRQHandler+0x22c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cf8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	e852 3f00 	ldrex	r3, [r2]
 8005cfe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	e842 3100 	strex	r1, r3, [r2]
 8005d06:	2900      	cmp	r1, #0
 8005d08:	d1f6      	bne.n	8005cf8 <HAL_UART_IRQHandler+0x1c8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	f102 0308 	add.w	r3, r2, #8
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	3208      	adds	r2, #8
 8005d1a:	e842 3100 	strex	r1, r3, [r2]
 8005d1e:	2900      	cmp	r1, #0
 8005d20:	d1f3      	bne.n	8005d0a <HAL_UART_IRQHandler+0x1da>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d22:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	f102 0308 	add.w	r3, r2, #8
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	3208      	adds	r2, #8
 8005d32:	e842 3100 	strex	r1, r3, [r2]
 8005d36:	2900      	cmp	r1, #0
 8005d38:	d1f3      	bne.n	8005d22 <HAL_UART_IRQHandler+0x1f2>
          huart->RxState = HAL_UART_STATE_READY;
 8005d3a:	2320      	movs	r3, #32
 8005d3c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d40:	2300      	movs	r3, #0
 8005d42:	6623      	str	r3, [r4, #96]	@ 0x60
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d44:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	e852 3f00 	ldrex	r3, [r2]
 8005d4a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	e842 3100 	strex	r1, r3, [r2]
 8005d52:	2900      	cmp	r1, #0
 8005d54:	d1f6      	bne.n	8005d44 <HAL_UART_IRQHandler+0x214>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d56:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005d58:	f7fd fed0 	bl	8003afc <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d60:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 8005d64:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	1ac9      	subs	r1, r1, r3
 8005d6c:	b289      	uxth	r1, r1
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f7ff fedd 	bl	8005b2e <HAL_UARTEx_RxEventCallback>
 8005d74:	e711      	b.n	8005b9a <HAL_UART_IRQHandler+0x6a>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005d76:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 8005d7a:	4299      	cmp	r1, r3
 8005d7c:	f47f af0d 	bne.w	8005b9a <HAL_UART_IRQHandler+0x6a>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d80:	6813      	ldr	r3, [r2, #0]
 8005d82:	f013 0f20 	tst.w	r3, #32
 8005d86:	f43f af08 	beq.w	8005b9a <HAL_UART_IRQHandler+0x6a>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	6663      	str	r3, [r4, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f7ff fecd 	bl	8005b2e <HAL_UARTEx_RxEventCallback>
      return;
 8005d94:	e701      	b.n	8005b9a <HAL_UART_IRQHandler+0x6a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d96:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
 8005d9a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	1ac9      	subs	r1, r1, r3
 8005da2:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005da4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f43f aef5 	beq.w	8005b9a <HAL_UART_IRQHandler+0x6a>
          && (nb_rx_data > 0U))
 8005db0:	2900      	cmp	r1, #0
 8005db2:	f43f aef2 	beq.w	8005b9a <HAL_UART_IRQHandler+0x6a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005db6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	e852 3f00 	ldrex	r3, [r2]
 8005dbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	e842 3000 	strex	r0, r3, [r2]
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d1f6      	bne.n	8005db6 <HAL_UART_IRQHandler+0x286>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	f102 0308 	add.w	r3, r2, #8
 8005dce:	e853 3f00 	ldrex	r3, [r3]
 8005dd2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	3208      	adds	r2, #8
 8005dd8:	e842 3000 	strex	r0, r3, [r2]
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d1f3      	bne.n	8005dc8 <HAL_UART_IRQHandler+0x298>
        huart->RxState = HAL_UART_STATE_READY;
 8005de0:	2320      	movs	r3, #32
 8005de2:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de6:	2300      	movs	r3, #0
 8005de8:	6623      	str	r3, [r4, #96]	@ 0x60
        huart->RxISR = NULL;
 8005dea:	66a3      	str	r3, [r4, #104]	@ 0x68
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dee:	e852 3f00 	ldrex	r3, [r2]
 8005df2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df6:	e842 3000 	strex	r0, r3, [r2]
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d1f6      	bne.n	8005dec <HAL_UART_IRQHandler+0x2bc>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dfe:	2302      	movs	r3, #2
 8005e00:	6663      	str	r3, [r4, #100]	@ 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e02:	4620      	mov	r0, r4
 8005e04:	f7ff fe93 	bl	8005b2e <HAL_UARTEx_RxEventCallback>
      return;
 8005e08:	e6c7      	b.n	8005b9a <HAL_UART_IRQHandler+0x6a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e0a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005e0e:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 fc79 	bl	8006708 <HAL_UARTEx_WakeupCallback>
    return;
 8005e16:	e6c0      	b.n	8005b9a <HAL_UART_IRQHandler+0x6a>
 8005e18:	04000120 	.word	0x04000120
 8005e1c:	08005b1b 	.word	0x08005b1b
    if (huart->TxISR != NULL)
 8005e20:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f43f aeb9 	beq.w	8005b9a <HAL_UART_IRQHandler+0x6a>
      huart->TxISR(huart);
 8005e28:	4620      	mov	r0, r4
 8005e2a:	4798      	blx	r3
    return;
 8005e2c:	e6b5      	b.n	8005b9a <HAL_UART_IRQHandler+0x6a>
    UART_EndTransmit_IT(huart);
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f7ff fe61 	bl	8005af6 <UART_EndTransmit_IT>
    return;
 8005e34:	e6b1      	b.n	8005b9a <HAL_UART_IRQHandler+0x6a>
 8005e36:	bf00      	nop

08005e38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e38:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8005e3a:	f8b0 305c 	ldrh.w	r3, [r0, #92]	@ 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e3e:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 8005e42:	2a22      	cmp	r2, #34	@ 0x22
 8005e44:	d006      	beq.n	8005e54 <UART_RxISR_8BIT+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e46:	6802      	ldr	r2, [r0, #0]
 8005e48:	8b13      	ldrh	r3, [r2, #24]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f043 0308 	orr.w	r3, r3, #8
 8005e50:	8313      	strh	r3, [r2, #24]
  }
}
 8005e52:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e54:	6802      	ldr	r2, [r0, #0]
 8005e56:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8005e5c:	400b      	ands	r3, r1
 8005e5e:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8005e60:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005e62:	3301      	adds	r3, #1
 8005e64:	6543      	str	r3, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 8005e66:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    if (huart->RxXferCount == 0U)
 8005e74:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e9      	bne.n	8005e52 <UART_RxISR_8BIT+0x1a>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e7e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	e852 3f00 	ldrex	r3, [r2]
 8005e84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e88:	e842 3100 	strex	r1, r3, [r2]
 8005e8c:	2900      	cmp	r1, #0
 8005e8e:	d1f6      	bne.n	8005e7e <UART_RxISR_8BIT+0x46>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e90:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e92:	f102 0308 	add.w	r3, r2, #8
 8005e96:	e853 3f00 	ldrex	r3, [r3]
 8005e9a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	3208      	adds	r2, #8
 8005ea0:	e842 3100 	strex	r1, r3, [r2]
 8005ea4:	2900      	cmp	r1, #0
 8005ea6:	d1f3      	bne.n	8005e90 <UART_RxISR_8BIT+0x58>
      huart->RxState = HAL_UART_STATE_READY;
 8005ea8:	2320      	movs	r3, #32
 8005eaa:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
      huart->RxISR = NULL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	6683      	str	r3, [r0, #104]	@ 0x68
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eb2:	6643      	str	r3, [r0, #100]	@ 0x64
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005eb4:	6803      	ldr	r3, [r0, #0]
 8005eb6:	4a16      	ldr	r2, [pc, #88]	@ (8005f10 <UART_RxISR_8BIT+0xd8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00c      	beq.n	8005ed6 <UART_RxISR_8BIT+0x9e>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8005ec2:	d008      	beq.n	8005ed6 <UART_RxISR_8BIT+0x9e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ec4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	e852 3f00 	ldrex	r3, [r2]
 8005eca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ece:	e842 3100 	strex	r1, r3, [r2]
 8005ed2:	2900      	cmp	r1, #0
 8005ed4:	d1f6      	bne.n	8005ec4 <UART_RxISR_8BIT+0x8c>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d116      	bne.n	8005f0a <UART_RxISR_8BIT+0xd2>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005edc:	2300      	movs	r3, #0
 8005ede:	6603      	str	r3, [r0, #96]	@ 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	e852 3f00 	ldrex	r3, [r2]
 8005ee6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	e842 3100 	strex	r1, r3, [r2]
 8005eee:	2900      	cmp	r1, #0
 8005ef0:	d1f6      	bne.n	8005ee0 <UART_RxISR_8BIT+0xa8>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ef2:	6803      	ldr	r3, [r0, #0]
 8005ef4:	69da      	ldr	r2, [r3, #28]
 8005ef6:	f012 0f10 	tst.w	r2, #16
 8005efa:	d001      	beq.n	8005f00 <UART_RxISR_8BIT+0xc8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005efc:	2210      	movs	r2, #16
 8005efe:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f00:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8005f04:	f7ff fe13 	bl	8005b2e <HAL_UARTEx_RxEventCallback>
 8005f08:	e7a3      	b.n	8005e52 <UART_RxISR_8BIT+0x1a>
        HAL_UART_RxCpltCallback(huart);
 8005f0a:	f7fc ff75 	bl	8002df8 <HAL_UART_RxCpltCallback>
 8005f0e:	e7a0      	b.n	8005e52 <UART_RxISR_8BIT+0x1a>
 8005f10:	40008000 	.word	0x40008000

08005f14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f14:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005f16:	f8b0 305c 	ldrh.w	r3, [r0, #92]	@ 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f1a:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 8005f1e:	2a22      	cmp	r2, #34	@ 0x22
 8005f20:	d006      	beq.n	8005f30 <UART_RxISR_16BIT+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f22:	6802      	ldr	r2, [r0, #0]
 8005f24:	8b13      	ldrh	r3, [r2, #24]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f043 0308 	orr.w	r3, r3, #8
 8005f2c:	8313      	strh	r3, [r2, #24]
  }
}
 8005f2e:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f30:	6802      	ldr	r2, [r0, #0]
 8005f32:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f34:	6d42      	ldr	r2, [r0, #84]	@ 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8005f36:	400b      	ands	r3, r1
 8005f38:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 8005f3a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	6543      	str	r3, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 8005f40:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
    if (huart->RxXferCount == 0U)
 8005f4e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	@ 0x5a
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1ea      	bne.n	8005f2e <UART_RxISR_16BIT+0x1a>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f58:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	e852 3f00 	ldrex	r3, [r2]
 8005f5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	e842 3100 	strex	r1, r3, [r2]
 8005f66:	2900      	cmp	r1, #0
 8005f68:	d1f6      	bne.n	8005f58 <UART_RxISR_16BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	f102 0308 	add.w	r3, r2, #8
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	3208      	adds	r2, #8
 8005f7a:	e842 3100 	strex	r1, r3, [r2]
 8005f7e:	2900      	cmp	r1, #0
 8005f80:	d1f3      	bne.n	8005f6a <UART_RxISR_16BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8005f82:	2320      	movs	r3, #32
 8005f84:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
      huart->RxISR = NULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	6683      	str	r3, [r0, #104]	@ 0x68
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f8c:	6643      	str	r3, [r0, #100]	@ 0x64
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f8e:	6803      	ldr	r3, [r0, #0]
 8005f90:	4a16      	ldr	r2, [pc, #88]	@ (8005fec <UART_RxISR_16BIT+0xd8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00c      	beq.n	8005fb0 <UART_RxISR_16BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8005f9c:	d008      	beq.n	8005fb0 <UART_RxISR_16BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f9e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa0:	e852 3f00 	ldrex	r3, [r2]
 8005fa4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa8:	e842 3100 	strex	r1, r3, [r2]
 8005fac:	2900      	cmp	r1, #0
 8005fae:	d1f6      	bne.n	8005f9e <UART_RxISR_16BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb0:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d116      	bne.n	8005fe4 <UART_RxISR_16BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	6603      	str	r3, [r0, #96]	@ 0x60
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	e852 3f00 	ldrex	r3, [r2]
 8005fc0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	e842 3100 	strex	r1, r3, [r2]
 8005fc8:	2900      	cmp	r1, #0
 8005fca:	d1f6      	bne.n	8005fba <UART_RxISR_16BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fcc:	6803      	ldr	r3, [r0, #0]
 8005fce:	69da      	ldr	r2, [r3, #28]
 8005fd0:	f012 0f10 	tst.w	r2, #16
 8005fd4:	d001      	beq.n	8005fda <UART_RxISR_16BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fd6:	2210      	movs	r2, #16
 8005fd8:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fda:	f8b0 1058 	ldrh.w	r1, [r0, #88]	@ 0x58
 8005fde:	f7ff fda6 	bl	8005b2e <HAL_UARTEx_RxEventCallback>
 8005fe2:	e7a4      	b.n	8005f2e <UART_RxISR_16BIT+0x1a>
        HAL_UART_RxCpltCallback(huart);
 8005fe4:	f7fc ff08 	bl	8002df8 <HAL_UART_RxCpltCallback>
 8005fe8:	e7a1      	b.n	8005f2e <UART_RxISR_16BIT+0x1a>
 8005fea:	bf00      	nop
 8005fec:	40008000 	.word	0x40008000

08005ff0 <UART_SetConfig>:
{
 8005ff0:	b510      	push	{r4, lr}
 8005ff2:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ff4:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ff6:	6883      	ldr	r3, [r0, #8]
 8005ff8:	6902      	ldr	r2, [r0, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	6942      	ldr	r2, [r0, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	69c2      	ldr	r2, [r0, #28]
 8006002:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006004:	6808      	ldr	r0, [r1, #0]
 8006006:	4a95      	ldr	r2, [pc, #596]	@ (800625c <UART_SetConfig+0x26c>)
 8006008:	4002      	ands	r2, r0
 800600a:	431a      	orrs	r2, r3
 800600c:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800600e:	6822      	ldr	r2, [r4, #0]
 8006010:	6853      	ldr	r3, [r2, #4]
 8006012:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006016:	68e1      	ldr	r1, [r4, #12]
 8006018:	430b      	orrs	r3, r1
 800601a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800601c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	4b8f      	ldr	r3, [pc, #572]	@ (8006260 <UART_SetConfig+0x270>)
 8006022:	429a      	cmp	r2, r3
 8006024:	d001      	beq.n	800602a <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8006026:	6a23      	ldr	r3, [r4, #32]
 8006028:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800602a:	6893      	ldr	r3, [r2, #8]
 800602c:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006030:	430b      	orrs	r3, r1
 8006032:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	4a8b      	ldr	r2, [pc, #556]	@ (8006264 <UART_SetConfig+0x274>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d01f      	beq.n	800607c <UART_SetConfig+0x8c>
 800603c:	4a8a      	ldr	r2, [pc, #552]	@ (8006268 <UART_SetConfig+0x278>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d030      	beq.n	80060a4 <UART_SetConfig+0xb4>
 8006042:	4a8a      	ldr	r2, [pc, #552]	@ (800626c <UART_SetConfig+0x27c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d046      	beq.n	80060d6 <UART_SetConfig+0xe6>
 8006048:	4a85      	ldr	r2, [pc, #532]	@ (8006260 <UART_SetConfig+0x270>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d055      	beq.n	80060fa <UART_SetConfig+0x10a>
 800604e:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8006050:	4983      	ldr	r1, [pc, #524]	@ (8006260 <UART_SetConfig+0x270>)
 8006052:	428b      	cmp	r3, r1
 8006054:	d07a      	beq.n	800614c <UART_SetConfig+0x15c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006056:	69e0      	ldr	r0, [r4, #28]
 8006058:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800605c:	f000 80a6 	beq.w	80061ac <UART_SetConfig+0x1bc>
    switch (clocksource)
 8006060:	2a08      	cmp	r2, #8
 8006062:	f200 810f 	bhi.w	8006284 <UART_SetConfig+0x294>
 8006066:	e8df f012 	tbh	[pc, r2, lsl #1]
 800606a:	00ce      	.short	0x00ce
 800606c:	00cc00e5 	.word	0x00cc00e5
 8006070:	00e8010d 	.word	0x00e8010d
 8006074:	010d010d 	.word	0x010d010d
 8006078:	00eb010d 	.word	0x00eb010d
  UART_GETCLOCKSOURCE(huart, clocksource);
 800607c:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 8006080:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8006084:	f002 0203 	and.w	r2, r2, #3
 8006088:	2a03      	cmp	r2, #3
 800608a:	d809      	bhi.n	80060a0 <UART_SetConfig+0xb0>
 800608c:	e8df f002 	tbb	[pc, r2]
 8006090:	064a0402 	.word	0x064a0402
 8006094:	2201      	movs	r2, #1
 8006096:	e7db      	b.n	8006050 <UART_SetConfig+0x60>
 8006098:	2204      	movs	r2, #4
 800609a:	e7d9      	b.n	8006050 <UART_SetConfig+0x60>
 800609c:	2208      	movs	r2, #8
 800609e:	e7d7      	b.n	8006050 <UART_SetConfig+0x60>
 80060a0:	2210      	movs	r2, #16
 80060a2:	e7d5      	b.n	8006050 <UART_SetConfig+0x60>
 80060a4:	f502 32e6 	add.w	r2, r2, #117760	@ 0x1cc00
 80060a8:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80060ac:	f002 020c 	and.w	r2, r2, #12
 80060b0:	2a0c      	cmp	r2, #12
 80060b2:	d80e      	bhi.n	80060d2 <UART_SetConfig+0xe2>
 80060b4:	e8df f002 	tbb	[pc, r2]
 80060b8:	0d0d0d07 	.word	0x0d0d0d07
 80060bc:	0d0d0d09 	.word	0x0d0d0d09
 80060c0:	0d0d0d38 	.word	0x0d0d0d38
 80060c4:	0b          	.byte	0x0b
 80060c5:	00          	.byte	0x00
 80060c6:	2200      	movs	r2, #0
 80060c8:	e7c2      	b.n	8006050 <UART_SetConfig+0x60>
 80060ca:	2204      	movs	r2, #4
 80060cc:	e7c0      	b.n	8006050 <UART_SetConfig+0x60>
 80060ce:	2208      	movs	r2, #8
 80060d0:	e7be      	b.n	8006050 <UART_SetConfig+0x60>
 80060d2:	2210      	movs	r2, #16
 80060d4:	e7bc      	b.n	8006050 <UART_SetConfig+0x60>
 80060d6:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 80060da:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80060de:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 80060e2:	2a20      	cmp	r2, #32
 80060e4:	d022      	beq.n	800612c <UART_SetConfig+0x13c>
 80060e6:	d804      	bhi.n	80060f2 <UART_SetConfig+0x102>
 80060e8:	b312      	cbz	r2, 8006130 <UART_SetConfig+0x140>
 80060ea:	2a10      	cmp	r2, #16
 80060ec:	d122      	bne.n	8006134 <UART_SetConfig+0x144>
 80060ee:	2204      	movs	r2, #4
 80060f0:	e7ae      	b.n	8006050 <UART_SetConfig+0x60>
 80060f2:	2a30      	cmp	r2, #48	@ 0x30
 80060f4:	d120      	bne.n	8006138 <UART_SetConfig+0x148>
 80060f6:	2208      	movs	r2, #8
 80060f8:	e7aa      	b.n	8006050 <UART_SetConfig+0x60>
 80060fa:	f502 32c8 	add.w	r2, r2, #102400	@ 0x19000
 80060fe:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8006102:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8006106:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800610a:	d017      	beq.n	800613c <UART_SetConfig+0x14c>
 800610c:	d805      	bhi.n	800611a <UART_SetConfig+0x12a>
 800610e:	b1ba      	cbz	r2, 8006140 <UART_SetConfig+0x150>
 8006110:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006114:	d116      	bne.n	8006144 <UART_SetConfig+0x154>
 8006116:	2204      	movs	r2, #4
 8006118:	e79a      	b.n	8006050 <UART_SetConfig+0x60>
 800611a:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 800611e:	d113      	bne.n	8006148 <UART_SetConfig+0x158>
 8006120:	2208      	movs	r2, #8
 8006122:	e795      	b.n	8006050 <UART_SetConfig+0x60>
 8006124:	2202      	movs	r2, #2
 8006126:	e793      	b.n	8006050 <UART_SetConfig+0x60>
 8006128:	2202      	movs	r2, #2
 800612a:	e791      	b.n	8006050 <UART_SetConfig+0x60>
 800612c:	2202      	movs	r2, #2
 800612e:	e78f      	b.n	8006050 <UART_SetConfig+0x60>
 8006130:	2200      	movs	r2, #0
 8006132:	e78d      	b.n	8006050 <UART_SetConfig+0x60>
 8006134:	2210      	movs	r2, #16
 8006136:	e78b      	b.n	8006050 <UART_SetConfig+0x60>
 8006138:	2210      	movs	r2, #16
 800613a:	e789      	b.n	8006050 <UART_SetConfig+0x60>
 800613c:	2202      	movs	r2, #2
 800613e:	e787      	b.n	8006050 <UART_SetConfig+0x60>
 8006140:	2200      	movs	r2, #0
 8006142:	e785      	b.n	8006050 <UART_SetConfig+0x60>
 8006144:	2210      	movs	r2, #16
 8006146:	e783      	b.n	8006050 <UART_SetConfig+0x60>
 8006148:	2210      	movs	r2, #16
 800614a:	e781      	b.n	8006050 <UART_SetConfig+0x60>
    switch (clocksource)
 800614c:	2a08      	cmp	r2, #8
 800614e:	d87a      	bhi.n	8006246 <UART_SetConfig+0x256>
 8006150:	e8df f002 	tbb	[pc, r2]
 8006154:	792a7908 	.word	0x792a7908
 8006158:	79797927 	.word	0x79797927
 800615c:	05          	.byte	0x05
 800615d:	00          	.byte	0x00
 800615e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006162:	e003      	b.n	800616c <UART_SetConfig+0x17c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006164:	f7fe fcd0 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006168:	2800      	cmp	r0, #0
 800616a:	d06e      	beq.n	800624a <UART_SetConfig+0x25a>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800616c:	6862      	ldr	r2, [r4, #4]
 800616e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006172:	4283      	cmp	r3, r0
 8006174:	d86b      	bhi.n	800624e <UART_SetConfig+0x25e>
 8006176:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800617a:	d86a      	bhi.n	8006252 <UART_SetConfig+0x262>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800617c:	0e01      	lsrs	r1, r0, #24
 800617e:	0200      	lsls	r0, r0, #8
 8006180:	0853      	lsrs	r3, r2, #1
 8006182:	18c0      	adds	r0, r0, r3
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	f141 0100 	adc.w	r1, r1, #0
 800618c:	f7fa fce4 	bl	8000b58 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006190:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8006194:	4b36      	ldr	r3, [pc, #216]	@ (8006270 <UART_SetConfig+0x280>)
 8006196:	429a      	cmp	r2, r3
 8006198:	d85d      	bhi.n	8006256 <UART_SetConfig+0x266>
          huart->Instance->BRR = usartdiv;
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	60d8      	str	r0, [r3, #12]
 800619e:	2000      	movs	r0, #0
 80061a0:	e044      	b.n	800622c <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetSysClockFreq();
 80061a2:	f7fe f857 	bl	8004254 <HAL_RCC_GetSysClockFreq>
        break;
 80061a6:	e7df      	b.n	8006168 <UART_SetConfig+0x178>
        pclk = (uint32_t) HSI_VALUE;
 80061a8:	4832      	ldr	r0, [pc, #200]	@ (8006274 <UART_SetConfig+0x284>)
 80061aa:	e7df      	b.n	800616c <UART_SetConfig+0x17c>
    switch (clocksource)
 80061ac:	2a08      	cmp	r2, #8
 80061ae:	d863      	bhi.n	8006278 <UART_SetConfig+0x288>
 80061b0:	e8df f002 	tbb	[pc, r2]
 80061b4:	62052107 	.word	0x62052107
 80061b8:	62626224 	.word	0x62626224
 80061bc:	0b          	.byte	0x0b
 80061bd:	00          	.byte	0x00
 80061be:	482d      	ldr	r0, [pc, #180]	@ (8006274 <UART_SetConfig+0x284>)
 80061c0:	e003      	b.n	80061ca <UART_SetConfig+0x1da>
        pclk = HAL_RCC_GetPCLK1Freq();
 80061c2:	f7fe fca1 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d058      	beq.n	800627c <UART_SetConfig+0x28c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061ca:	6862      	ldr	r2, [r4, #4]
 80061cc:	0853      	lsrs	r3, r2, #1
 80061ce:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80061d2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d6:	f1a3 0110 	sub.w	r1, r3, #16
 80061da:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80061de:	4291      	cmp	r1, r2
 80061e0:	d84e      	bhi.n	8006280 <UART_SetConfig+0x290>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061e8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80061ec:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80061ee:	6822      	ldr	r2, [r4, #0]
 80061f0:	60d3      	str	r3, [r2, #12]
 80061f2:	2000      	movs	r0, #0
 80061f4:	e01a      	b.n	800622c <UART_SetConfig+0x23c>
        pclk = HAL_RCC_GetPCLK2Freq();
 80061f6:	f7fe fc99 	bl	8004b2c <HAL_RCC_GetPCLK2Freq>
        break;
 80061fa:	e7e4      	b.n	80061c6 <UART_SetConfig+0x1d6>
        pclk = HAL_RCC_GetSysClockFreq();
 80061fc:	f7fe f82a 	bl	8004254 <HAL_RCC_GetSysClockFreq>
        break;
 8006200:	e7e1      	b.n	80061c6 <UART_SetConfig+0x1d6>
    switch (clocksource)
 8006202:	481c      	ldr	r0, [pc, #112]	@ (8006274 <UART_SetConfig+0x284>)
 8006204:	e003      	b.n	800620e <UART_SetConfig+0x21e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006206:	f7fe fc7f 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800620a:	2800      	cmp	r0, #0
 800620c:	d03c      	beq.n	8006288 <UART_SetConfig+0x298>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800620e:	6863      	ldr	r3, [r4, #4]
 8006210:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006214:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006218:	f1a0 0210 	sub.w	r2, r0, #16
 800621c:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8006220:	429a      	cmp	r2, r3
 8006222:	d833      	bhi.n	800628c <UART_SetConfig+0x29c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	b280      	uxth	r0, r0
 8006228:	60d8      	str	r0, [r3, #12]
 800622a:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800622c:	2300      	movs	r3, #0
 800622e:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8006230:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8006232:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006234:	f7fe fc7a 	bl	8004b2c <HAL_RCC_GetPCLK2Freq>
        break;
 8006238:	e7e7      	b.n	800620a <UART_SetConfig+0x21a>
        pclk = HAL_RCC_GetSysClockFreq();
 800623a:	f7fe f80b 	bl	8004254 <HAL_RCC_GetSysClockFreq>
        break;
 800623e:	e7e4      	b.n	800620a <UART_SetConfig+0x21a>
        pclk = (uint32_t) LSE_VALUE;
 8006240:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006244:	e7e3      	b.n	800620e <UART_SetConfig+0x21e>
    switch (clocksource)
 8006246:	2001      	movs	r0, #1
 8006248:	e7f0      	b.n	800622c <UART_SetConfig+0x23c>
 800624a:	2000      	movs	r0, #0
 800624c:	e7ee      	b.n	800622c <UART_SetConfig+0x23c>
        ret = HAL_ERROR;
 800624e:	2001      	movs	r0, #1
 8006250:	e7ec      	b.n	800622c <UART_SetConfig+0x23c>
 8006252:	2001      	movs	r0, #1
 8006254:	e7ea      	b.n	800622c <UART_SetConfig+0x23c>
          ret = HAL_ERROR;
 8006256:	2001      	movs	r0, #1
 8006258:	e7e8      	b.n	800622c <UART_SetConfig+0x23c>
 800625a:	bf00      	nop
 800625c:	efff69f3 	.word	0xefff69f3
 8006260:	40008000 	.word	0x40008000
 8006264:	40013800 	.word	0x40013800
 8006268:	40004400 	.word	0x40004400
 800626c:	40004800 	.word	0x40004800
 8006270:	000ffcff 	.word	0x000ffcff
 8006274:	00f42400 	.word	0x00f42400
    switch (clocksource)
 8006278:	2001      	movs	r0, #1
 800627a:	e7d7      	b.n	800622c <UART_SetConfig+0x23c>
 800627c:	2000      	movs	r0, #0
 800627e:	e7d5      	b.n	800622c <UART_SetConfig+0x23c>
        ret = HAL_ERROR;
 8006280:	2001      	movs	r0, #1
 8006282:	e7d3      	b.n	800622c <UART_SetConfig+0x23c>
    switch (clocksource)
 8006284:	2001      	movs	r0, #1
 8006286:	e7d1      	b.n	800622c <UART_SetConfig+0x23c>
 8006288:	2000      	movs	r0, #0
 800628a:	e7cf      	b.n	800622c <UART_SetConfig+0x23c>
        ret = HAL_ERROR;
 800628c:	2001      	movs	r0, #1
 800628e:	e7cd      	b.n	800622c <UART_SetConfig+0x23c>

08006290 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006290:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006292:	f013 0f08 	tst.w	r3, #8
 8006296:	d006      	beq.n	80062a6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006298:	6802      	ldr	r2, [r0, #0]
 800629a:	6853      	ldr	r3, [r2, #4]
 800629c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80062a0:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80062a2:	430b      	orrs	r3, r1
 80062a4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062a6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80062a8:	f013 0f01 	tst.w	r3, #1
 80062ac:	d006      	beq.n	80062bc <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062ae:	6802      	ldr	r2, [r0, #0]
 80062b0:	6853      	ldr	r3, [r2, #4]
 80062b2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80062b6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80062b8:	430b      	orrs	r3, r1
 80062ba:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062bc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80062be:	f013 0f02 	tst.w	r3, #2
 80062c2:	d006      	beq.n	80062d2 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062c4:	6802      	ldr	r2, [r0, #0]
 80062c6:	6853      	ldr	r3, [r2, #4]
 80062c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062cc:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80062ce:	430b      	orrs	r3, r1
 80062d0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062d2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80062d4:	f013 0f04 	tst.w	r3, #4
 80062d8:	d006      	beq.n	80062e8 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062da:	6802      	ldr	r2, [r0, #0]
 80062dc:	6853      	ldr	r3, [r2, #4]
 80062de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062e2:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80062e4:	430b      	orrs	r3, r1
 80062e6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062e8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80062ea:	f013 0f10 	tst.w	r3, #16
 80062ee:	d006      	beq.n	80062fe <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062f0:	6802      	ldr	r2, [r0, #0]
 80062f2:	6893      	ldr	r3, [r2, #8]
 80062f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062f8:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80062fa:	430b      	orrs	r3, r1
 80062fc:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062fe:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006300:	f013 0f20 	tst.w	r3, #32
 8006304:	d006      	beq.n	8006314 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006306:	6802      	ldr	r2, [r0, #0]
 8006308:	6893      	ldr	r3, [r2, #8]
 800630a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800630e:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8006310:	430b      	orrs	r3, r1
 8006312:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006314:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006316:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800631a:	d00a      	beq.n	8006332 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800631c:	6802      	ldr	r2, [r0, #0]
 800631e:	6853      	ldr	r3, [r2, #4]
 8006320:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006324:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8006326:	430b      	orrs	r3, r1
 8006328:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800632a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800632c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006330:	d00b      	beq.n	800634a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006332:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006334:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006338:	d006      	beq.n	8006348 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800633a:	6802      	ldr	r2, [r0, #0]
 800633c:	6853      	ldr	r3, [r2, #4]
 800633e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006342:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8006344:	430b      	orrs	r3, r1
 8006346:	6053      	str	r3, [r2, #4]
}
 8006348:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800634a:	6802      	ldr	r2, [r0, #0]
 800634c:	6853      	ldr	r3, [r2, #4]
 800634e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006352:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8006354:	430b      	orrs	r3, r1
 8006356:	6053      	str	r3, [r2, #4]
 8006358:	e7eb      	b.n	8006332 <UART_AdvFeatureConfig+0xa2>

0800635a <UART_WaitOnFlagUntilTimeout>:
{
 800635a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800635e:	4605      	mov	r5, r0
 8006360:	460e      	mov	r6, r1
 8006362:	4617      	mov	r7, r2
 8006364:	4699      	mov	r9, r3
 8006366:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800636a:	682b      	ldr	r3, [r5, #0]
 800636c:	69dc      	ldr	r4, [r3, #28]
 800636e:	ea36 0404 	bics.w	r4, r6, r4
 8006372:	bf0c      	ite	eq
 8006374:	2401      	moveq	r4, #1
 8006376:	2400      	movne	r4, #0
 8006378:	42bc      	cmp	r4, r7
 800637a:	d136      	bne.n	80063ea <UART_WaitOnFlagUntilTimeout+0x90>
    if (Timeout != HAL_MAX_DELAY)
 800637c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006380:	d0f3      	beq.n	800636a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006382:	f7fd fa37 	bl	80037f4 <HAL_GetTick>
 8006386:	eba0 0009 	sub.w	r0, r0, r9
 800638a:	4540      	cmp	r0, r8
 800638c:	d830      	bhi.n	80063f0 <UART_WaitOnFlagUntilTimeout+0x96>
 800638e:	f1b8 0f00 	cmp.w	r8, #0
 8006392:	d02f      	beq.n	80063f4 <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	f012 0f04 	tst.w	r2, #4
 800639c:	d0e5      	beq.n	800636a <UART_WaitOnFlagUntilTimeout+0x10>
 800639e:	2e80      	cmp	r6, #128	@ 0x80
 80063a0:	d0e3      	beq.n	800636a <UART_WaitOnFlagUntilTimeout+0x10>
 80063a2:	2e40      	cmp	r6, #64	@ 0x40
 80063a4:	d0e1      	beq.n	800636a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063a6:	69da      	ldr	r2, [r3, #28]
 80063a8:	f012 0f08 	tst.w	r2, #8
 80063ac:	d111      	bne.n	80063d2 <UART_WaitOnFlagUntilTimeout+0x78>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80063b4:	d0d9      	beq.n	800636a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063ba:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80063bc:	4628      	mov	r0, r5
 80063be:	f7ff fb70 	bl	8005aa2 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063c2:	2320      	movs	r3, #32
 80063c4:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80063c8:	2300      	movs	r3, #0
 80063ca:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_TIMEOUT;
 80063ce:	2003      	movs	r0, #3
 80063d0:	e00c      	b.n	80063ec <UART_WaitOnFlagUntilTimeout+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063d2:	2408      	movs	r4, #8
 80063d4:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 80063d6:	4628      	mov	r0, r5
 80063d8:	f7ff fb63 	bl	8005aa2 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063dc:	f8c5 4084 	str.w	r4, [r5, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 80063e0:	2300      	movs	r3, #0
 80063e2:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
          return HAL_ERROR;
 80063e6:	2001      	movs	r0, #1
 80063e8:	e000      	b.n	80063ec <UART_WaitOnFlagUntilTimeout+0x92>
  return HAL_OK;
 80063ea:	2000      	movs	r0, #0
}
 80063ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80063f0:	2003      	movs	r0, #3
 80063f2:	e7fb      	b.n	80063ec <UART_WaitOnFlagUntilTimeout+0x92>
 80063f4:	2003      	movs	r0, #3
 80063f6:	e7f9      	b.n	80063ec <UART_WaitOnFlagUntilTimeout+0x92>

080063f8 <HAL_UART_Transmit>:
{
 80063f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063fc:	b082      	sub	sp, #8
 80063fe:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006400:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8006402:	2b20      	cmp	r3, #32
 8006404:	d156      	bne.n	80064b4 <HAL_UART_Transmit+0xbc>
 8006406:	4604      	mov	r4, r0
 8006408:	460d      	mov	r5, r1
 800640a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800640c:	2900      	cmp	r1, #0
 800640e:	d055      	beq.n	80064bc <HAL_UART_Transmit+0xc4>
 8006410:	b90a      	cbnz	r2, 8006416 <HAL_UART_Transmit+0x1e>
      return  HAL_ERROR;
 8006412:	2001      	movs	r0, #1
 8006414:	e04f      	b.n	80064b6 <HAL_UART_Transmit+0xbe>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006416:	2300      	movs	r3, #0
 8006418:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800641c:	2321      	movs	r3, #33	@ 0x21
 800641e:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8006420:	f7fd f9e8 	bl	80037f4 <HAL_GetTick>
 8006424:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8006426:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 800642a:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800642e:	68a3      	ldr	r3, [r4, #8]
 8006430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006434:	d002      	beq.n	800643c <HAL_UART_Transmit+0x44>
      pdata16bits = NULL;
 8006436:	f04f 0800 	mov.w	r8, #0
 800643a:	e018      	b.n	800646e <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800643c:	6923      	ldr	r3, [r4, #16]
 800643e:	b113      	cbz	r3, 8006446 <HAL_UART_Transmit+0x4e>
      pdata16bits = NULL;
 8006440:	f04f 0800 	mov.w	r8, #0
 8006444:	e013      	b.n	800646e <HAL_UART_Transmit+0x76>
      pdata16bits = (const uint16_t *) pData;
 8006446:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8006448:	2500      	movs	r5, #0
 800644a:	e010      	b.n	800646e <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 800644c:	2320      	movs	r3, #32
 800644e:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8006450:	2003      	movs	r0, #3
 8006452:	e030      	b.n	80064b6 <HAL_UART_Transmit+0xbe>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006454:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006458:	6822      	ldr	r2, [r4, #0]
 800645a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800645e:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8006460:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8006464:	b292      	uxth	r2, r2
 8006466:	3a01      	subs	r2, #1
 8006468:	b292      	uxth	r2, r2
 800646a:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800646e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8006472:	b29b      	uxth	r3, r3
 8006474:	b17b      	cbz	r3, 8006496 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006476:	9600      	str	r6, [sp, #0]
 8006478:	463b      	mov	r3, r7
 800647a:	2200      	movs	r2, #0
 800647c:	2180      	movs	r1, #128	@ 0x80
 800647e:	4620      	mov	r0, r4
 8006480:	f7ff ff6b 	bl	800635a <UART_WaitOnFlagUntilTimeout>
 8006484:	2800      	cmp	r0, #0
 8006486:	d1e1      	bne.n	800644c <HAL_UART_Transmit+0x54>
      if (pdata8bits == NULL)
 8006488:	2d00      	cmp	r5, #0
 800648a:	d0e3      	beq.n	8006454 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800648c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006494:	e7e4      	b.n	8006460 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006496:	9600      	str	r6, [sp, #0]
 8006498:	463b      	mov	r3, r7
 800649a:	2200      	movs	r2, #0
 800649c:	2140      	movs	r1, #64	@ 0x40
 800649e:	4620      	mov	r0, r4
 80064a0:	f7ff ff5b 	bl	800635a <UART_WaitOnFlagUntilTimeout>
 80064a4:	b910      	cbnz	r0, 80064ac <HAL_UART_Transmit+0xb4>
    huart->gState = HAL_UART_STATE_READY;
 80064a6:	2320      	movs	r3, #32
 80064a8:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 80064aa:	e004      	b.n	80064b6 <HAL_UART_Transmit+0xbe>
      huart->gState = HAL_UART_STATE_READY;
 80064ac:	2320      	movs	r3, #32
 80064ae:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 80064b0:	2003      	movs	r0, #3
 80064b2:	e000      	b.n	80064b6 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 80064b4:	2002      	movs	r0, #2
}
 80064b6:	b002      	add	sp, #8
 80064b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80064bc:	2001      	movs	r0, #1
 80064be:	e7fa      	b.n	80064b6 <HAL_UART_Transmit+0xbe>

080064c0 <UART_CheckIdleState>:
{
 80064c0:	b530      	push	{r4, r5, lr}
 80064c2:	b083      	sub	sp, #12
 80064c4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c6:	2300      	movs	r3, #0
 80064c8:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 80064cc:	f7fd f992 	bl	80037f4 <HAL_GetTick>
 80064d0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	6812      	ldr	r2, [r2, #0]
 80064d6:	f012 0f08 	tst.w	r2, #8
 80064da:	d10f      	bne.n	80064fc <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f013 0f04 	tst.w	r3, #4
 80064e4:	d126      	bne.n	8006534 <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 80064e6:	2320      	movs	r3, #32
 80064e8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80064ea:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ee:	2000      	movs	r0, #0
 80064f0:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064f2:	6660      	str	r0, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 80064f4:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
}
 80064f8:	b003      	add	sp, #12
 80064fa:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	4603      	mov	r3, r0
 8006504:	2200      	movs	r2, #0
 8006506:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800650a:	4620      	mov	r0, r4
 800650c:	f7ff ff25 	bl	800635a <UART_WaitOnFlagUntilTimeout>
 8006510:	2800      	cmp	r0, #0
 8006512:	d0e3      	beq.n	80064dc <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006514:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	e852 3f00 	ldrex	r3, [r2]
 800651a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	e842 3100 	strex	r1, r3, [r2]
 8006522:	2900      	cmp	r1, #0
 8006524:	d1f6      	bne.n	8006514 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 8006526:	2320      	movs	r3, #32
 8006528:	67e3      	str	r3, [r4, #124]	@ 0x7c
      __HAL_UNLOCK(huart);
 800652a:	2300      	movs	r3, #0
 800652c:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 8006530:	2003      	movs	r0, #3
 8006532:	e7e1      	b.n	80064f8 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006534:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	462b      	mov	r3, r5
 800653c:	2200      	movs	r2, #0
 800653e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006542:	4620      	mov	r0, r4
 8006544:	f7ff ff09 	bl	800635a <UART_WaitOnFlagUntilTimeout>
 8006548:	2800      	cmp	r0, #0
 800654a:	d0cc      	beq.n	80064e6 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800654c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	e852 3f00 	ldrex	r3, [r2]
 8006552:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	e842 3100 	strex	r1, r3, [r2]
 800655a:	2900      	cmp	r1, #0
 800655c:	d1f6      	bne.n	800654c <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800655e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	f102 0308 	add.w	r3, r2, #8
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	3208      	adds	r2, #8
 800656e:	e842 3100 	strex	r1, r3, [r2]
 8006572:	2900      	cmp	r1, #0
 8006574:	d1f3      	bne.n	800655e <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 8006576:	2320      	movs	r3, #32
 8006578:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      __HAL_UNLOCK(huart);
 800657c:	2300      	movs	r3, #0
 800657e:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
      return HAL_TIMEOUT;
 8006582:	2003      	movs	r0, #3
 8006584:	e7b8      	b.n	80064f8 <UART_CheckIdleState+0x38>

08006586 <HAL_UART_Init>:
  if (huart == NULL)
 8006586:	b368      	cbz	r0, 80065e4 <HAL_UART_Init+0x5e>
{
 8006588:	b510      	push	{r4, lr}
 800658a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800658c:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 800658e:	b303      	cbz	r3, 80065d2 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8006590:	2324      	movs	r3, #36	@ 0x24
 8006592:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8006594:	6822      	ldr	r2, [r4, #0]
 8006596:	6813      	ldr	r3, [r2, #0]
 8006598:	f023 0301 	bic.w	r3, r3, #1
 800659c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800659e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80065a0:	b9e3      	cbnz	r3, 80065dc <HAL_UART_Init+0x56>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065a2:	4620      	mov	r0, r4
 80065a4:	f7ff fd24 	bl	8005ff0 <UART_SetConfig>
 80065a8:	2801      	cmp	r0, #1
 80065aa:	d011      	beq.n	80065d0 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ac:	6822      	ldr	r2, [r4, #0]
 80065ae:	6853      	ldr	r3, [r2, #4]
 80065b0:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80065b4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065b6:	6822      	ldr	r2, [r4, #0]
 80065b8:	6893      	ldr	r3, [r2, #8]
 80065ba:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80065be:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80065c0:	6822      	ldr	r2, [r4, #0]
 80065c2:	6813      	ldr	r3, [r2, #0]
 80065c4:	f043 0301 	orr.w	r3, r3, #1
 80065c8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80065ca:	4620      	mov	r0, r4
 80065cc:	f7ff ff78 	bl	80064c0 <UART_CheckIdleState>
}
 80065d0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80065d2:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 80065d6:	f7fd fd1f 	bl	8004018 <HAL_UART_MspInit>
 80065da:	e7d9      	b.n	8006590 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80065dc:	4620      	mov	r0, r4
 80065de:	f7ff fe57 	bl	8006290 <UART_AdvFeatureConfig>
 80065e2:	e7de      	b.n	80065a2 <HAL_UART_Init+0x1c>
    return HAL_ERROR;
 80065e4:	2001      	movs	r0, #1
}
 80065e6:	4770      	bx	lr

080065e8 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr  = pData;
 80065e8:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80065ea:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
  huart->RxXferCount = Size;
 80065ee:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	6683      	str	r3, [r0, #104]	@ 0x68
  UART_MASK_COMPUTATION(huart);
 80065f6:	6883      	ldr	r3, [r0, #8]
 80065f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065fc:	d006      	beq.n	800660c <UART_Start_Receive_IT+0x24>
 80065fe:	b9a3      	cbnz	r3, 800662a <UART_Start_Receive_IT+0x42>
 8006600:	6903      	ldr	r3, [r0, #16]
 8006602:	b973      	cbnz	r3, 8006622 <UART_Start_Receive_IT+0x3a>
 8006604:	23ff      	movs	r3, #255	@ 0xff
 8006606:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800660a:	e014      	b.n	8006636 <UART_Start_Receive_IT+0x4e>
 800660c:	6903      	ldr	r3, [r0, #16]
 800660e:	b923      	cbnz	r3, 800661a <UART_Start_Receive_IT+0x32>
 8006610:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8006614:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8006618:	e00d      	b.n	8006636 <UART_Start_Receive_IT+0x4e>
 800661a:	23ff      	movs	r3, #255	@ 0xff
 800661c:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8006620:	e009      	b.n	8006636 <UART_Start_Receive_IT+0x4e>
 8006622:	237f      	movs	r3, #127	@ 0x7f
 8006624:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8006628:	e005      	b.n	8006636 <UART_Start_Receive_IT+0x4e>
 800662a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800662e:	d027      	beq.n	8006680 <UART_Start_Receive_IT+0x98>
 8006630:	2300      	movs	r3, #0
 8006632:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006636:	2300      	movs	r3, #0
 8006638:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800663c:	2322      	movs	r3, #34	@ 0x22
 800663e:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006642:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	f102 0308 	add.w	r3, r2, #8
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	3208      	adds	r2, #8
 8006652:	e842 3100 	strex	r1, r3, [r2]
 8006656:	2900      	cmp	r1, #0
 8006658:	d1f3      	bne.n	8006642 <UART_Start_Receive_IT+0x5a>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800665a:	6883      	ldr	r3, [r0, #8]
 800665c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006660:	d018      	beq.n	8006694 <UART_Start_Receive_IT+0xac>
    huart->RxISR = UART_RxISR_8BIT;
 8006662:	4b14      	ldr	r3, [pc, #80]	@ (80066b4 <UART_Start_Receive_IT+0xcc>)
 8006664:	6683      	str	r3, [r0, #104]	@ 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006666:	6903      	ldr	r3, [r0, #16]
 8006668:	b1d3      	cbz	r3, 80066a0 <UART_Start_Receive_IT+0xb8>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800666a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	e852 3f00 	ldrex	r3, [r2]
 8006670:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	e842 3100 	strex	r1, r3, [r2]
 8006678:	2900      	cmp	r1, #0
 800667a:	d1f6      	bne.n	800666a <UART_Start_Receive_IT+0x82>
}
 800667c:	2000      	movs	r0, #0
 800667e:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006680:	6903      	ldr	r3, [r0, #16]
 8006682:	b91b      	cbnz	r3, 800668c <UART_Start_Receive_IT+0xa4>
 8006684:	237f      	movs	r3, #127	@ 0x7f
 8006686:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800668a:	e7d4      	b.n	8006636 <UART_Start_Receive_IT+0x4e>
 800668c:	233f      	movs	r3, #63	@ 0x3f
 800668e:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8006692:	e7d0      	b.n	8006636 <UART_Start_Receive_IT+0x4e>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006694:	6903      	ldr	r3, [r0, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e3      	bne.n	8006662 <UART_Start_Receive_IT+0x7a>
    huart->RxISR = UART_RxISR_16BIT;
 800669a:	4b07      	ldr	r3, [pc, #28]	@ (80066b8 <UART_Start_Receive_IT+0xd0>)
 800669c:	6683      	str	r3, [r0, #104]	@ 0x68
 800669e:	e7e2      	b.n	8006666 <UART_Start_Receive_IT+0x7e>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80066a0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	e852 3f00 	ldrex	r3, [r2]
 80066a6:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066aa:	e842 3100 	strex	r1, r3, [r2]
 80066ae:	2900      	cmp	r1, #0
 80066b0:	d1f6      	bne.n	80066a0 <UART_Start_Receive_IT+0xb8>
 80066b2:	e7e3      	b.n	800667c <UART_Start_Receive_IT+0x94>
 80066b4:	08005e39 	.word	0x08005e39
 80066b8:	08005f15 	.word	0x08005f15

080066bc <HAL_UART_Receive_IT>:
{
 80066bc:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80066be:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d117      	bne.n	80066f6 <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 80066c6:	b1c1      	cbz	r1, 80066fa <HAL_UART_Receive_IT+0x3e>
 80066c8:	b1ca      	cbz	r2, 80066fe <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ca:	2300      	movs	r3, #0
 80066cc:	6603      	str	r3, [r0, #96]	@ 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066ce:	6803      	ldr	r3, [r0, #0]
 80066d0:	4c0c      	ldr	r4, [pc, #48]	@ (8006704 <HAL_UART_Receive_IT+0x48>)
 80066d2:	42a3      	cmp	r3, r4
 80066d4:	d00c      	beq.n	80066f0 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80066dc:	d008      	beq.n	80066f0 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066de:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	e854 3f00 	ldrex	r3, [r4]
 80066e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	e844 3500 	strex	r5, r3, [r4]
 80066ec:	2d00      	cmp	r5, #0
 80066ee:	d1f6      	bne.n	80066de <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 80066f0:	f7ff ff7a 	bl	80065e8 <UART_Start_Receive_IT>
 80066f4:	e000      	b.n	80066f8 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 80066f6:	2002      	movs	r0, #2
}
 80066f8:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80066fa:	2001      	movs	r0, #1
 80066fc:	e7fc      	b.n	80066f8 <HAL_UART_Receive_IT+0x3c>
 80066fe:	2001      	movs	r0, #1
 8006700:	e7fa      	b.n	80066f8 <HAL_UART_Receive_IT+0x3c>
 8006702:	bf00      	nop
 8006704:	40008000 	.word	0x40008000

08006708 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006708:	4770      	bx	lr

0800670a <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800670a:	e7fe      	b.n	800670a <NMI_Handler>

0800670c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800670c:	e7fe      	b.n	800670c <HardFault_Handler>

0800670e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800670e:	e7fe      	b.n	800670e <MemManage_Handler>

08006710 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006710:	e7fe      	b.n	8006710 <BusFault_Handler>

08006712 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006712:	e7fe      	b.n	8006712 <UsageFault_Handler>

08006714 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006714:	4770      	bx	lr

08006716 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006716:	4770      	bx	lr

08006718 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006718:	4770      	bx	lr
	...

0800671c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800671c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800671e:	f7fd f85d 	bl	80037dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick = true;
 8006722:	4b02      	ldr	r3, [pc, #8]	@ (800672c <SysTick_Handler+0x10>)
 8006724:	2201      	movs	r2, #1
 8006726:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8006728:	bd08      	pop	{r3, pc}
 800672a:	bf00      	nop
 800672c:	20001aa8 	.word	0x20001aa8

08006730 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006730:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006732:	4802      	ldr	r0, [pc, #8]	@ (800673c <USART1_IRQHandler+0xc>)
 8006734:	f7ff f9fc 	bl	8005b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006738:	bd08      	pop	{r3, pc}
 800673a:	bf00      	nop
 800673c:	20004664 	.word	0x20004664

08006740 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006740:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006742:	4802      	ldr	r0, [pc, #8]	@ (800674c <USART2_IRQHandler+0xc>)
 8006744:	f7ff f9f4 	bl	8005b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006748:	bd08      	pop	{r3, pc}
 800674a:	bf00      	nop
 800674c:	200045dc 	.word	0x200045dc

08006750 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006750:	4a03      	ldr	r2, [pc, #12]	@ (8006760 <SystemInit+0x10>)
 8006752:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8006756:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800675a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800675e:	4770      	bx	lr
 8006760:	e000ed00 	.word	0xe000ed00

08006764 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006764:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800679c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006768:	f7ff fff2 	bl	8006750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800676c:	480c      	ldr	r0, [pc, #48]	@ (80067a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800676e:	490d      	ldr	r1, [pc, #52]	@ (80067a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006770:	4a0d      	ldr	r2, [pc, #52]	@ (80067a8 <LoopForever+0xe>)
  movs r3, #0
 8006772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006774:	e002      	b.n	800677c <LoopCopyDataInit>

08006776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800677a:	3304      	adds	r3, #4

0800677c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800677c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800677e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006780:	d3f9      	bcc.n	8006776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006782:	4a0a      	ldr	r2, [pc, #40]	@ (80067ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8006784:	4c0a      	ldr	r4, [pc, #40]	@ (80067b0 <LoopForever+0x16>)
  movs r3, #0
 8006786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006788:	e001      	b.n	800678e <LoopFillZerobss>

0800678a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800678a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800678c:	3204      	adds	r2, #4

0800678e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800678e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006790:	d3fb      	bcc.n	800678a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006792:	f000 f9a3 	bl	8006adc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006796:	f7fc fc8b 	bl	80030b0 <main>

0800679a <LoopForever>:

LoopForever:
    b LoopForever
 800679a:	e7fe      	b.n	800679a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800679c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80067a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80067a4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80067a8:	08008e88 	.word	0x08008e88
  ldr r2, =_sbss
 80067ac:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80067b0:	20004a14 	.word	0x20004a14

080067b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80067b4:	e7fe      	b.n	80067b4 <ADC1_IRQHandler>
	...

080067b8 <rand>:
 80067b8:	4b16      	ldr	r3, [pc, #88]	@ (8006814 <rand+0x5c>)
 80067ba:	b510      	push	{r4, lr}
 80067bc:	681c      	ldr	r4, [r3, #0]
 80067be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80067c0:	b9b3      	cbnz	r3, 80067f0 <rand+0x38>
 80067c2:	2018      	movs	r0, #24
 80067c4:	f000 fa1a 	bl	8006bfc <malloc>
 80067c8:	4602      	mov	r2, r0
 80067ca:	6320      	str	r0, [r4, #48]	@ 0x30
 80067cc:	b920      	cbnz	r0, 80067d8 <rand+0x20>
 80067ce:	4b12      	ldr	r3, [pc, #72]	@ (8006818 <rand+0x60>)
 80067d0:	4812      	ldr	r0, [pc, #72]	@ (800681c <rand+0x64>)
 80067d2:	2152      	movs	r1, #82	@ 0x52
 80067d4:	f000 f9aa 	bl	8006b2c <__assert_func>
 80067d8:	4911      	ldr	r1, [pc, #68]	@ (8006820 <rand+0x68>)
 80067da:	4b12      	ldr	r3, [pc, #72]	@ (8006824 <rand+0x6c>)
 80067dc:	e9c0 1300 	strd	r1, r3, [r0]
 80067e0:	4b11      	ldr	r3, [pc, #68]	@ (8006828 <rand+0x70>)
 80067e2:	6083      	str	r3, [r0, #8]
 80067e4:	230b      	movs	r3, #11
 80067e6:	8183      	strh	r3, [r0, #12]
 80067e8:	2100      	movs	r1, #0
 80067ea:	2001      	movs	r0, #1
 80067ec:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80067f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80067f2:	480e      	ldr	r0, [pc, #56]	@ (800682c <rand+0x74>)
 80067f4:	690b      	ldr	r3, [r1, #16]
 80067f6:	694c      	ldr	r4, [r1, #20]
 80067f8:	4a0d      	ldr	r2, [pc, #52]	@ (8006830 <rand+0x78>)
 80067fa:	4358      	muls	r0, r3
 80067fc:	fb02 0004 	mla	r0, r2, r4, r0
 8006800:	fba3 3202 	umull	r3, r2, r3, r2
 8006804:	3301      	adds	r3, #1
 8006806:	eb40 0002 	adc.w	r0, r0, r2
 800680a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800680e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006812:	bd10      	pop	{r4, pc}
 8006814:	20000020 	.word	0x20000020
 8006818:	08008d70 	.word	0x08008d70
 800681c:	08008d87 	.word	0x08008d87
 8006820:	abcd330e 	.word	0xabcd330e
 8006824:	e66d1234 	.word	0xe66d1234
 8006828:	0005deec 	.word	0x0005deec
 800682c:	5851f42d 	.word	0x5851f42d
 8006830:	4c957f2d 	.word	0x4c957f2d

08006834 <std>:
 8006834:	2300      	movs	r3, #0
 8006836:	b510      	push	{r4, lr}
 8006838:	4604      	mov	r4, r0
 800683a:	e9c0 3300 	strd	r3, r3, [r0]
 800683e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006842:	6083      	str	r3, [r0, #8]
 8006844:	8181      	strh	r1, [r0, #12]
 8006846:	6643      	str	r3, [r0, #100]	@ 0x64
 8006848:	81c2      	strh	r2, [r0, #14]
 800684a:	6183      	str	r3, [r0, #24]
 800684c:	4619      	mov	r1, r3
 800684e:	2208      	movs	r2, #8
 8006850:	305c      	adds	r0, #92	@ 0x5c
 8006852:	f000 f8f4 	bl	8006a3e <memset>
 8006856:	4b0d      	ldr	r3, [pc, #52]	@ (800688c <std+0x58>)
 8006858:	6263      	str	r3, [r4, #36]	@ 0x24
 800685a:	4b0d      	ldr	r3, [pc, #52]	@ (8006890 <std+0x5c>)
 800685c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800685e:	4b0d      	ldr	r3, [pc, #52]	@ (8006894 <std+0x60>)
 8006860:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006862:	4b0d      	ldr	r3, [pc, #52]	@ (8006898 <std+0x64>)
 8006864:	6323      	str	r3, [r4, #48]	@ 0x30
 8006866:	4b0d      	ldr	r3, [pc, #52]	@ (800689c <std+0x68>)
 8006868:	6224      	str	r4, [r4, #32]
 800686a:	429c      	cmp	r4, r3
 800686c:	d006      	beq.n	800687c <std+0x48>
 800686e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006872:	4294      	cmp	r4, r2
 8006874:	d002      	beq.n	800687c <std+0x48>
 8006876:	33d0      	adds	r3, #208	@ 0xd0
 8006878:	429c      	cmp	r4, r3
 800687a:	d105      	bne.n	8006888 <std+0x54>
 800687c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006884:	f000 b94e 	b.w	8006b24 <__retarget_lock_init_recursive>
 8006888:	bd10      	pop	{r4, pc}
 800688a:	bf00      	nop
 800688c:	080069b9 	.word	0x080069b9
 8006890:	080069db 	.word	0x080069db
 8006894:	08006a13 	.word	0x08006a13
 8006898:	08006a37 	.word	0x08006a37
 800689c:	200048c4 	.word	0x200048c4

080068a0 <stdio_exit_handler>:
 80068a0:	4a02      	ldr	r2, [pc, #8]	@ (80068ac <stdio_exit_handler+0xc>)
 80068a2:	4903      	ldr	r1, [pc, #12]	@ (80068b0 <stdio_exit_handler+0x10>)
 80068a4:	4803      	ldr	r0, [pc, #12]	@ (80068b4 <stdio_exit_handler+0x14>)
 80068a6:	f000 b869 	b.w	800697c <_fwalk_sglue>
 80068aa:	bf00      	nop
 80068ac:	20000014 	.word	0x20000014
 80068b0:	08006e71 	.word	0x08006e71
 80068b4:	20000024 	.word	0x20000024

080068b8 <cleanup_stdio>:
 80068b8:	6841      	ldr	r1, [r0, #4]
 80068ba:	4b0c      	ldr	r3, [pc, #48]	@ (80068ec <cleanup_stdio+0x34>)
 80068bc:	4299      	cmp	r1, r3
 80068be:	b510      	push	{r4, lr}
 80068c0:	4604      	mov	r4, r0
 80068c2:	d001      	beq.n	80068c8 <cleanup_stdio+0x10>
 80068c4:	f000 fad4 	bl	8006e70 <_fflush_r>
 80068c8:	68a1      	ldr	r1, [r4, #8]
 80068ca:	4b09      	ldr	r3, [pc, #36]	@ (80068f0 <cleanup_stdio+0x38>)
 80068cc:	4299      	cmp	r1, r3
 80068ce:	d002      	beq.n	80068d6 <cleanup_stdio+0x1e>
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 facd 	bl	8006e70 <_fflush_r>
 80068d6:	68e1      	ldr	r1, [r4, #12]
 80068d8:	4b06      	ldr	r3, [pc, #24]	@ (80068f4 <cleanup_stdio+0x3c>)
 80068da:	4299      	cmp	r1, r3
 80068dc:	d004      	beq.n	80068e8 <cleanup_stdio+0x30>
 80068de:	4620      	mov	r0, r4
 80068e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068e4:	f000 bac4 	b.w	8006e70 <_fflush_r>
 80068e8:	bd10      	pop	{r4, pc}
 80068ea:	bf00      	nop
 80068ec:	200048c4 	.word	0x200048c4
 80068f0:	2000492c 	.word	0x2000492c
 80068f4:	20004994 	.word	0x20004994

080068f8 <global_stdio_init.part.0>:
 80068f8:	b510      	push	{r4, lr}
 80068fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006928 <global_stdio_init.part.0+0x30>)
 80068fc:	4c0b      	ldr	r4, [pc, #44]	@ (800692c <global_stdio_init.part.0+0x34>)
 80068fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006930 <global_stdio_init.part.0+0x38>)
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	4620      	mov	r0, r4
 8006904:	2200      	movs	r2, #0
 8006906:	2104      	movs	r1, #4
 8006908:	f7ff ff94 	bl	8006834 <std>
 800690c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006910:	2201      	movs	r2, #1
 8006912:	2109      	movs	r1, #9
 8006914:	f7ff ff8e 	bl	8006834 <std>
 8006918:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800691c:	2202      	movs	r2, #2
 800691e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006922:	2112      	movs	r1, #18
 8006924:	f7ff bf86 	b.w	8006834 <std>
 8006928:	200049fc 	.word	0x200049fc
 800692c:	200048c4 	.word	0x200048c4
 8006930:	080068a1 	.word	0x080068a1

08006934 <__sfp_lock_acquire>:
 8006934:	4801      	ldr	r0, [pc, #4]	@ (800693c <__sfp_lock_acquire+0x8>)
 8006936:	f000 b8f6 	b.w	8006b26 <__retarget_lock_acquire_recursive>
 800693a:	bf00      	nop
 800693c:	20004a05 	.word	0x20004a05

08006940 <__sfp_lock_release>:
 8006940:	4801      	ldr	r0, [pc, #4]	@ (8006948 <__sfp_lock_release+0x8>)
 8006942:	f000 b8f1 	b.w	8006b28 <__retarget_lock_release_recursive>
 8006946:	bf00      	nop
 8006948:	20004a05 	.word	0x20004a05

0800694c <__sinit>:
 800694c:	b510      	push	{r4, lr}
 800694e:	4604      	mov	r4, r0
 8006950:	f7ff fff0 	bl	8006934 <__sfp_lock_acquire>
 8006954:	6a23      	ldr	r3, [r4, #32]
 8006956:	b11b      	cbz	r3, 8006960 <__sinit+0x14>
 8006958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800695c:	f7ff bff0 	b.w	8006940 <__sfp_lock_release>
 8006960:	4b04      	ldr	r3, [pc, #16]	@ (8006974 <__sinit+0x28>)
 8006962:	6223      	str	r3, [r4, #32]
 8006964:	4b04      	ldr	r3, [pc, #16]	@ (8006978 <__sinit+0x2c>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1f5      	bne.n	8006958 <__sinit+0xc>
 800696c:	f7ff ffc4 	bl	80068f8 <global_stdio_init.part.0>
 8006970:	e7f2      	b.n	8006958 <__sinit+0xc>
 8006972:	bf00      	nop
 8006974:	080068b9 	.word	0x080068b9
 8006978:	200049fc 	.word	0x200049fc

0800697c <_fwalk_sglue>:
 800697c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006980:	4607      	mov	r7, r0
 8006982:	4688      	mov	r8, r1
 8006984:	4614      	mov	r4, r2
 8006986:	2600      	movs	r6, #0
 8006988:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800698c:	f1b9 0901 	subs.w	r9, r9, #1
 8006990:	d505      	bpl.n	800699e <_fwalk_sglue+0x22>
 8006992:	6824      	ldr	r4, [r4, #0]
 8006994:	2c00      	cmp	r4, #0
 8006996:	d1f7      	bne.n	8006988 <_fwalk_sglue+0xc>
 8006998:	4630      	mov	r0, r6
 800699a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800699e:	89ab      	ldrh	r3, [r5, #12]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d907      	bls.n	80069b4 <_fwalk_sglue+0x38>
 80069a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069a8:	3301      	adds	r3, #1
 80069aa:	d003      	beq.n	80069b4 <_fwalk_sglue+0x38>
 80069ac:	4629      	mov	r1, r5
 80069ae:	4638      	mov	r0, r7
 80069b0:	47c0      	blx	r8
 80069b2:	4306      	orrs	r6, r0
 80069b4:	3568      	adds	r5, #104	@ 0x68
 80069b6:	e7e9      	b.n	800698c <_fwalk_sglue+0x10>

080069b8 <__sread>:
 80069b8:	b510      	push	{r4, lr}
 80069ba:	460c      	mov	r4, r1
 80069bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c0:	f000 f868 	bl	8006a94 <_read_r>
 80069c4:	2800      	cmp	r0, #0
 80069c6:	bfab      	itete	ge
 80069c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069ca:	89a3      	ldrhlt	r3, [r4, #12]
 80069cc:	181b      	addge	r3, r3, r0
 80069ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80069d2:	bfac      	ite	ge
 80069d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80069d6:	81a3      	strhlt	r3, [r4, #12]
 80069d8:	bd10      	pop	{r4, pc}

080069da <__swrite>:
 80069da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069de:	461f      	mov	r7, r3
 80069e0:	898b      	ldrh	r3, [r1, #12]
 80069e2:	05db      	lsls	r3, r3, #23
 80069e4:	4605      	mov	r5, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	4616      	mov	r6, r2
 80069ea:	d505      	bpl.n	80069f8 <__swrite+0x1e>
 80069ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f0:	2302      	movs	r3, #2
 80069f2:	2200      	movs	r2, #0
 80069f4:	f000 f83c 	bl	8006a70 <_lseek_r>
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a02:	81a3      	strh	r3, [r4, #12]
 8006a04:	4632      	mov	r2, r6
 8006a06:	463b      	mov	r3, r7
 8006a08:	4628      	mov	r0, r5
 8006a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0e:	f000 b853 	b.w	8006ab8 <_write_r>

08006a12 <__sseek>:
 8006a12:	b510      	push	{r4, lr}
 8006a14:	460c      	mov	r4, r1
 8006a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a1a:	f000 f829 	bl	8006a70 <_lseek_r>
 8006a1e:	1c43      	adds	r3, r0, #1
 8006a20:	89a3      	ldrh	r3, [r4, #12]
 8006a22:	bf15      	itete	ne
 8006a24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a2e:	81a3      	strheq	r3, [r4, #12]
 8006a30:	bf18      	it	ne
 8006a32:	81a3      	strhne	r3, [r4, #12]
 8006a34:	bd10      	pop	{r4, pc}

08006a36 <__sclose>:
 8006a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a3a:	f000 b809 	b.w	8006a50 <_close_r>

08006a3e <memset>:
 8006a3e:	4402      	add	r2, r0
 8006a40:	4603      	mov	r3, r0
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d100      	bne.n	8006a48 <memset+0xa>
 8006a46:	4770      	bx	lr
 8006a48:	f803 1b01 	strb.w	r1, [r3], #1
 8006a4c:	e7f9      	b.n	8006a42 <memset+0x4>
	...

08006a50 <_close_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4d06      	ldr	r5, [pc, #24]	@ (8006a6c <_close_r+0x1c>)
 8006a54:	2300      	movs	r3, #0
 8006a56:	4604      	mov	r4, r0
 8006a58:	4608      	mov	r0, r1
 8006a5a:	602b      	str	r3, [r5, #0]
 8006a5c:	f001 fed6 	bl	800880c <_close>
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	d102      	bne.n	8006a6a <_close_r+0x1a>
 8006a64:	682b      	ldr	r3, [r5, #0]
 8006a66:	b103      	cbz	r3, 8006a6a <_close_r+0x1a>
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
 8006a6c:	20004a00 	.word	0x20004a00

08006a70 <_lseek_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4d07      	ldr	r5, [pc, #28]	@ (8006a90 <_lseek_r+0x20>)
 8006a74:	4604      	mov	r4, r0
 8006a76:	4608      	mov	r0, r1
 8006a78:	4611      	mov	r1, r2
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	602a      	str	r2, [r5, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f001 feec 	bl	800885c <_lseek>
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	d102      	bne.n	8006a8e <_lseek_r+0x1e>
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	b103      	cbz	r3, 8006a8e <_lseek_r+0x1e>
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}
 8006a90:	20004a00 	.word	0x20004a00

08006a94 <_read_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	4d07      	ldr	r5, [pc, #28]	@ (8006ab4 <_read_r+0x20>)
 8006a98:	4604      	mov	r4, r0
 8006a9a:	4608      	mov	r0, r1
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	602a      	str	r2, [r5, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f001 fee2 	bl	800886c <_read>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	d102      	bne.n	8006ab2 <_read_r+0x1e>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	b103      	cbz	r3, 8006ab2 <_read_r+0x1e>
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	20004a00 	.word	0x20004a00

08006ab8 <_write_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4d07      	ldr	r5, [pc, #28]	@ (8006ad8 <_write_r+0x20>)
 8006abc:	4604      	mov	r4, r0
 8006abe:	4608      	mov	r0, r1
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	602a      	str	r2, [r5, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f001 fee6 	bl	8008898 <_write>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	d102      	bne.n	8006ad6 <_write_r+0x1e>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	b103      	cbz	r3, 8006ad6 <_write_r+0x1e>
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
 8006ad8:	20004a00 	.word	0x20004a00

08006adc <__libc_init_array>:
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	4d0d      	ldr	r5, [pc, #52]	@ (8006b14 <__libc_init_array+0x38>)
 8006ae0:	4c0d      	ldr	r4, [pc, #52]	@ (8006b18 <__libc_init_array+0x3c>)
 8006ae2:	1b64      	subs	r4, r4, r5
 8006ae4:	10a4      	asrs	r4, r4, #2
 8006ae6:	2600      	movs	r6, #0
 8006ae8:	42a6      	cmp	r6, r4
 8006aea:	d109      	bne.n	8006b00 <__libc_init_array+0x24>
 8006aec:	4d0b      	ldr	r5, [pc, #44]	@ (8006b1c <__libc_init_array+0x40>)
 8006aee:	4c0c      	ldr	r4, [pc, #48]	@ (8006b20 <__libc_init_array+0x44>)
 8006af0:	f002 f840 	bl	8008b74 <_init>
 8006af4:	1b64      	subs	r4, r4, r5
 8006af6:	10a4      	asrs	r4, r4, #2
 8006af8:	2600      	movs	r6, #0
 8006afa:	42a6      	cmp	r6, r4
 8006afc:	d105      	bne.n	8006b0a <__libc_init_array+0x2e>
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
 8006b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b04:	4798      	blx	r3
 8006b06:	3601      	adds	r6, #1
 8006b08:	e7ee      	b.n	8006ae8 <__libc_init_array+0xc>
 8006b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b0e:	4798      	blx	r3
 8006b10:	3601      	adds	r6, #1
 8006b12:	e7f2      	b.n	8006afa <__libc_init_array+0x1e>
 8006b14:	08008e78 	.word	0x08008e78
 8006b18:	08008e78 	.word	0x08008e78
 8006b1c:	08008e78 	.word	0x08008e78
 8006b20:	08008e7c 	.word	0x08008e7c

08006b24 <__retarget_lock_init_recursive>:
 8006b24:	4770      	bx	lr

08006b26 <__retarget_lock_acquire_recursive>:
 8006b26:	4770      	bx	lr

08006b28 <__retarget_lock_release_recursive>:
 8006b28:	4770      	bx	lr
	...

08006b2c <__assert_func>:
 8006b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b2e:	4614      	mov	r4, r2
 8006b30:	461a      	mov	r2, r3
 8006b32:	4b09      	ldr	r3, [pc, #36]	@ (8006b58 <__assert_func+0x2c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4605      	mov	r5, r0
 8006b38:	68d8      	ldr	r0, [r3, #12]
 8006b3a:	b954      	cbnz	r4, 8006b52 <__assert_func+0x26>
 8006b3c:	4b07      	ldr	r3, [pc, #28]	@ (8006b5c <__assert_func+0x30>)
 8006b3e:	461c      	mov	r4, r3
 8006b40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b44:	9100      	str	r1, [sp, #0]
 8006b46:	462b      	mov	r3, r5
 8006b48:	4905      	ldr	r1, [pc, #20]	@ (8006b60 <__assert_func+0x34>)
 8006b4a:	f000 f9b9 	bl	8006ec0 <fiprintf>
 8006b4e:	f000 f9d9 	bl	8006f04 <abort>
 8006b52:	4b04      	ldr	r3, [pc, #16]	@ (8006b64 <__assert_func+0x38>)
 8006b54:	e7f4      	b.n	8006b40 <__assert_func+0x14>
 8006b56:	bf00      	nop
 8006b58:	20000020 	.word	0x20000020
 8006b5c:	08008e37 	.word	0x08008e37
 8006b60:	08008e09 	.word	0x08008e09
 8006b64:	08008dfc 	.word	0x08008dfc

08006b68 <_free_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	d041      	beq.n	8006bf4 <_free_r+0x8c>
 8006b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b74:	1f0c      	subs	r4, r1, #4
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	bfb8      	it	lt
 8006b7a:	18e4      	addlt	r4, r4, r3
 8006b7c:	f000 f8e8 	bl	8006d50 <__malloc_lock>
 8006b80:	4a1d      	ldr	r2, [pc, #116]	@ (8006bf8 <_free_r+0x90>)
 8006b82:	6813      	ldr	r3, [r2, #0]
 8006b84:	b933      	cbnz	r3, 8006b94 <_free_r+0x2c>
 8006b86:	6063      	str	r3, [r4, #4]
 8006b88:	6014      	str	r4, [r2, #0]
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b90:	f000 b8e4 	b.w	8006d5c <__malloc_unlock>
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	d908      	bls.n	8006baa <_free_r+0x42>
 8006b98:	6820      	ldr	r0, [r4, #0]
 8006b9a:	1821      	adds	r1, r4, r0
 8006b9c:	428b      	cmp	r3, r1
 8006b9e:	bf01      	itttt	eq
 8006ba0:	6819      	ldreq	r1, [r3, #0]
 8006ba2:	685b      	ldreq	r3, [r3, #4]
 8006ba4:	1809      	addeq	r1, r1, r0
 8006ba6:	6021      	streq	r1, [r4, #0]
 8006ba8:	e7ed      	b.n	8006b86 <_free_r+0x1e>
 8006baa:	461a      	mov	r2, r3
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	b10b      	cbz	r3, 8006bb4 <_free_r+0x4c>
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	d9fa      	bls.n	8006baa <_free_r+0x42>
 8006bb4:	6811      	ldr	r1, [r2, #0]
 8006bb6:	1850      	adds	r0, r2, r1
 8006bb8:	42a0      	cmp	r0, r4
 8006bba:	d10b      	bne.n	8006bd4 <_free_r+0x6c>
 8006bbc:	6820      	ldr	r0, [r4, #0]
 8006bbe:	4401      	add	r1, r0
 8006bc0:	1850      	adds	r0, r2, r1
 8006bc2:	4283      	cmp	r3, r0
 8006bc4:	6011      	str	r1, [r2, #0]
 8006bc6:	d1e0      	bne.n	8006b8a <_free_r+0x22>
 8006bc8:	6818      	ldr	r0, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	6053      	str	r3, [r2, #4]
 8006bce:	4408      	add	r0, r1
 8006bd0:	6010      	str	r0, [r2, #0]
 8006bd2:	e7da      	b.n	8006b8a <_free_r+0x22>
 8006bd4:	d902      	bls.n	8006bdc <_free_r+0x74>
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	602b      	str	r3, [r5, #0]
 8006bda:	e7d6      	b.n	8006b8a <_free_r+0x22>
 8006bdc:	6820      	ldr	r0, [r4, #0]
 8006bde:	1821      	adds	r1, r4, r0
 8006be0:	428b      	cmp	r3, r1
 8006be2:	bf04      	itt	eq
 8006be4:	6819      	ldreq	r1, [r3, #0]
 8006be6:	685b      	ldreq	r3, [r3, #4]
 8006be8:	6063      	str	r3, [r4, #4]
 8006bea:	bf04      	itt	eq
 8006bec:	1809      	addeq	r1, r1, r0
 8006bee:	6021      	streq	r1, [r4, #0]
 8006bf0:	6054      	str	r4, [r2, #4]
 8006bf2:	e7ca      	b.n	8006b8a <_free_r+0x22>
 8006bf4:	bd38      	pop	{r3, r4, r5, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20004a0c 	.word	0x20004a0c

08006bfc <malloc>:
 8006bfc:	4b02      	ldr	r3, [pc, #8]	@ (8006c08 <malloc+0xc>)
 8006bfe:	4601      	mov	r1, r0
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	f000 b825 	b.w	8006c50 <_malloc_r>
 8006c06:	bf00      	nop
 8006c08:	20000020 	.word	0x20000020

08006c0c <sbrk_aligned>:
 8006c0c:	b570      	push	{r4, r5, r6, lr}
 8006c0e:	4e0f      	ldr	r6, [pc, #60]	@ (8006c4c <sbrk_aligned+0x40>)
 8006c10:	460c      	mov	r4, r1
 8006c12:	6831      	ldr	r1, [r6, #0]
 8006c14:	4605      	mov	r5, r0
 8006c16:	b911      	cbnz	r1, 8006c1e <sbrk_aligned+0x12>
 8006c18:	f000 f964 	bl	8006ee4 <_sbrk_r>
 8006c1c:	6030      	str	r0, [r6, #0]
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4628      	mov	r0, r5
 8006c22:	f000 f95f 	bl	8006ee4 <_sbrk_r>
 8006c26:	1c43      	adds	r3, r0, #1
 8006c28:	d103      	bne.n	8006c32 <sbrk_aligned+0x26>
 8006c2a:	f04f 34ff 	mov.w	r4, #4294967295
 8006c2e:	4620      	mov	r0, r4
 8006c30:	bd70      	pop	{r4, r5, r6, pc}
 8006c32:	1cc4      	adds	r4, r0, #3
 8006c34:	f024 0403 	bic.w	r4, r4, #3
 8006c38:	42a0      	cmp	r0, r4
 8006c3a:	d0f8      	beq.n	8006c2e <sbrk_aligned+0x22>
 8006c3c:	1a21      	subs	r1, r4, r0
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 f950 	bl	8006ee4 <_sbrk_r>
 8006c44:	3001      	adds	r0, #1
 8006c46:	d1f2      	bne.n	8006c2e <sbrk_aligned+0x22>
 8006c48:	e7ef      	b.n	8006c2a <sbrk_aligned+0x1e>
 8006c4a:	bf00      	nop
 8006c4c:	20004a08 	.word	0x20004a08

08006c50 <_malloc_r>:
 8006c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c54:	1ccd      	adds	r5, r1, #3
 8006c56:	f025 0503 	bic.w	r5, r5, #3
 8006c5a:	3508      	adds	r5, #8
 8006c5c:	2d0c      	cmp	r5, #12
 8006c5e:	bf38      	it	cc
 8006c60:	250c      	movcc	r5, #12
 8006c62:	2d00      	cmp	r5, #0
 8006c64:	4606      	mov	r6, r0
 8006c66:	db01      	blt.n	8006c6c <_malloc_r+0x1c>
 8006c68:	42a9      	cmp	r1, r5
 8006c6a:	d904      	bls.n	8006c76 <_malloc_r+0x26>
 8006c6c:	230c      	movs	r3, #12
 8006c6e:	6033      	str	r3, [r6, #0]
 8006c70:	2000      	movs	r0, #0
 8006c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d4c <_malloc_r+0xfc>
 8006c7a:	f000 f869 	bl	8006d50 <__malloc_lock>
 8006c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8006c82:	461c      	mov	r4, r3
 8006c84:	bb44      	cbnz	r4, 8006cd8 <_malloc_r+0x88>
 8006c86:	4629      	mov	r1, r5
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f7ff ffbf 	bl	8006c0c <sbrk_aligned>
 8006c8e:	1c43      	adds	r3, r0, #1
 8006c90:	4604      	mov	r4, r0
 8006c92:	d158      	bne.n	8006d46 <_malloc_r+0xf6>
 8006c94:	f8d8 4000 	ldr.w	r4, [r8]
 8006c98:	4627      	mov	r7, r4
 8006c9a:	2f00      	cmp	r7, #0
 8006c9c:	d143      	bne.n	8006d26 <_malloc_r+0xd6>
 8006c9e:	2c00      	cmp	r4, #0
 8006ca0:	d04b      	beq.n	8006d3a <_malloc_r+0xea>
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	eb04 0903 	add.w	r9, r4, r3
 8006cac:	f000 f91a 	bl	8006ee4 <_sbrk_r>
 8006cb0:	4581      	cmp	r9, r0
 8006cb2:	d142      	bne.n	8006d3a <_malloc_r+0xea>
 8006cb4:	6821      	ldr	r1, [r4, #0]
 8006cb6:	1a6d      	subs	r5, r5, r1
 8006cb8:	4629      	mov	r1, r5
 8006cba:	4630      	mov	r0, r6
 8006cbc:	f7ff ffa6 	bl	8006c0c <sbrk_aligned>
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d03a      	beq.n	8006d3a <_malloc_r+0xea>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	442b      	add	r3, r5
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	f8d8 3000 	ldr.w	r3, [r8]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	bb62      	cbnz	r2, 8006d2c <_malloc_r+0xdc>
 8006cd2:	f8c8 7000 	str.w	r7, [r8]
 8006cd6:	e00f      	b.n	8006cf8 <_malloc_r+0xa8>
 8006cd8:	6822      	ldr	r2, [r4, #0]
 8006cda:	1b52      	subs	r2, r2, r5
 8006cdc:	d420      	bmi.n	8006d20 <_malloc_r+0xd0>
 8006cde:	2a0b      	cmp	r2, #11
 8006ce0:	d917      	bls.n	8006d12 <_malloc_r+0xc2>
 8006ce2:	1961      	adds	r1, r4, r5
 8006ce4:	42a3      	cmp	r3, r4
 8006ce6:	6025      	str	r5, [r4, #0]
 8006ce8:	bf18      	it	ne
 8006cea:	6059      	strne	r1, [r3, #4]
 8006cec:	6863      	ldr	r3, [r4, #4]
 8006cee:	bf08      	it	eq
 8006cf0:	f8c8 1000 	streq.w	r1, [r8]
 8006cf4:	5162      	str	r2, [r4, r5]
 8006cf6:	604b      	str	r3, [r1, #4]
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f000 f82f 	bl	8006d5c <__malloc_unlock>
 8006cfe:	f104 000b 	add.w	r0, r4, #11
 8006d02:	1d23      	adds	r3, r4, #4
 8006d04:	f020 0007 	bic.w	r0, r0, #7
 8006d08:	1ac2      	subs	r2, r0, r3
 8006d0a:	bf1c      	itt	ne
 8006d0c:	1a1b      	subne	r3, r3, r0
 8006d0e:	50a3      	strne	r3, [r4, r2]
 8006d10:	e7af      	b.n	8006c72 <_malloc_r+0x22>
 8006d12:	6862      	ldr	r2, [r4, #4]
 8006d14:	42a3      	cmp	r3, r4
 8006d16:	bf0c      	ite	eq
 8006d18:	f8c8 2000 	streq.w	r2, [r8]
 8006d1c:	605a      	strne	r2, [r3, #4]
 8006d1e:	e7eb      	b.n	8006cf8 <_malloc_r+0xa8>
 8006d20:	4623      	mov	r3, r4
 8006d22:	6864      	ldr	r4, [r4, #4]
 8006d24:	e7ae      	b.n	8006c84 <_malloc_r+0x34>
 8006d26:	463c      	mov	r4, r7
 8006d28:	687f      	ldr	r7, [r7, #4]
 8006d2a:	e7b6      	b.n	8006c9a <_malloc_r+0x4a>
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	42a3      	cmp	r3, r4
 8006d32:	d1fb      	bne.n	8006d2c <_malloc_r+0xdc>
 8006d34:	2300      	movs	r3, #0
 8006d36:	6053      	str	r3, [r2, #4]
 8006d38:	e7de      	b.n	8006cf8 <_malloc_r+0xa8>
 8006d3a:	230c      	movs	r3, #12
 8006d3c:	6033      	str	r3, [r6, #0]
 8006d3e:	4630      	mov	r0, r6
 8006d40:	f000 f80c 	bl	8006d5c <__malloc_unlock>
 8006d44:	e794      	b.n	8006c70 <_malloc_r+0x20>
 8006d46:	6005      	str	r5, [r0, #0]
 8006d48:	e7d6      	b.n	8006cf8 <_malloc_r+0xa8>
 8006d4a:	bf00      	nop
 8006d4c:	20004a0c 	.word	0x20004a0c

08006d50 <__malloc_lock>:
 8006d50:	4801      	ldr	r0, [pc, #4]	@ (8006d58 <__malloc_lock+0x8>)
 8006d52:	f7ff bee8 	b.w	8006b26 <__retarget_lock_acquire_recursive>
 8006d56:	bf00      	nop
 8006d58:	20004a04 	.word	0x20004a04

08006d5c <__malloc_unlock>:
 8006d5c:	4801      	ldr	r0, [pc, #4]	@ (8006d64 <__malloc_unlock+0x8>)
 8006d5e:	f7ff bee3 	b.w	8006b28 <__retarget_lock_release_recursive>
 8006d62:	bf00      	nop
 8006d64:	20004a04 	.word	0x20004a04

08006d68 <__sflush_r>:
 8006d68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d70:	0717      	lsls	r7, r2, #28
 8006d72:	4605      	mov	r5, r0
 8006d74:	460c      	mov	r4, r1
 8006d76:	d456      	bmi.n	8006e26 <__sflush_r+0xbe>
 8006d78:	684b      	ldr	r3, [r1, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	dc02      	bgt.n	8006d84 <__sflush_r+0x1c>
 8006d7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	dd3d      	ble.n	8006e00 <__sflush_r+0x98>
 8006d84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d86:	2e00      	cmp	r6, #0
 8006d88:	d03a      	beq.n	8006e00 <__sflush_r+0x98>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d90:	682f      	ldr	r7, [r5, #0]
 8006d92:	6a21      	ldr	r1, [r4, #32]
 8006d94:	602b      	str	r3, [r5, #0]
 8006d96:	d025      	beq.n	8006de4 <__sflush_r+0x7c>
 8006d98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	0758      	lsls	r0, r3, #29
 8006d9e:	d505      	bpl.n	8006dac <__sflush_r+0x44>
 8006da0:	6863      	ldr	r3, [r4, #4]
 8006da2:	1ad2      	subs	r2, r2, r3
 8006da4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006da6:	b10b      	cbz	r3, 8006dac <__sflush_r+0x44>
 8006da8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006daa:	1ad2      	subs	r2, r2, r3
 8006dac:	6a21      	ldr	r1, [r4, #32]
 8006dae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006db0:	2300      	movs	r3, #0
 8006db2:	4628      	mov	r0, r5
 8006db4:	47b0      	blx	r6
 8006db6:	1c41      	adds	r1, r0, #1
 8006db8:	d024      	beq.n	8006e04 <__sflush_r+0x9c>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	6063      	str	r3, [r4, #4]
 8006dbe:	6923      	ldr	r3, [r4, #16]
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	89a3      	ldrh	r3, [r4, #12]
 8006dc4:	04da      	lsls	r2, r3, #19
 8006dc6:	d500      	bpl.n	8006dca <__sflush_r+0x62>
 8006dc8:	6560      	str	r0, [r4, #84]	@ 0x54
 8006dca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dcc:	602f      	str	r7, [r5, #0]
 8006dce:	b1b9      	cbz	r1, 8006e00 <__sflush_r+0x98>
 8006dd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dd4:	4299      	cmp	r1, r3
 8006dd6:	d002      	beq.n	8006dde <__sflush_r+0x76>
 8006dd8:	4628      	mov	r0, r5
 8006dda:	f7ff fec5 	bl	8006b68 <_free_r>
 8006dde:	2300      	movs	r3, #0
 8006de0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006de2:	e00d      	b.n	8006e00 <__sflush_r+0x98>
 8006de4:	2301      	movs	r3, #1
 8006de6:	4628      	mov	r0, r5
 8006de8:	47b0      	blx	r6
 8006dea:	1c46      	adds	r6, r0, #1
 8006dec:	4602      	mov	r2, r0
 8006dee:	d1d4      	bne.n	8006d9a <__sflush_r+0x32>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0d1      	beq.n	8006d9a <__sflush_r+0x32>
 8006df6:	2b1d      	cmp	r3, #29
 8006df8:	d001      	beq.n	8006dfe <__sflush_r+0x96>
 8006dfa:	2b16      	cmp	r3, #22
 8006dfc:	d12b      	bne.n	8006e56 <__sflush_r+0xee>
 8006dfe:	602f      	str	r7, [r5, #0]
 8006e00:	2000      	movs	r0, #0
 8006e02:	e02f      	b.n	8006e64 <__sflush_r+0xfc>
 8006e04:	682a      	ldr	r2, [r5, #0]
 8006e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e0a:	b142      	cbz	r2, 8006e1e <__sflush_r+0xb6>
 8006e0c:	2a1d      	cmp	r2, #29
 8006e0e:	d001      	beq.n	8006e14 <__sflush_r+0xac>
 8006e10:	2a16      	cmp	r2, #22
 8006e12:	d122      	bne.n	8006e5a <__sflush_r+0xf2>
 8006e14:	2300      	movs	r3, #0
 8006e16:	6063      	str	r3, [r4, #4]
 8006e18:	6923      	ldr	r3, [r4, #16]
 8006e1a:	6023      	str	r3, [r4, #0]
 8006e1c:	e7d5      	b.n	8006dca <__sflush_r+0x62>
 8006e1e:	6062      	str	r2, [r4, #4]
 8006e20:	6922      	ldr	r2, [r4, #16]
 8006e22:	6022      	str	r2, [r4, #0]
 8006e24:	e7ce      	b.n	8006dc4 <__sflush_r+0x5c>
 8006e26:	690f      	ldr	r7, [r1, #16]
 8006e28:	2f00      	cmp	r7, #0
 8006e2a:	d0e9      	beq.n	8006e00 <__sflush_r+0x98>
 8006e2c:	0793      	lsls	r3, r2, #30
 8006e2e:	680e      	ldr	r6, [r1, #0]
 8006e30:	bf08      	it	eq
 8006e32:	694b      	ldreq	r3, [r1, #20]
 8006e34:	600f      	str	r7, [r1, #0]
 8006e36:	bf18      	it	ne
 8006e38:	2300      	movne	r3, #0
 8006e3a:	eba6 0807 	sub.w	r8, r6, r7
 8006e3e:	608b      	str	r3, [r1, #8]
 8006e40:	f1b8 0f00 	cmp.w	r8, #0
 8006e44:	dddc      	ble.n	8006e00 <__sflush_r+0x98>
 8006e46:	6a21      	ldr	r1, [r4, #32]
 8006e48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e4a:	4643      	mov	r3, r8
 8006e4c:	463a      	mov	r2, r7
 8006e4e:	4628      	mov	r0, r5
 8006e50:	47b0      	blx	r6
 8006e52:	2800      	cmp	r0, #0
 8006e54:	dc08      	bgt.n	8006e68 <__sflush_r+0x100>
 8006e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e5e:	81a3      	strh	r3, [r4, #12]
 8006e60:	f04f 30ff 	mov.w	r0, #4294967295
 8006e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e68:	4407      	add	r7, r0
 8006e6a:	eba8 0800 	sub.w	r8, r8, r0
 8006e6e:	e7e7      	b.n	8006e40 <__sflush_r+0xd8>

08006e70 <_fflush_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	690b      	ldr	r3, [r1, #16]
 8006e74:	4605      	mov	r5, r0
 8006e76:	460c      	mov	r4, r1
 8006e78:	b913      	cbnz	r3, 8006e80 <_fflush_r+0x10>
 8006e7a:	2500      	movs	r5, #0
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	bd38      	pop	{r3, r4, r5, pc}
 8006e80:	b118      	cbz	r0, 8006e8a <_fflush_r+0x1a>
 8006e82:	6a03      	ldr	r3, [r0, #32]
 8006e84:	b90b      	cbnz	r3, 8006e8a <_fflush_r+0x1a>
 8006e86:	f7ff fd61 	bl	800694c <__sinit>
 8006e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d0f3      	beq.n	8006e7a <_fflush_r+0xa>
 8006e92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e94:	07d0      	lsls	r0, r2, #31
 8006e96:	d404      	bmi.n	8006ea2 <_fflush_r+0x32>
 8006e98:	0599      	lsls	r1, r3, #22
 8006e9a:	d402      	bmi.n	8006ea2 <_fflush_r+0x32>
 8006e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e9e:	f7ff fe42 	bl	8006b26 <__retarget_lock_acquire_recursive>
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	f7ff ff5f 	bl	8006d68 <__sflush_r>
 8006eaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006eac:	07da      	lsls	r2, r3, #31
 8006eae:	4605      	mov	r5, r0
 8006eb0:	d4e4      	bmi.n	8006e7c <_fflush_r+0xc>
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	059b      	lsls	r3, r3, #22
 8006eb6:	d4e1      	bmi.n	8006e7c <_fflush_r+0xc>
 8006eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eba:	f7ff fe35 	bl	8006b28 <__retarget_lock_release_recursive>
 8006ebe:	e7dd      	b.n	8006e7c <_fflush_r+0xc>

08006ec0 <fiprintf>:
 8006ec0:	b40e      	push	{r1, r2, r3}
 8006ec2:	b503      	push	{r0, r1, lr}
 8006ec4:	4601      	mov	r1, r0
 8006ec6:	ab03      	add	r3, sp, #12
 8006ec8:	4805      	ldr	r0, [pc, #20]	@ (8006ee0 <fiprintf+0x20>)
 8006eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ece:	6800      	ldr	r0, [r0, #0]
 8006ed0:	9301      	str	r3, [sp, #4]
 8006ed2:	f000 f847 	bl	8006f64 <_vfiprintf_r>
 8006ed6:	b002      	add	sp, #8
 8006ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006edc:	b003      	add	sp, #12
 8006ede:	4770      	bx	lr
 8006ee0:	20000020 	.word	0x20000020

08006ee4 <_sbrk_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4d06      	ldr	r5, [pc, #24]	@ (8006f00 <_sbrk_r+0x1c>)
 8006ee8:	2300      	movs	r3, #0
 8006eea:	4604      	mov	r4, r0
 8006eec:	4608      	mov	r0, r1
 8006eee:	602b      	str	r3, [r5, #0]
 8006ef0:	f001 fcc4 	bl	800887c <_sbrk>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d102      	bne.n	8006efe <_sbrk_r+0x1a>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	b103      	cbz	r3, 8006efe <_sbrk_r+0x1a>
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	20004a00 	.word	0x20004a00

08006f04 <abort>:
 8006f04:	b508      	push	{r3, lr}
 8006f06:	2006      	movs	r0, #6
 8006f08:	f000 fb9a 	bl	8007640 <raise>
 8006f0c:	2001      	movs	r0, #1
 8006f0e:	f001 fccb 	bl	80088a8 <_exit>

08006f12 <__sfputc_r>:
 8006f12:	6893      	ldr	r3, [r2, #8]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	b410      	push	{r4}
 8006f1a:	6093      	str	r3, [r2, #8]
 8006f1c:	da08      	bge.n	8006f30 <__sfputc_r+0x1e>
 8006f1e:	6994      	ldr	r4, [r2, #24]
 8006f20:	42a3      	cmp	r3, r4
 8006f22:	db01      	blt.n	8006f28 <__sfputc_r+0x16>
 8006f24:	290a      	cmp	r1, #10
 8006f26:	d103      	bne.n	8006f30 <__sfputc_r+0x1e>
 8006f28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f2c:	f000 bacc 	b.w	80074c8 <__swbuf_r>
 8006f30:	6813      	ldr	r3, [r2, #0]
 8006f32:	1c58      	adds	r0, r3, #1
 8006f34:	6010      	str	r0, [r2, #0]
 8006f36:	7019      	strb	r1, [r3, #0]
 8006f38:	4608      	mov	r0, r1
 8006f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <__sfputs_r>:
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	4606      	mov	r6, r0
 8006f44:	460f      	mov	r7, r1
 8006f46:	4614      	mov	r4, r2
 8006f48:	18d5      	adds	r5, r2, r3
 8006f4a:	42ac      	cmp	r4, r5
 8006f4c:	d101      	bne.n	8006f52 <__sfputs_r+0x12>
 8006f4e:	2000      	movs	r0, #0
 8006f50:	e007      	b.n	8006f62 <__sfputs_r+0x22>
 8006f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f56:	463a      	mov	r2, r7
 8006f58:	4630      	mov	r0, r6
 8006f5a:	f7ff ffda 	bl	8006f12 <__sfputc_r>
 8006f5e:	1c43      	adds	r3, r0, #1
 8006f60:	d1f3      	bne.n	8006f4a <__sfputs_r+0xa>
 8006f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f64 <_vfiprintf_r>:
 8006f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f68:	460d      	mov	r5, r1
 8006f6a:	b09d      	sub	sp, #116	@ 0x74
 8006f6c:	4614      	mov	r4, r2
 8006f6e:	4698      	mov	r8, r3
 8006f70:	4606      	mov	r6, r0
 8006f72:	b118      	cbz	r0, 8006f7c <_vfiprintf_r+0x18>
 8006f74:	6a03      	ldr	r3, [r0, #32]
 8006f76:	b90b      	cbnz	r3, 8006f7c <_vfiprintf_r+0x18>
 8006f78:	f7ff fce8 	bl	800694c <__sinit>
 8006f7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f7e:	07d9      	lsls	r1, r3, #31
 8006f80:	d405      	bmi.n	8006f8e <_vfiprintf_r+0x2a>
 8006f82:	89ab      	ldrh	r3, [r5, #12]
 8006f84:	059a      	lsls	r2, r3, #22
 8006f86:	d402      	bmi.n	8006f8e <_vfiprintf_r+0x2a>
 8006f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f8a:	f7ff fdcc 	bl	8006b26 <__retarget_lock_acquire_recursive>
 8006f8e:	89ab      	ldrh	r3, [r5, #12]
 8006f90:	071b      	lsls	r3, r3, #28
 8006f92:	d501      	bpl.n	8006f98 <_vfiprintf_r+0x34>
 8006f94:	692b      	ldr	r3, [r5, #16]
 8006f96:	b99b      	cbnz	r3, 8006fc0 <_vfiprintf_r+0x5c>
 8006f98:	4629      	mov	r1, r5
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f000 fad2 	bl	8007544 <__swsetup_r>
 8006fa0:	b170      	cbz	r0, 8006fc0 <_vfiprintf_r+0x5c>
 8006fa2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fa4:	07dc      	lsls	r4, r3, #31
 8006fa6:	d504      	bpl.n	8006fb2 <_vfiprintf_r+0x4e>
 8006fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fac:	b01d      	add	sp, #116	@ 0x74
 8006fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb2:	89ab      	ldrh	r3, [r5, #12]
 8006fb4:	0598      	lsls	r0, r3, #22
 8006fb6:	d4f7      	bmi.n	8006fa8 <_vfiprintf_r+0x44>
 8006fb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fba:	f7ff fdb5 	bl	8006b28 <__retarget_lock_release_recursive>
 8006fbe:	e7f3      	b.n	8006fa8 <_vfiprintf_r+0x44>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fc4:	2320      	movs	r3, #32
 8006fc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006fca:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fce:	2330      	movs	r3, #48	@ 0x30
 8006fd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007180 <_vfiprintf_r+0x21c>
 8006fd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fd8:	f04f 0901 	mov.w	r9, #1
 8006fdc:	4623      	mov	r3, r4
 8006fde:	469a      	mov	sl, r3
 8006fe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fe4:	b10a      	cbz	r2, 8006fea <_vfiprintf_r+0x86>
 8006fe6:	2a25      	cmp	r2, #37	@ 0x25
 8006fe8:	d1f9      	bne.n	8006fde <_vfiprintf_r+0x7a>
 8006fea:	ebba 0b04 	subs.w	fp, sl, r4
 8006fee:	d00b      	beq.n	8007008 <_vfiprintf_r+0xa4>
 8006ff0:	465b      	mov	r3, fp
 8006ff2:	4622      	mov	r2, r4
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f7ff ffa2 	bl	8006f40 <__sfputs_r>
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	f000 80a7 	beq.w	8007150 <_vfiprintf_r+0x1ec>
 8007002:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007004:	445a      	add	r2, fp
 8007006:	9209      	str	r2, [sp, #36]	@ 0x24
 8007008:	f89a 3000 	ldrb.w	r3, [sl]
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 809f 	beq.w	8007150 <_vfiprintf_r+0x1ec>
 8007012:	2300      	movs	r3, #0
 8007014:	f04f 32ff 	mov.w	r2, #4294967295
 8007018:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800701c:	f10a 0a01 	add.w	sl, sl, #1
 8007020:	9304      	str	r3, [sp, #16]
 8007022:	9307      	str	r3, [sp, #28]
 8007024:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007028:	931a      	str	r3, [sp, #104]	@ 0x68
 800702a:	4654      	mov	r4, sl
 800702c:	2205      	movs	r2, #5
 800702e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007032:	4853      	ldr	r0, [pc, #332]	@ (8007180 <_vfiprintf_r+0x21c>)
 8007034:	f7f9 f8ac 	bl	8000190 <memchr>
 8007038:	9a04      	ldr	r2, [sp, #16]
 800703a:	b9d8      	cbnz	r0, 8007074 <_vfiprintf_r+0x110>
 800703c:	06d1      	lsls	r1, r2, #27
 800703e:	bf44      	itt	mi
 8007040:	2320      	movmi	r3, #32
 8007042:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007046:	0713      	lsls	r3, r2, #28
 8007048:	bf44      	itt	mi
 800704a:	232b      	movmi	r3, #43	@ 0x2b
 800704c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007050:	f89a 3000 	ldrb.w	r3, [sl]
 8007054:	2b2a      	cmp	r3, #42	@ 0x2a
 8007056:	d015      	beq.n	8007084 <_vfiprintf_r+0x120>
 8007058:	9a07      	ldr	r2, [sp, #28]
 800705a:	4654      	mov	r4, sl
 800705c:	2000      	movs	r0, #0
 800705e:	f04f 0c0a 	mov.w	ip, #10
 8007062:	4621      	mov	r1, r4
 8007064:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007068:	3b30      	subs	r3, #48	@ 0x30
 800706a:	2b09      	cmp	r3, #9
 800706c:	d94b      	bls.n	8007106 <_vfiprintf_r+0x1a2>
 800706e:	b1b0      	cbz	r0, 800709e <_vfiprintf_r+0x13a>
 8007070:	9207      	str	r2, [sp, #28]
 8007072:	e014      	b.n	800709e <_vfiprintf_r+0x13a>
 8007074:	eba0 0308 	sub.w	r3, r0, r8
 8007078:	fa09 f303 	lsl.w	r3, r9, r3
 800707c:	4313      	orrs	r3, r2
 800707e:	9304      	str	r3, [sp, #16]
 8007080:	46a2      	mov	sl, r4
 8007082:	e7d2      	b.n	800702a <_vfiprintf_r+0xc6>
 8007084:	9b03      	ldr	r3, [sp, #12]
 8007086:	1d19      	adds	r1, r3, #4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	9103      	str	r1, [sp, #12]
 800708c:	2b00      	cmp	r3, #0
 800708e:	bfbb      	ittet	lt
 8007090:	425b      	neglt	r3, r3
 8007092:	f042 0202 	orrlt.w	r2, r2, #2
 8007096:	9307      	strge	r3, [sp, #28]
 8007098:	9307      	strlt	r3, [sp, #28]
 800709a:	bfb8      	it	lt
 800709c:	9204      	strlt	r2, [sp, #16]
 800709e:	7823      	ldrb	r3, [r4, #0]
 80070a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80070a2:	d10a      	bne.n	80070ba <_vfiprintf_r+0x156>
 80070a4:	7863      	ldrb	r3, [r4, #1]
 80070a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80070a8:	d132      	bne.n	8007110 <_vfiprintf_r+0x1ac>
 80070aa:	9b03      	ldr	r3, [sp, #12]
 80070ac:	1d1a      	adds	r2, r3, #4
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	9203      	str	r2, [sp, #12]
 80070b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80070b6:	3402      	adds	r4, #2
 80070b8:	9305      	str	r3, [sp, #20]
 80070ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007190 <_vfiprintf_r+0x22c>
 80070be:	7821      	ldrb	r1, [r4, #0]
 80070c0:	2203      	movs	r2, #3
 80070c2:	4650      	mov	r0, sl
 80070c4:	f7f9 f864 	bl	8000190 <memchr>
 80070c8:	b138      	cbz	r0, 80070da <_vfiprintf_r+0x176>
 80070ca:	9b04      	ldr	r3, [sp, #16]
 80070cc:	eba0 000a 	sub.w	r0, r0, sl
 80070d0:	2240      	movs	r2, #64	@ 0x40
 80070d2:	4082      	lsls	r2, r0
 80070d4:	4313      	orrs	r3, r2
 80070d6:	3401      	adds	r4, #1
 80070d8:	9304      	str	r3, [sp, #16]
 80070da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070de:	4829      	ldr	r0, [pc, #164]	@ (8007184 <_vfiprintf_r+0x220>)
 80070e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070e4:	2206      	movs	r2, #6
 80070e6:	f7f9 f853 	bl	8000190 <memchr>
 80070ea:	2800      	cmp	r0, #0
 80070ec:	d03f      	beq.n	800716e <_vfiprintf_r+0x20a>
 80070ee:	4b26      	ldr	r3, [pc, #152]	@ (8007188 <_vfiprintf_r+0x224>)
 80070f0:	bb1b      	cbnz	r3, 800713a <_vfiprintf_r+0x1d6>
 80070f2:	9b03      	ldr	r3, [sp, #12]
 80070f4:	3307      	adds	r3, #7
 80070f6:	f023 0307 	bic.w	r3, r3, #7
 80070fa:	3308      	adds	r3, #8
 80070fc:	9303      	str	r3, [sp, #12]
 80070fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007100:	443b      	add	r3, r7
 8007102:	9309      	str	r3, [sp, #36]	@ 0x24
 8007104:	e76a      	b.n	8006fdc <_vfiprintf_r+0x78>
 8007106:	fb0c 3202 	mla	r2, ip, r2, r3
 800710a:	460c      	mov	r4, r1
 800710c:	2001      	movs	r0, #1
 800710e:	e7a8      	b.n	8007062 <_vfiprintf_r+0xfe>
 8007110:	2300      	movs	r3, #0
 8007112:	3401      	adds	r4, #1
 8007114:	9305      	str	r3, [sp, #20]
 8007116:	4619      	mov	r1, r3
 8007118:	f04f 0c0a 	mov.w	ip, #10
 800711c:	4620      	mov	r0, r4
 800711e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007122:	3a30      	subs	r2, #48	@ 0x30
 8007124:	2a09      	cmp	r2, #9
 8007126:	d903      	bls.n	8007130 <_vfiprintf_r+0x1cc>
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0c6      	beq.n	80070ba <_vfiprintf_r+0x156>
 800712c:	9105      	str	r1, [sp, #20]
 800712e:	e7c4      	b.n	80070ba <_vfiprintf_r+0x156>
 8007130:	fb0c 2101 	mla	r1, ip, r1, r2
 8007134:	4604      	mov	r4, r0
 8007136:	2301      	movs	r3, #1
 8007138:	e7f0      	b.n	800711c <_vfiprintf_r+0x1b8>
 800713a:	ab03      	add	r3, sp, #12
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	462a      	mov	r2, r5
 8007140:	4b12      	ldr	r3, [pc, #72]	@ (800718c <_vfiprintf_r+0x228>)
 8007142:	a904      	add	r1, sp, #16
 8007144:	4630      	mov	r0, r6
 8007146:	f3af 8000 	nop.w
 800714a:	4607      	mov	r7, r0
 800714c:	1c78      	adds	r0, r7, #1
 800714e:	d1d6      	bne.n	80070fe <_vfiprintf_r+0x19a>
 8007150:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007152:	07d9      	lsls	r1, r3, #31
 8007154:	d405      	bmi.n	8007162 <_vfiprintf_r+0x1fe>
 8007156:	89ab      	ldrh	r3, [r5, #12]
 8007158:	059a      	lsls	r2, r3, #22
 800715a:	d402      	bmi.n	8007162 <_vfiprintf_r+0x1fe>
 800715c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800715e:	f7ff fce3 	bl	8006b28 <__retarget_lock_release_recursive>
 8007162:	89ab      	ldrh	r3, [r5, #12]
 8007164:	065b      	lsls	r3, r3, #25
 8007166:	f53f af1f 	bmi.w	8006fa8 <_vfiprintf_r+0x44>
 800716a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800716c:	e71e      	b.n	8006fac <_vfiprintf_r+0x48>
 800716e:	ab03      	add	r3, sp, #12
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	462a      	mov	r2, r5
 8007174:	4b05      	ldr	r3, [pc, #20]	@ (800718c <_vfiprintf_r+0x228>)
 8007176:	a904      	add	r1, sp, #16
 8007178:	4630      	mov	r0, r6
 800717a:	f000 f879 	bl	8007270 <_printf_i>
 800717e:	e7e4      	b.n	800714a <_vfiprintf_r+0x1e6>
 8007180:	08008e38 	.word	0x08008e38
 8007184:	08008e42 	.word	0x08008e42
 8007188:	00000000 	.word	0x00000000
 800718c:	08006f41 	.word	0x08006f41
 8007190:	08008e3e 	.word	0x08008e3e

08007194 <_printf_common>:
 8007194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007198:	4616      	mov	r6, r2
 800719a:	4698      	mov	r8, r3
 800719c:	688a      	ldr	r2, [r1, #8]
 800719e:	690b      	ldr	r3, [r1, #16]
 80071a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071a4:	4293      	cmp	r3, r2
 80071a6:	bfb8      	it	lt
 80071a8:	4613      	movlt	r3, r2
 80071aa:	6033      	str	r3, [r6, #0]
 80071ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071b0:	4607      	mov	r7, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	b10a      	cbz	r2, 80071ba <_printf_common+0x26>
 80071b6:	3301      	adds	r3, #1
 80071b8:	6033      	str	r3, [r6, #0]
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	0699      	lsls	r1, r3, #26
 80071be:	bf42      	ittt	mi
 80071c0:	6833      	ldrmi	r3, [r6, #0]
 80071c2:	3302      	addmi	r3, #2
 80071c4:	6033      	strmi	r3, [r6, #0]
 80071c6:	6825      	ldr	r5, [r4, #0]
 80071c8:	f015 0506 	ands.w	r5, r5, #6
 80071cc:	d106      	bne.n	80071dc <_printf_common+0x48>
 80071ce:	f104 0a19 	add.w	sl, r4, #25
 80071d2:	68e3      	ldr	r3, [r4, #12]
 80071d4:	6832      	ldr	r2, [r6, #0]
 80071d6:	1a9b      	subs	r3, r3, r2
 80071d8:	42ab      	cmp	r3, r5
 80071da:	dc26      	bgt.n	800722a <_printf_common+0x96>
 80071dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071e0:	6822      	ldr	r2, [r4, #0]
 80071e2:	3b00      	subs	r3, #0
 80071e4:	bf18      	it	ne
 80071e6:	2301      	movne	r3, #1
 80071e8:	0692      	lsls	r2, r2, #26
 80071ea:	d42b      	bmi.n	8007244 <_printf_common+0xb0>
 80071ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071f0:	4641      	mov	r1, r8
 80071f2:	4638      	mov	r0, r7
 80071f4:	47c8      	blx	r9
 80071f6:	3001      	adds	r0, #1
 80071f8:	d01e      	beq.n	8007238 <_printf_common+0xa4>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	6922      	ldr	r2, [r4, #16]
 80071fe:	f003 0306 	and.w	r3, r3, #6
 8007202:	2b04      	cmp	r3, #4
 8007204:	bf02      	ittt	eq
 8007206:	68e5      	ldreq	r5, [r4, #12]
 8007208:	6833      	ldreq	r3, [r6, #0]
 800720a:	1aed      	subeq	r5, r5, r3
 800720c:	68a3      	ldr	r3, [r4, #8]
 800720e:	bf0c      	ite	eq
 8007210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007214:	2500      	movne	r5, #0
 8007216:	4293      	cmp	r3, r2
 8007218:	bfc4      	itt	gt
 800721a:	1a9b      	subgt	r3, r3, r2
 800721c:	18ed      	addgt	r5, r5, r3
 800721e:	2600      	movs	r6, #0
 8007220:	341a      	adds	r4, #26
 8007222:	42b5      	cmp	r5, r6
 8007224:	d11a      	bne.n	800725c <_printf_common+0xc8>
 8007226:	2000      	movs	r0, #0
 8007228:	e008      	b.n	800723c <_printf_common+0xa8>
 800722a:	2301      	movs	r3, #1
 800722c:	4652      	mov	r2, sl
 800722e:	4641      	mov	r1, r8
 8007230:	4638      	mov	r0, r7
 8007232:	47c8      	blx	r9
 8007234:	3001      	adds	r0, #1
 8007236:	d103      	bne.n	8007240 <_printf_common+0xac>
 8007238:	f04f 30ff 	mov.w	r0, #4294967295
 800723c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007240:	3501      	adds	r5, #1
 8007242:	e7c6      	b.n	80071d2 <_printf_common+0x3e>
 8007244:	18e1      	adds	r1, r4, r3
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	2030      	movs	r0, #48	@ 0x30
 800724a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800724e:	4422      	add	r2, r4
 8007250:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007254:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007258:	3302      	adds	r3, #2
 800725a:	e7c7      	b.n	80071ec <_printf_common+0x58>
 800725c:	2301      	movs	r3, #1
 800725e:	4622      	mov	r2, r4
 8007260:	4641      	mov	r1, r8
 8007262:	4638      	mov	r0, r7
 8007264:	47c8      	blx	r9
 8007266:	3001      	adds	r0, #1
 8007268:	d0e6      	beq.n	8007238 <_printf_common+0xa4>
 800726a:	3601      	adds	r6, #1
 800726c:	e7d9      	b.n	8007222 <_printf_common+0x8e>
	...

08007270 <_printf_i>:
 8007270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007274:	7e0f      	ldrb	r7, [r1, #24]
 8007276:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007278:	2f78      	cmp	r7, #120	@ 0x78
 800727a:	4691      	mov	r9, r2
 800727c:	4680      	mov	r8, r0
 800727e:	460c      	mov	r4, r1
 8007280:	469a      	mov	sl, r3
 8007282:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007286:	d807      	bhi.n	8007298 <_printf_i+0x28>
 8007288:	2f62      	cmp	r7, #98	@ 0x62
 800728a:	d80a      	bhi.n	80072a2 <_printf_i+0x32>
 800728c:	2f00      	cmp	r7, #0
 800728e:	f000 80dd 	beq.w	800744c <_printf_i+0x1dc>
 8007292:	2f58      	cmp	r7, #88	@ 0x58
 8007294:	f000 80c3 	beq.w	800741e <_printf_i+0x1ae>
 8007298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800729c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072a0:	e03a      	b.n	8007318 <_printf_i+0xa8>
 80072a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072a6:	2b15      	cmp	r3, #21
 80072a8:	d8f6      	bhi.n	8007298 <_printf_i+0x28>
 80072aa:	a101      	add	r1, pc, #4	@ (adr r1, 80072b0 <_printf_i+0x40>)
 80072ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072b0:	08007309 	.word	0x08007309
 80072b4:	0800731d 	.word	0x0800731d
 80072b8:	08007299 	.word	0x08007299
 80072bc:	08007299 	.word	0x08007299
 80072c0:	08007299 	.word	0x08007299
 80072c4:	08007299 	.word	0x08007299
 80072c8:	0800731d 	.word	0x0800731d
 80072cc:	08007299 	.word	0x08007299
 80072d0:	08007299 	.word	0x08007299
 80072d4:	08007299 	.word	0x08007299
 80072d8:	08007299 	.word	0x08007299
 80072dc:	08007433 	.word	0x08007433
 80072e0:	080073ab 	.word	0x080073ab
 80072e4:	080073eb 	.word	0x080073eb
 80072e8:	08007299 	.word	0x08007299
 80072ec:	08007299 	.word	0x08007299
 80072f0:	08007455 	.word	0x08007455
 80072f4:	08007299 	.word	0x08007299
 80072f8:	080073ab 	.word	0x080073ab
 80072fc:	08007299 	.word	0x08007299
 8007300:	08007299 	.word	0x08007299
 8007304:	080073f3 	.word	0x080073f3
 8007308:	6833      	ldr	r3, [r6, #0]
 800730a:	1d1a      	adds	r2, r3, #4
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6032      	str	r2, [r6, #0]
 8007310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007314:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007318:	2301      	movs	r3, #1
 800731a:	e0a8      	b.n	800746e <_printf_i+0x1fe>
 800731c:	6831      	ldr	r1, [r6, #0]
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	1d08      	adds	r0, r1, #4
 8007322:	6030      	str	r0, [r6, #0]
 8007324:	061e      	lsls	r6, r3, #24
 8007326:	d501      	bpl.n	800732c <_printf_i+0xbc>
 8007328:	680d      	ldr	r5, [r1, #0]
 800732a:	e003      	b.n	8007334 <_printf_i+0xc4>
 800732c:	065d      	lsls	r5, r3, #25
 800732e:	d5fb      	bpl.n	8007328 <_printf_i+0xb8>
 8007330:	f9b1 5000 	ldrsh.w	r5, [r1]
 8007334:	6861      	ldr	r1, [r4, #4]
 8007336:	2d00      	cmp	r5, #0
 8007338:	da78      	bge.n	800742c <_printf_i+0x1bc>
 800733a:	202d      	movs	r0, #45	@ 0x2d
 800733c:	2900      	cmp	r1, #0
 800733e:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 8007342:	60a1      	str	r1, [r4, #8]
 8007344:	da2d      	bge.n	80073a2 <_printf_i+0x132>
 8007346:	485e      	ldr	r0, [pc, #376]	@ (80074c0 <_printf_i+0x250>)
 8007348:	426d      	negs	r5, r5
 800734a:	230a      	movs	r3, #10
 800734c:	4616      	mov	r6, r2
 800734e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007352:	fb03 5711 	mls	r7, r3, r1, r5
 8007356:	5dc7      	ldrb	r7, [r0, r7]
 8007358:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800735c:	462f      	mov	r7, r5
 800735e:	42bb      	cmp	r3, r7
 8007360:	460d      	mov	r5, r1
 8007362:	d9f4      	bls.n	800734e <_printf_i+0xde>
 8007364:	2b08      	cmp	r3, #8
 8007366:	d10b      	bne.n	8007380 <_printf_i+0x110>
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	07df      	lsls	r7, r3, #31
 800736c:	d508      	bpl.n	8007380 <_printf_i+0x110>
 800736e:	6923      	ldr	r3, [r4, #16]
 8007370:	6861      	ldr	r1, [r4, #4]
 8007372:	4299      	cmp	r1, r3
 8007374:	bfde      	ittt	le
 8007376:	2330      	movle	r3, #48	@ 0x30
 8007378:	f806 3c01 	strble.w	r3, [r6, #-1]
 800737c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007380:	1b92      	subs	r2, r2, r6
 8007382:	6122      	str	r2, [r4, #16]
 8007384:	f8cd a000 	str.w	sl, [sp]
 8007388:	464b      	mov	r3, r9
 800738a:	aa03      	add	r2, sp, #12
 800738c:	4621      	mov	r1, r4
 800738e:	4640      	mov	r0, r8
 8007390:	f7ff ff00 	bl	8007194 <_printf_common>
 8007394:	3001      	adds	r0, #1
 8007396:	d16f      	bne.n	8007478 <_printf_i+0x208>
 8007398:	f04f 30ff 	mov.w	r0, #4294967295
 800739c:	b004      	add	sp, #16
 800739e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a2:	f023 0304 	bic.w	r3, r3, #4
 80073a6:	6023      	str	r3, [r4, #0]
 80073a8:	e7cd      	b.n	8007346 <_printf_i+0xd6>
 80073aa:	6821      	ldr	r1, [r4, #0]
 80073ac:	6833      	ldr	r3, [r6, #0]
 80073ae:	0608      	lsls	r0, r1, #24
 80073b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80073b4:	d402      	bmi.n	80073bc <_printf_i+0x14c>
 80073b6:	0649      	lsls	r1, r1, #25
 80073b8:	bf48      	it	mi
 80073ba:	b2ad      	uxthmi	r5, r5
 80073bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80073be:	4840      	ldr	r0, [pc, #256]	@ (80074c0 <_printf_i+0x250>)
 80073c0:	6033      	str	r3, [r6, #0]
 80073c2:	bf14      	ite	ne
 80073c4:	230a      	movne	r3, #10
 80073c6:	2308      	moveq	r3, #8
 80073c8:	2100      	movs	r1, #0
 80073ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073ce:	6866      	ldr	r6, [r4, #4]
 80073d0:	60a6      	str	r6, [r4, #8]
 80073d2:	2e00      	cmp	r6, #0
 80073d4:	dbba      	blt.n	800734c <_printf_i+0xdc>
 80073d6:	6821      	ldr	r1, [r4, #0]
 80073d8:	f021 0104 	bic.w	r1, r1, #4
 80073dc:	6021      	str	r1, [r4, #0]
 80073de:	2d00      	cmp	r5, #0
 80073e0:	d1b4      	bne.n	800734c <_printf_i+0xdc>
 80073e2:	2e00      	cmp	r6, #0
 80073e4:	d1b2      	bne.n	800734c <_printf_i+0xdc>
 80073e6:	4616      	mov	r6, r2
 80073e8:	e7bc      	b.n	8007364 <_printf_i+0xf4>
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	f043 0320 	orr.w	r3, r3, #32
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	4834      	ldr	r0, [pc, #208]	@ (80074c4 <_printf_i+0x254>)
 80073f4:	2778      	movs	r7, #120	@ 0x78
 80073f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	6831      	ldr	r1, [r6, #0]
 80073fe:	061f      	lsls	r7, r3, #24
 8007400:	f851 5b04 	ldr.w	r5, [r1], #4
 8007404:	d402      	bmi.n	800740c <_printf_i+0x19c>
 8007406:	065f      	lsls	r7, r3, #25
 8007408:	bf48      	it	mi
 800740a:	b2ad      	uxthmi	r5, r5
 800740c:	6031      	str	r1, [r6, #0]
 800740e:	07d9      	lsls	r1, r3, #31
 8007410:	bf44      	itt	mi
 8007412:	f043 0320 	orrmi.w	r3, r3, #32
 8007416:	6023      	strmi	r3, [r4, #0]
 8007418:	b11d      	cbz	r5, 8007422 <_printf_i+0x1b2>
 800741a:	2310      	movs	r3, #16
 800741c:	e7d4      	b.n	80073c8 <_printf_i+0x158>
 800741e:	4828      	ldr	r0, [pc, #160]	@ (80074c0 <_printf_i+0x250>)
 8007420:	e7e9      	b.n	80073f6 <_printf_i+0x186>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	f023 0320 	bic.w	r3, r3, #32
 8007428:	6023      	str	r3, [r4, #0]
 800742a:	e7f6      	b.n	800741a <_printf_i+0x1aa>
 800742c:	4824      	ldr	r0, [pc, #144]	@ (80074c0 <_printf_i+0x250>)
 800742e:	230a      	movs	r3, #10
 8007430:	e7cd      	b.n	80073ce <_printf_i+0x15e>
 8007432:	6833      	ldr	r3, [r6, #0]
 8007434:	6825      	ldr	r5, [r4, #0]
 8007436:	6961      	ldr	r1, [r4, #20]
 8007438:	1d18      	adds	r0, r3, #4
 800743a:	6030      	str	r0, [r6, #0]
 800743c:	062e      	lsls	r6, r5, #24
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	d501      	bpl.n	8007446 <_printf_i+0x1d6>
 8007442:	6019      	str	r1, [r3, #0]
 8007444:	e002      	b.n	800744c <_printf_i+0x1dc>
 8007446:	0668      	lsls	r0, r5, #25
 8007448:	d5fb      	bpl.n	8007442 <_printf_i+0x1d2>
 800744a:	8019      	strh	r1, [r3, #0]
 800744c:	2300      	movs	r3, #0
 800744e:	6123      	str	r3, [r4, #16]
 8007450:	4616      	mov	r6, r2
 8007452:	e797      	b.n	8007384 <_printf_i+0x114>
 8007454:	6833      	ldr	r3, [r6, #0]
 8007456:	1d1a      	adds	r2, r3, #4
 8007458:	6032      	str	r2, [r6, #0]
 800745a:	681e      	ldr	r6, [r3, #0]
 800745c:	6862      	ldr	r2, [r4, #4]
 800745e:	2100      	movs	r1, #0
 8007460:	4630      	mov	r0, r6
 8007462:	f7f8 fe95 	bl	8000190 <memchr>
 8007466:	b108      	cbz	r0, 800746c <_printf_i+0x1fc>
 8007468:	1b80      	subs	r0, r0, r6
 800746a:	6060      	str	r0, [r4, #4]
 800746c:	6863      	ldr	r3, [r4, #4]
 800746e:	6123      	str	r3, [r4, #16]
 8007470:	2300      	movs	r3, #0
 8007472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007476:	e785      	b.n	8007384 <_printf_i+0x114>
 8007478:	6923      	ldr	r3, [r4, #16]
 800747a:	4632      	mov	r2, r6
 800747c:	4649      	mov	r1, r9
 800747e:	4640      	mov	r0, r8
 8007480:	47d0      	blx	sl
 8007482:	3001      	adds	r0, #1
 8007484:	d088      	beq.n	8007398 <_printf_i+0x128>
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	079b      	lsls	r3, r3, #30
 800748a:	d414      	bmi.n	80074b6 <_printf_i+0x246>
 800748c:	68e0      	ldr	r0, [r4, #12]
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	4298      	cmp	r0, r3
 8007492:	bfb8      	it	lt
 8007494:	4618      	movlt	r0, r3
 8007496:	e781      	b.n	800739c <_printf_i+0x12c>
 8007498:	2301      	movs	r3, #1
 800749a:	4632      	mov	r2, r6
 800749c:	4649      	mov	r1, r9
 800749e:	4640      	mov	r0, r8
 80074a0:	47d0      	blx	sl
 80074a2:	3001      	adds	r0, #1
 80074a4:	f43f af78 	beq.w	8007398 <_printf_i+0x128>
 80074a8:	3501      	adds	r5, #1
 80074aa:	68e3      	ldr	r3, [r4, #12]
 80074ac:	9903      	ldr	r1, [sp, #12]
 80074ae:	1a5b      	subs	r3, r3, r1
 80074b0:	42ab      	cmp	r3, r5
 80074b2:	dcf1      	bgt.n	8007498 <_printf_i+0x228>
 80074b4:	e7ea      	b.n	800748c <_printf_i+0x21c>
 80074b6:	2500      	movs	r5, #0
 80074b8:	f104 0619 	add.w	r6, r4, #25
 80074bc:	e7f5      	b.n	80074aa <_printf_i+0x23a>
 80074be:	bf00      	nop
 80074c0:	08008e49 	.word	0x08008e49
 80074c4:	08008e5a 	.word	0x08008e5a

080074c8 <__swbuf_r>:
 80074c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ca:	460e      	mov	r6, r1
 80074cc:	4614      	mov	r4, r2
 80074ce:	4605      	mov	r5, r0
 80074d0:	b118      	cbz	r0, 80074da <__swbuf_r+0x12>
 80074d2:	6a03      	ldr	r3, [r0, #32]
 80074d4:	b90b      	cbnz	r3, 80074da <__swbuf_r+0x12>
 80074d6:	f7ff fa39 	bl	800694c <__sinit>
 80074da:	69a3      	ldr	r3, [r4, #24]
 80074dc:	60a3      	str	r3, [r4, #8]
 80074de:	89a3      	ldrh	r3, [r4, #12]
 80074e0:	071a      	lsls	r2, r3, #28
 80074e2:	d501      	bpl.n	80074e8 <__swbuf_r+0x20>
 80074e4:	6923      	ldr	r3, [r4, #16]
 80074e6:	b943      	cbnz	r3, 80074fa <__swbuf_r+0x32>
 80074e8:	4621      	mov	r1, r4
 80074ea:	4628      	mov	r0, r5
 80074ec:	f000 f82a 	bl	8007544 <__swsetup_r>
 80074f0:	b118      	cbz	r0, 80074fa <__swbuf_r+0x32>
 80074f2:	f04f 37ff 	mov.w	r7, #4294967295
 80074f6:	4638      	mov	r0, r7
 80074f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	6922      	ldr	r2, [r4, #16]
 80074fe:	1a98      	subs	r0, r3, r2
 8007500:	6963      	ldr	r3, [r4, #20]
 8007502:	b2f6      	uxtb	r6, r6
 8007504:	4283      	cmp	r3, r0
 8007506:	4637      	mov	r7, r6
 8007508:	dc05      	bgt.n	8007516 <__swbuf_r+0x4e>
 800750a:	4621      	mov	r1, r4
 800750c:	4628      	mov	r0, r5
 800750e:	f7ff fcaf 	bl	8006e70 <_fflush_r>
 8007512:	2800      	cmp	r0, #0
 8007514:	d1ed      	bne.n	80074f2 <__swbuf_r+0x2a>
 8007516:	68a3      	ldr	r3, [r4, #8]
 8007518:	3b01      	subs	r3, #1
 800751a:	60a3      	str	r3, [r4, #8]
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	6022      	str	r2, [r4, #0]
 8007522:	701e      	strb	r6, [r3, #0]
 8007524:	6962      	ldr	r2, [r4, #20]
 8007526:	1c43      	adds	r3, r0, #1
 8007528:	429a      	cmp	r2, r3
 800752a:	d004      	beq.n	8007536 <__swbuf_r+0x6e>
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	07db      	lsls	r3, r3, #31
 8007530:	d5e1      	bpl.n	80074f6 <__swbuf_r+0x2e>
 8007532:	2e0a      	cmp	r6, #10
 8007534:	d1df      	bne.n	80074f6 <__swbuf_r+0x2e>
 8007536:	4621      	mov	r1, r4
 8007538:	4628      	mov	r0, r5
 800753a:	f7ff fc99 	bl	8006e70 <_fflush_r>
 800753e:	2800      	cmp	r0, #0
 8007540:	d0d9      	beq.n	80074f6 <__swbuf_r+0x2e>
 8007542:	e7d6      	b.n	80074f2 <__swbuf_r+0x2a>

08007544 <__swsetup_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	4b29      	ldr	r3, [pc, #164]	@ (80075ec <__swsetup_r+0xa8>)
 8007548:	4605      	mov	r5, r0
 800754a:	6818      	ldr	r0, [r3, #0]
 800754c:	460c      	mov	r4, r1
 800754e:	b118      	cbz	r0, 8007558 <__swsetup_r+0x14>
 8007550:	6a03      	ldr	r3, [r0, #32]
 8007552:	b90b      	cbnz	r3, 8007558 <__swsetup_r+0x14>
 8007554:	f7ff f9fa 	bl	800694c <__sinit>
 8007558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800755c:	0719      	lsls	r1, r3, #28
 800755e:	d422      	bmi.n	80075a6 <__swsetup_r+0x62>
 8007560:	06da      	lsls	r2, r3, #27
 8007562:	d407      	bmi.n	8007574 <__swsetup_r+0x30>
 8007564:	2209      	movs	r2, #9
 8007566:	602a      	str	r2, [r5, #0]
 8007568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800756c:	81a3      	strh	r3, [r4, #12]
 800756e:	f04f 30ff 	mov.w	r0, #4294967295
 8007572:	e033      	b.n	80075dc <__swsetup_r+0x98>
 8007574:	0758      	lsls	r0, r3, #29
 8007576:	d512      	bpl.n	800759e <__swsetup_r+0x5a>
 8007578:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800757a:	b141      	cbz	r1, 800758e <__swsetup_r+0x4a>
 800757c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007580:	4299      	cmp	r1, r3
 8007582:	d002      	beq.n	800758a <__swsetup_r+0x46>
 8007584:	4628      	mov	r0, r5
 8007586:	f7ff faef 	bl	8006b68 <_free_r>
 800758a:	2300      	movs	r3, #0
 800758c:	6363      	str	r3, [r4, #52]	@ 0x34
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007594:	81a3      	strh	r3, [r4, #12]
 8007596:	2300      	movs	r3, #0
 8007598:	6063      	str	r3, [r4, #4]
 800759a:	6923      	ldr	r3, [r4, #16]
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	89a3      	ldrh	r3, [r4, #12]
 80075a0:	f043 0308 	orr.w	r3, r3, #8
 80075a4:	81a3      	strh	r3, [r4, #12]
 80075a6:	6923      	ldr	r3, [r4, #16]
 80075a8:	b94b      	cbnz	r3, 80075be <__swsetup_r+0x7a>
 80075aa:	89a3      	ldrh	r3, [r4, #12]
 80075ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80075b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075b4:	d003      	beq.n	80075be <__swsetup_r+0x7a>
 80075b6:	4621      	mov	r1, r4
 80075b8:	4628      	mov	r0, r5
 80075ba:	f000 f883 	bl	80076c4 <__smakebuf_r>
 80075be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075c2:	f013 0201 	ands.w	r2, r3, #1
 80075c6:	d00a      	beq.n	80075de <__swsetup_r+0x9a>
 80075c8:	2200      	movs	r2, #0
 80075ca:	60a2      	str	r2, [r4, #8]
 80075cc:	6962      	ldr	r2, [r4, #20]
 80075ce:	4252      	negs	r2, r2
 80075d0:	61a2      	str	r2, [r4, #24]
 80075d2:	6922      	ldr	r2, [r4, #16]
 80075d4:	b942      	cbnz	r2, 80075e8 <__swsetup_r+0xa4>
 80075d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075da:	d1c5      	bne.n	8007568 <__swsetup_r+0x24>
 80075dc:	bd38      	pop	{r3, r4, r5, pc}
 80075de:	0799      	lsls	r1, r3, #30
 80075e0:	bf58      	it	pl
 80075e2:	6962      	ldrpl	r2, [r4, #20]
 80075e4:	60a2      	str	r2, [r4, #8]
 80075e6:	e7f4      	b.n	80075d2 <__swsetup_r+0x8e>
 80075e8:	2000      	movs	r0, #0
 80075ea:	e7f7      	b.n	80075dc <__swsetup_r+0x98>
 80075ec:	20000020 	.word	0x20000020

080075f0 <_raise_r>:
 80075f0:	291f      	cmp	r1, #31
 80075f2:	b538      	push	{r3, r4, r5, lr}
 80075f4:	4605      	mov	r5, r0
 80075f6:	460c      	mov	r4, r1
 80075f8:	d904      	bls.n	8007604 <_raise_r+0x14>
 80075fa:	2316      	movs	r3, #22
 80075fc:	6003      	str	r3, [r0, #0]
 80075fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007606:	b112      	cbz	r2, 800760e <_raise_r+0x1e>
 8007608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800760c:	b94b      	cbnz	r3, 8007622 <_raise_r+0x32>
 800760e:	4628      	mov	r0, r5
 8007610:	f000 f830 	bl	8007674 <_getpid_r>
 8007614:	4622      	mov	r2, r4
 8007616:	4601      	mov	r1, r0
 8007618:	4628      	mov	r0, r5
 800761a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800761e:	f000 b817 	b.w	8007650 <_kill_r>
 8007622:	2b01      	cmp	r3, #1
 8007624:	d00a      	beq.n	800763c <_raise_r+0x4c>
 8007626:	1c59      	adds	r1, r3, #1
 8007628:	d103      	bne.n	8007632 <_raise_r+0x42>
 800762a:	2316      	movs	r3, #22
 800762c:	6003      	str	r3, [r0, #0]
 800762e:	2001      	movs	r0, #1
 8007630:	e7e7      	b.n	8007602 <_raise_r+0x12>
 8007632:	2100      	movs	r1, #0
 8007634:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007638:	4620      	mov	r0, r4
 800763a:	4798      	blx	r3
 800763c:	2000      	movs	r0, #0
 800763e:	e7e0      	b.n	8007602 <_raise_r+0x12>

08007640 <raise>:
 8007640:	4b02      	ldr	r3, [pc, #8]	@ (800764c <raise+0xc>)
 8007642:	4601      	mov	r1, r0
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	f7ff bfd3 	b.w	80075f0 <_raise_r>
 800764a:	bf00      	nop
 800764c:	20000020 	.word	0x20000020

08007650 <_kill_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d07      	ldr	r5, [pc, #28]	@ (8007670 <_kill_r+0x20>)
 8007654:	2300      	movs	r3, #0
 8007656:	4604      	mov	r4, r0
 8007658:	4608      	mov	r0, r1
 800765a:	4611      	mov	r1, r2
 800765c:	602b      	str	r3, [r5, #0]
 800765e:	f001 f8f5 	bl	800884c <_kill>
 8007662:	1c43      	adds	r3, r0, #1
 8007664:	d102      	bne.n	800766c <_kill_r+0x1c>
 8007666:	682b      	ldr	r3, [r5, #0]
 8007668:	b103      	cbz	r3, 800766c <_kill_r+0x1c>
 800766a:	6023      	str	r3, [r4, #0]
 800766c:	bd38      	pop	{r3, r4, r5, pc}
 800766e:	bf00      	nop
 8007670:	20004a00 	.word	0x20004a00

08007674 <_getpid_r>:
 8007674:	f001 b8da 	b.w	800882c <_getpid>

08007678 <__swhatbuf_r>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	460c      	mov	r4, r1
 800767c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007680:	2900      	cmp	r1, #0
 8007682:	b096      	sub	sp, #88	@ 0x58
 8007684:	4615      	mov	r5, r2
 8007686:	461e      	mov	r6, r3
 8007688:	da0d      	bge.n	80076a6 <__swhatbuf_r+0x2e>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007690:	f04f 0100 	mov.w	r1, #0
 8007694:	bf14      	ite	ne
 8007696:	2340      	movne	r3, #64	@ 0x40
 8007698:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800769c:	2000      	movs	r0, #0
 800769e:	6031      	str	r1, [r6, #0]
 80076a0:	602b      	str	r3, [r5, #0]
 80076a2:	b016      	add	sp, #88	@ 0x58
 80076a4:	bd70      	pop	{r4, r5, r6, pc}
 80076a6:	466a      	mov	r2, sp
 80076a8:	f000 f848 	bl	800773c <_fstat_r>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	dbec      	blt.n	800768a <__swhatbuf_r+0x12>
 80076b0:	9901      	ldr	r1, [sp, #4]
 80076b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80076b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80076ba:	4259      	negs	r1, r3
 80076bc:	4159      	adcs	r1, r3
 80076be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076c2:	e7eb      	b.n	800769c <__swhatbuf_r+0x24>

080076c4 <__smakebuf_r>:
 80076c4:	898b      	ldrh	r3, [r1, #12]
 80076c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076c8:	079d      	lsls	r5, r3, #30
 80076ca:	4606      	mov	r6, r0
 80076cc:	460c      	mov	r4, r1
 80076ce:	d507      	bpl.n	80076e0 <__smakebuf_r+0x1c>
 80076d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	6123      	str	r3, [r4, #16]
 80076d8:	2301      	movs	r3, #1
 80076da:	6163      	str	r3, [r4, #20]
 80076dc:	b003      	add	sp, #12
 80076de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e0:	ab01      	add	r3, sp, #4
 80076e2:	466a      	mov	r2, sp
 80076e4:	f7ff ffc8 	bl	8007678 <__swhatbuf_r>
 80076e8:	9f00      	ldr	r7, [sp, #0]
 80076ea:	4605      	mov	r5, r0
 80076ec:	4639      	mov	r1, r7
 80076ee:	4630      	mov	r0, r6
 80076f0:	f7ff faae 	bl	8006c50 <_malloc_r>
 80076f4:	b948      	cbnz	r0, 800770a <__smakebuf_r+0x46>
 80076f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076fa:	059a      	lsls	r2, r3, #22
 80076fc:	d4ee      	bmi.n	80076dc <__smakebuf_r+0x18>
 80076fe:	f023 0303 	bic.w	r3, r3, #3
 8007702:	f043 0302 	orr.w	r3, r3, #2
 8007706:	81a3      	strh	r3, [r4, #12]
 8007708:	e7e2      	b.n	80076d0 <__smakebuf_r+0xc>
 800770a:	89a3      	ldrh	r3, [r4, #12]
 800770c:	6020      	str	r0, [r4, #0]
 800770e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007712:	81a3      	strh	r3, [r4, #12]
 8007714:	9b01      	ldr	r3, [sp, #4]
 8007716:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800771a:	b15b      	cbz	r3, 8007734 <__smakebuf_r+0x70>
 800771c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007720:	4630      	mov	r0, r6
 8007722:	f000 f81d 	bl	8007760 <_isatty_r>
 8007726:	b128      	cbz	r0, 8007734 <__smakebuf_r+0x70>
 8007728:	89a3      	ldrh	r3, [r4, #12]
 800772a:	f023 0303 	bic.w	r3, r3, #3
 800772e:	f043 0301 	orr.w	r3, r3, #1
 8007732:	81a3      	strh	r3, [r4, #12]
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	431d      	orrs	r5, r3
 8007738:	81a5      	strh	r5, [r4, #12]
 800773a:	e7cf      	b.n	80076dc <__smakebuf_r+0x18>

0800773c <_fstat_r>:
 800773c:	b538      	push	{r3, r4, r5, lr}
 800773e:	4d07      	ldr	r5, [pc, #28]	@ (800775c <_fstat_r+0x20>)
 8007740:	2300      	movs	r3, #0
 8007742:	4604      	mov	r4, r0
 8007744:	4608      	mov	r0, r1
 8007746:	4611      	mov	r1, r2
 8007748:	602b      	str	r3, [r5, #0]
 800774a:	f001 f867 	bl	800881c <_fstat>
 800774e:	1c43      	adds	r3, r0, #1
 8007750:	d102      	bne.n	8007758 <_fstat_r+0x1c>
 8007752:	682b      	ldr	r3, [r5, #0]
 8007754:	b103      	cbz	r3, 8007758 <_fstat_r+0x1c>
 8007756:	6023      	str	r3, [r4, #0]
 8007758:	bd38      	pop	{r3, r4, r5, pc}
 800775a:	bf00      	nop
 800775c:	20004a00 	.word	0x20004a00

08007760 <_isatty_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4d06      	ldr	r5, [pc, #24]	@ (800777c <_isatty_r+0x1c>)
 8007764:	2300      	movs	r3, #0
 8007766:	4604      	mov	r4, r0
 8007768:	4608      	mov	r0, r1
 800776a:	602b      	str	r3, [r5, #0]
 800776c:	f001 f866 	bl	800883c <_isatty>
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	d102      	bne.n	800777a <_isatty_r+0x1a>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	b103      	cbz	r3, 800777a <_isatty_r+0x1a>
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	bd38      	pop	{r3, r4, r5, pc}
 800777c:	20004a00 	.word	0x20004a00

08007780 <pow>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	ed2d 8b02 	vpush	{d8}
 8007786:	ec55 4b11 	vmov	r4, r5, d1
 800778a:	ec57 6b10 	vmov	r6, r7, d0
 800778e:	f000 f87b 	bl	8007888 <__ieee754_pow>
 8007792:	4622      	mov	r2, r4
 8007794:	462b      	mov	r3, r5
 8007796:	4620      	mov	r0, r4
 8007798:	4629      	mov	r1, r5
 800779a:	eeb0 8a40 	vmov.f32	s16, s0
 800779e:	eef0 8a60 	vmov.f32	s17, s1
 80077a2:	f7f9 f99b 	bl	8000adc <__aeabi_dcmpun>
 80077a6:	b978      	cbnz	r0, 80077c8 <pow+0x48>
 80077a8:	2200      	movs	r2, #0
 80077aa:	2300      	movs	r3, #0
 80077ac:	4630      	mov	r0, r6
 80077ae:	4639      	mov	r1, r7
 80077b0:	f7f9 f962 	bl	8000a78 <__aeabi_dcmpeq>
 80077b4:	b1f0      	cbz	r0, 80077f4 <pow+0x74>
 80077b6:	2200      	movs	r2, #0
 80077b8:	2300      	movs	r3, #0
 80077ba:	4620      	mov	r0, r4
 80077bc:	4629      	mov	r1, r5
 80077be:	f7f9 f95b 	bl	8000a78 <__aeabi_dcmpeq>
 80077c2:	b140      	cbz	r0, 80077d6 <pow+0x56>
 80077c4:	ed9f 8b28 	vldr	d8, [pc, #160]	@ 8007868 <pow+0xe8>
 80077c8:	eeb0 0a48 	vmov.f32	s0, s16
 80077cc:	eef0 0a68 	vmov.f32	s1, s17
 80077d0:	ecbd 8b02 	vpop	{d8}
 80077d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077d6:	ec45 4b10 	vmov	d0, r4, r5
 80077da:	f000 f849 	bl	8007870 <finite>
 80077de:	2800      	cmp	r0, #0
 80077e0:	d0f2      	beq.n	80077c8 <pow+0x48>
 80077e2:	2200      	movs	r2, #0
 80077e4:	2300      	movs	r3, #0
 80077e6:	4620      	mov	r0, r4
 80077e8:	4629      	mov	r1, r5
 80077ea:	f7f9 f94f 	bl	8000a8c <__aeabi_dcmplt>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d0ea      	beq.n	80077c8 <pow+0x48>
 80077f2:	e02e      	b.n	8007852 <pow+0xd2>
 80077f4:	eeb0 0a48 	vmov.f32	s0, s16
 80077f8:	eef0 0a68 	vmov.f32	s1, s17
 80077fc:	f000 f838 	bl	8007870 <finite>
 8007800:	b1a0      	cbz	r0, 800782c <pow+0xac>
 8007802:	ec51 0b18 	vmov	r0, r1, d8
 8007806:	2200      	movs	r2, #0
 8007808:	2300      	movs	r3, #0
 800780a:	f7f9 f935 	bl	8000a78 <__aeabi_dcmpeq>
 800780e:	2800      	cmp	r0, #0
 8007810:	d0da      	beq.n	80077c8 <pow+0x48>
 8007812:	ec47 6b10 	vmov	d0, r6, r7
 8007816:	f000 f82b 	bl	8007870 <finite>
 800781a:	2800      	cmp	r0, #0
 800781c:	d0d4      	beq.n	80077c8 <pow+0x48>
 800781e:	ec45 4b10 	vmov	d0, r4, r5
 8007822:	f000 f825 	bl	8007870 <finite>
 8007826:	2800      	cmp	r0, #0
 8007828:	d0ce      	beq.n	80077c8 <pow+0x48>
 800782a:	e012      	b.n	8007852 <pow+0xd2>
 800782c:	ec47 6b10 	vmov	d0, r6, r7
 8007830:	f000 f81e 	bl	8007870 <finite>
 8007834:	2800      	cmp	r0, #0
 8007836:	d0e4      	beq.n	8007802 <pow+0x82>
 8007838:	ec45 4b10 	vmov	d0, r4, r5
 800783c:	f000 f818 	bl	8007870 <finite>
 8007840:	2800      	cmp	r0, #0
 8007842:	d0de      	beq.n	8007802 <pow+0x82>
 8007844:	ec53 2b18 	vmov	r2, r3, d8
 8007848:	ec51 0b18 	vmov	r0, r1, d8
 800784c:	f7f9 f946 	bl	8000adc <__aeabi_dcmpun>
 8007850:	b920      	cbnz	r0, 800785c <pow+0xdc>
 8007852:	f001 f989 	bl	8008b68 <__errno>
 8007856:	2322      	movs	r3, #34	@ 0x22
 8007858:	6003      	str	r3, [r0, #0]
 800785a:	e7b5      	b.n	80077c8 <pow+0x48>
 800785c:	f001 f984 	bl	8008b68 <__errno>
 8007860:	2321      	movs	r3, #33	@ 0x21
 8007862:	6003      	str	r3, [r0, #0]
 8007864:	e7b0      	b.n	80077c8 <pow+0x48>
 8007866:	bf00      	nop
 8007868:	00000000 	.word	0x00000000
 800786c:	3ff00000 	.word	0x3ff00000

08007870 <finite>:
 8007870:	b082      	sub	sp, #8
 8007872:	ed8d 0b00 	vstr	d0, [sp]
 8007876:	9801      	ldr	r0, [sp, #4]
 8007878:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800787c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007880:	0fc0      	lsrs	r0, r0, #31
 8007882:	b002      	add	sp, #8
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop

08007888 <__ieee754_pow>:
 8007888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	ec55 4b11 	vmov	r4, r5, d1
 8007890:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007894:	ea53 0004 	orrs.w	r0, r3, r4
 8007898:	ec57 6b10 	vmov	r6, r7, d0
 800789c:	b093      	sub	sp, #76	@ 0x4c
 800789e:	d112      	bne.n	80078c6 <__ieee754_pow+0x3e>
 80078a0:	19b3      	adds	r3, r6, r6
 80078a2:	498d      	ldr	r1, [pc, #564]	@ (8007ad8 <__ieee754_pow+0x250>)
 80078a4:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80078a8:	4152      	adcs	r2, r2
 80078aa:	4298      	cmp	r0, r3
 80078ac:	4191      	sbcs	r1, r2
 80078ae:	d220      	bcs.n	80078f2 <__ieee754_pow+0x6a>
 80078b0:	4622      	mov	r2, r4
 80078b2:	462b      	mov	r3, r5
 80078b4:	4630      	mov	r0, r6
 80078b6:	4639      	mov	r1, r7
 80078b8:	f7f8 fcc0 	bl	800023c <__adddf3>
 80078bc:	ec41 0b10 	vmov	d0, r0, r1
 80078c0:	b013      	add	sp, #76	@ 0x4c
 80078c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c6:	4885      	ldr	r0, [pc, #532]	@ (8007adc <__ieee754_pow+0x254>)
 80078c8:	f027 4a00 	bic.w	sl, r7, #2147483648	@ 0x80000000
 80078cc:	4582      	cmp	sl, r0
 80078ce:	46b8      	mov	r8, r7
 80078d0:	4631      	mov	r1, r6
 80078d2:	d913      	bls.n	80078fc <__ieee754_pow+0x74>
 80078d4:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80078d8:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80078dc:	ea58 0801 	orrs.w	r8, r8, r1
 80078e0:	d1e6      	bne.n	80078b0 <__ieee754_pow+0x28>
 80078e2:	1923      	adds	r3, r4, r4
 80078e4:	497c      	ldr	r1, [pc, #496]	@ (8007ad8 <__ieee754_pow+0x250>)
 80078e6:	f485 2200 	eor.w	r2, r5, #524288	@ 0x80000
 80078ea:	4152      	adcs	r2, r2
 80078ec:	4598      	cmp	r8, r3
 80078ee:	4191      	sbcs	r1, r2
 80078f0:	d3de      	bcc.n	80078b0 <__ieee754_pow+0x28>
 80078f2:	ed9f 0b77 	vldr	d0, [pc, #476]	@ 8007ad0 <__ieee754_pow+0x248>
 80078f6:	b013      	add	sp, #76	@ 0x4c
 80078f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fc:	46a9      	mov	r9, r5
 80078fe:	4622      	mov	r2, r4
 8007900:	d016      	beq.n	8007930 <__ieee754_pow+0xa8>
 8007902:	4283      	cmp	r3, r0
 8007904:	d8e6      	bhi.n	80078d4 <__ieee754_pow+0x4c>
 8007906:	4650      	mov	r0, sl
 8007908:	f000 80c9 	beq.w	8007a9e <__ieee754_pow+0x216>
 800790c:	f1b8 0f00 	cmp.w	r8, #0
 8007910:	db16      	blt.n	8007940 <__ieee754_pow+0xb8>
 8007912:	2a00      	cmp	r2, #0
 8007914:	f040 80b1 	bne.w	8007a7a <__ieee754_pow+0x1f2>
 8007918:	f8df c1cc 	ldr.w	ip, [pc, #460]	@ 8007ae8 <__ieee754_pow+0x260>
 800791c:	4563      	cmp	r3, ip
 800791e:	f040 83f5 	bne.w	800810c <__ieee754_pow+0x884>
 8007922:	f1b9 0f00 	cmp.w	r9, #0
 8007926:	f2c0 84fd 	blt.w	8008324 <__ieee754_pow+0xa9c>
 800792a:	ec47 6b10 	vmov	d0, r6, r7
 800792e:	e7c7      	b.n	80078c0 <__ieee754_pow+0x38>
 8007930:	2e00      	cmp	r6, #0
 8007932:	d1bd      	bne.n	80078b0 <__ieee754_pow+0x28>
 8007934:	4553      	cmp	r3, sl
 8007936:	d8bb      	bhi.n	80078b0 <__ieee754_pow+0x28>
 8007938:	f000 841e 	beq.w	8008178 <__ieee754_pow+0x8f0>
 800793c:	4650      	mov	r0, sl
 800793e:	e7e5      	b.n	800790c <__ieee754_pow+0x84>
 8007940:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8007aec <__ieee754_pow+0x264>
 8007944:	4563      	cmp	r3, ip
 8007946:	f200 83f1 	bhi.w	800812c <__ieee754_pow+0x8a4>
 800794a:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8007ae4 <__ieee754_pow+0x25c>
 800794e:	4563      	cmp	r3, ip
 8007950:	d90f      	bls.n	8007972 <__ieee754_pow+0xea>
 8007952:	ea4f 5c23 	mov.w	ip, r3, asr #20
 8007956:	f2ac 3cff 	subw	ip, ip, #1023	@ 0x3ff
 800795a:	f1bc 0f14 	cmp.w	ip, #20
 800795e:	f340 84c7 	ble.w	80082f0 <__ieee754_pow+0xa68>
 8007962:	f1cc 0c34 	rsb	ip, ip, #52	@ 0x34
 8007966:	fa22 fe0c 	lsr.w	lr, r2, ip
 800796a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800796e:	4594      	cmp	ip, r2
 8007970:	d038      	beq.n	80079e4 <__ieee754_pow+0x15c>
 8007972:	2a00      	cmp	r2, #0
 8007974:	d148      	bne.n	8007a08 <__ieee754_pow+0x180>
 8007976:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800797a:	d03c      	beq.n	80079f6 <__ieee754_pow+0x16e>
 800797c:	4693      	mov	fp, r2
 800797e:	ec47 6b10 	vmov	d0, r6, r7
 8007982:	9104      	str	r1, [sp, #16]
 8007984:	9002      	str	r0, [sp, #8]
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	f000 fd74 	bl	8008474 <fabs>
 800798c:	9904      	ldr	r1, [sp, #16]
 800798e:	9b00      	ldr	r3, [sp, #0]
 8007990:	9802      	ldr	r0, [sp, #8]
 8007992:	2900      	cmp	r1, #0
 8007994:	d045      	beq.n	8007a22 <__ieee754_pow+0x19a>
 8007996:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 800799a:	3a01      	subs	r2, #1
 800799c:	ea52 010b 	orrs.w	r1, r2, fp
 80079a0:	f000 8092 	beq.w	8007ac8 <__ieee754_pow+0x240>
 80079a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079a8:	ea5b 0b02 	orrs.w	fp, fp, r2
 80079ac:	f000 83a9 	beq.w	8008102 <__ieee754_pow+0x87a>
 80079b0:	ed9f 7b47 	vldr	d7, [pc, #284]	@ 8007ad0 <__ieee754_pow+0x248>
 80079b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80079b8:	f1b3 4f84 	cmp.w	r3, #1107296256	@ 0x42000000
 80079bc:	f240 8098 	bls.w	8007af0 <__ieee754_pow+0x268>
 80079c0:	4a47      	ldr	r2, [pc, #284]	@ (8007ae0 <__ieee754_pow+0x258>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	4b47      	ldr	r3, [pc, #284]	@ (8007ae4 <__ieee754_pow+0x25c>)
 80079c6:	f240 8427 	bls.w	8008218 <__ieee754_pow+0x990>
 80079ca:	459a      	cmp	sl, r3
 80079cc:	f200 84c2 	bhi.w	8008354 <__ieee754_pow+0xacc>
 80079d0:	f1b9 0f00 	cmp.w	r9, #0
 80079d4:	f2c0 84c2 	blt.w	800835c <__ieee754_pow+0xad4>
 80079d8:	2000      	movs	r0, #0
 80079da:	b013      	add	sp, #76	@ 0x4c
 80079dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e0:	f000 be0a 	b.w	80085f8 <__math_uflow>
 80079e4:	f00e 0e01 	and.w	lr, lr, #1
 80079e8:	f1ce 0b02 	rsb	fp, lr, #2
 80079ec:	2a00      	cmp	r2, #0
 80079ee:	d146      	bne.n	8007a7e <__ieee754_pow+0x1f6>
 80079f0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80079f4:	d1c3      	bne.n	800797e <__ieee754_pow+0xf6>
 80079f6:	4632      	mov	r2, r6
 80079f8:	463b      	mov	r3, r7
 80079fa:	4630      	mov	r0, r6
 80079fc:	4639      	mov	r1, r7
 80079fe:	f7f8 fdd3 	bl	80005a8 <__aeabi_dmul>
 8007a02:	ec41 0b10 	vmov	d0, r0, r1
 8007a06:	e75b      	b.n	80078c0 <__ieee754_pow+0x38>
 8007a08:	ec47 6b10 	vmov	d0, r6, r7
 8007a0c:	9104      	str	r1, [sp, #16]
 8007a0e:	9002      	str	r0, [sp, #8]
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	f000 fd2f 	bl	8008474 <fabs>
 8007a16:	9904      	ldr	r1, [sp, #16]
 8007a18:	9b00      	ldr	r3, [sp, #0]
 8007a1a:	9802      	ldr	r0, [sp, #8]
 8007a1c:	2900      	cmp	r1, #0
 8007a1e:	d153      	bne.n	8007ac8 <__ieee754_pow+0x240>
 8007a20:	468b      	mov	fp, r1
 8007a22:	4a31      	ldr	r2, [pc, #196]	@ (8007ae8 <__ieee754_pow+0x260>)
 8007a24:	f028 4140 	bic.w	r1, r8, #3221225472	@ 0xc0000000
 8007a28:	4291      	cmp	r1, r2
 8007a2a:	d002      	beq.n	8007a32 <__ieee754_pow+0x1aa>
 8007a2c:	f1ba 0f00 	cmp.w	sl, #0
 8007a30:	d1b1      	bne.n	8007996 <__ieee754_pow+0x10e>
 8007a32:	f1b9 0f00 	cmp.w	r9, #0
 8007a36:	da07      	bge.n	8007a48 <__ieee754_pow+0x1c0>
 8007a38:	ec53 2b10 	vmov	r2, r3, d0
 8007a3c:	492a      	ldr	r1, [pc, #168]	@ (8007ae8 <__ieee754_pow+0x260>)
 8007a3e:	2000      	movs	r0, #0
 8007a40:	f7f8 fedc 	bl	80007fc <__aeabi_ddiv>
 8007a44:	ec41 0b10 	vmov	d0, r0, r1
 8007a48:	f1b8 0f00 	cmp.w	r8, #0
 8007a4c:	f6bf af38 	bge.w	80078c0 <__ieee754_pow+0x38>
 8007a50:	f10a 4a40 	add.w	sl, sl, #3221225472	@ 0xc0000000
 8007a54:	f50a 1a80 	add.w	sl, sl, #1048576	@ 0x100000
 8007a58:	ea5a 0a0b 	orrs.w	sl, sl, fp
 8007a5c:	f040 846c 	bne.w	8008338 <__ieee754_pow+0xab0>
 8007a60:	ec53 2b10 	vmov	r2, r3, d0
 8007a64:	4610      	mov	r0, r2
 8007a66:	4619      	mov	r1, r3
 8007a68:	f7f8 fbe6 	bl	8000238 <__aeabi_dsub>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	f7f8 fec4 	bl	80007fc <__aeabi_ddiv>
 8007a74:	ec41 0b10 	vmov	d0, r0, r1
 8007a78:	e722      	b.n	80078c0 <__ieee754_pow+0x38>
 8007a7a:	f04f 0b00 	mov.w	fp, #0
 8007a7e:	ec47 6b10 	vmov	d0, r6, r7
 8007a82:	9104      	str	r1, [sp, #16]
 8007a84:	9002      	str	r0, [sp, #8]
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	f000 fcf4 	bl	8008474 <fabs>
 8007a8c:	9904      	ldr	r1, [sp, #16]
 8007a8e:	9b00      	ldr	r3, [sp, #0]
 8007a90:	9802      	ldr	r0, [sp, #8]
 8007a92:	2900      	cmp	r1, #0
 8007a94:	d0c5      	beq.n	8007a22 <__ieee754_pow+0x19a>
 8007a96:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 8007a9a:	3a01      	subs	r2, #1
 8007a9c:	e782      	b.n	80079a4 <__ieee754_pow+0x11c>
 8007a9e:	2c00      	cmp	r4, #0
 8007aa0:	f47f af18 	bne.w	80078d4 <__ieee754_pow+0x4c>
 8007aa4:	f10a 4340 	add.w	r3, sl, #3221225472	@ 0xc0000000
 8007aa8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8007aac:	4333      	orrs	r3, r6
 8007aae:	f43f af20 	beq.w	80078f2 <__ieee754_pow+0x6a>
 8007ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae4 <__ieee754_pow+0x25c>)
 8007ab4:	459a      	cmp	sl, r3
 8007ab6:	f240 840d 	bls.w	80082d4 <__ieee754_pow+0xa4c>
 8007aba:	f1b9 0f00 	cmp.w	r9, #0
 8007abe:	f2c0 8483 	blt.w	80083c8 <__ieee754_pow+0xb40>
 8007ac2:	ec45 4b10 	vmov	d0, r4, r5
 8007ac6:	e6fb      	b.n	80078c0 <__ieee754_pow+0x38>
 8007ac8:	4632      	mov	r2, r6
 8007aca:	463b      	mov	r3, r7
 8007acc:	e7ca      	b.n	8007a64 <__ieee754_pow+0x1dc>
 8007ace:	bf00      	nop
 8007ad0:	00000000 	.word	0x00000000
 8007ad4:	3ff00000 	.word	0x3ff00000
 8007ad8:	fff00000 	.word	0xfff00000
 8007adc:	7ff00000 	.word	0x7ff00000
 8007ae0:	43f00000 	.word	0x43f00000
 8007ae4:	3fefffff 	.word	0x3fefffff
 8007ae8:	3ff00000 	.word	0x3ff00000
 8007aec:	433fffff 	.word	0x433fffff
 8007af0:	4bd9      	ldr	r3, [pc, #868]	@ (8007e58 <__ieee754_pow+0x5d0>)
 8007af2:	ea08 0303 	and.w	r3, r8, r3
 8007af6:	2200      	movs	r2, #0
 8007af8:	b953      	cbnz	r3, 8007b10 <__ieee754_pow+0x288>
 8007afa:	ec51 0b10 	vmov	r0, r1, d0
 8007afe:	4bd7      	ldr	r3, [pc, #860]	@ (8007e5c <__ieee754_pow+0x5d4>)
 8007b00:	f7f8 fd52 	bl	80005a8 <__aeabi_dmul>
 8007b04:	ec41 0b10 	vmov	d0, r0, r1
 8007b08:	ee10 0a90 	vmov	r0, s1
 8007b0c:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8007b10:	1503      	asrs	r3, r0, #20
 8007b12:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007b16:	189a      	adds	r2, r3, r2
 8007b18:	4bd1      	ldr	r3, [pc, #836]	@ (8007e60 <__ieee754_pow+0x5d8>)
 8007b1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007b1c:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8007b20:	f040 567f 	orr.w	r6, r0, #1069547520	@ 0x3fc00000
 8007b24:	4298      	cmp	r0, r3
 8007b26:	f446 1640 	orr.w	r6, r6, #3145728	@ 0x300000
 8007b2a:	f340 8329 	ble.w	8008180 <__ieee754_pow+0x8f8>
 8007b2e:	4bcd      	ldr	r3, [pc, #820]	@ (8007e64 <__ieee754_pow+0x5dc>)
 8007b30:	4298      	cmp	r0, r3
 8007b32:	f340 8419 	ble.w	8008368 <__ieee754_pow+0xae0>
 8007b36:	ed9f 7bb2 	vldr	d7, [pc, #712]	@ 8007e00 <__ieee754_pow+0x578>
 8007b3a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007b3e:	ed9f 7bb2 	vldr	d7, [pc, #712]	@ 8007e08 <__ieee754_pow+0x580>
 8007b42:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007b46:	ed9f 7bae 	vldr	d7, [pc, #696]	@ 8007e00 <__ieee754_pow+0x578>
 8007b4a:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8007b4e:	3201      	adds	r2, #1
 8007b50:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007b52:	f5a6 1680 	sub.w	r6, r6, #1048576	@ 0x100000
 8007b56:	2700      	movs	r7, #0
 8007b58:	ec53 2b10 	vmov	r2, r3, d0
 8007b5c:	4692      	mov	sl, r2
 8007b5e:	4650      	mov	r0, sl
 8007b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b64:	4631      	mov	r1, r6
 8007b66:	f7f8 fb67 	bl	8000238 <__aeabi_dsub>
 8007b6a:	46b3      	mov	fp, r6
 8007b6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b70:	4680      	mov	r8, r0
 8007b72:	4689      	mov	r9, r1
 8007b74:	4650      	mov	r0, sl
 8007b76:	4631      	mov	r1, r6
 8007b78:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007b7c:	f7f8 fb5e 	bl	800023c <__adddf3>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	2000      	movs	r0, #0
 8007b86:	49b8      	ldr	r1, [pc, #736]	@ (8007e68 <__ieee754_pow+0x5e0>)
 8007b88:	f7f8 fe38 	bl	80007fc <__aeabi_ddiv>
 8007b8c:	468c      	mov	ip, r1
 8007b8e:	4683      	mov	fp, r0
 8007b90:	4663      	mov	r3, ip
 8007b92:	465a      	mov	r2, fp
 8007b94:	4640      	mov	r0, r8
 8007b96:	4649      	mov	r1, r9
 8007b98:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007b9c:	f7f8 fd04 	bl	80005a8 <__aeabi_dmul>
 8007ba0:	460a      	mov	r2, r1
 8007ba2:	4601      	mov	r1, r0
 8007ba4:	e9cd 1200 	strd	r1, r2, [sp]
 8007ba8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007bac:	2100      	movs	r1, #0
 8007bae:	9100      	str	r1, [sp, #0]
 8007bb0:	1076      	asrs	r6, r6, #1
 8007bb2:	e9dd ab00 	ldrd	sl, fp, [sp]
 8007bb6:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8007bba:	f506 2300 	add.w	r3, r6, #524288	@ 0x80000
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	19d9      	adds	r1, r3, r7
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	460f      	mov	r7, r1
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4650      	mov	r0, sl
 8007bcc:	4659      	mov	r1, fp
 8007bce:	f7f8 fceb 	bl	80005a8 <__aeabi_dmul>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	4649      	mov	r1, r9
 8007bda:	f7f8 fb2d 	bl	8000238 <__aeabi_dsub>
 8007bde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007be2:	4680      	mov	r8, r0
 8007be4:	4689      	mov	r9, r1
 8007be6:	4630      	mov	r0, r6
 8007be8:	4639      	mov	r1, r7
 8007bea:	f7f8 fb25 	bl	8000238 <__aeabi_dsub>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bf6:	f7f8 fb1f 	bl	8000238 <__aeabi_dsub>
 8007bfa:	4652      	mov	r2, sl
 8007bfc:	465b      	mov	r3, fp
 8007bfe:	f7f8 fcd3 	bl	80005a8 <__aeabi_dmul>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4640      	mov	r0, r8
 8007c08:	4649      	mov	r1, r9
 8007c0a:	f7f8 fb15 	bl	8000238 <__aeabi_dsub>
 8007c0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c12:	f7f8 fcc9 	bl	80005a8 <__aeabi_dmul>
 8007c16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c1e:	4632      	mov	r2, r6
 8007c20:	463b      	mov	r3, r7
 8007c22:	4630      	mov	r0, r6
 8007c24:	4639      	mov	r1, r7
 8007c26:	f7f8 fcbf 	bl	80005a8 <__aeabi_dmul>
 8007c2a:	a379      	add	r3, pc, #484	@ (adr r3, 8007e10 <__ieee754_pow+0x588>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	4606      	mov	r6, r0
 8007c32:	460f      	mov	r7, r1
 8007c34:	f7f8 fcb8 	bl	80005a8 <__aeabi_dmul>
 8007c38:	a377      	add	r3, pc, #476	@ (adr r3, 8007e18 <__ieee754_pow+0x590>)
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f7f8 fafd 	bl	800023c <__adddf3>
 8007c42:	4632      	mov	r2, r6
 8007c44:	463b      	mov	r3, r7
 8007c46:	f7f8 fcaf 	bl	80005a8 <__aeabi_dmul>
 8007c4a:	a375      	add	r3, pc, #468	@ (adr r3, 8007e20 <__ieee754_pow+0x598>)
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	f7f8 faf4 	bl	800023c <__adddf3>
 8007c54:	4632      	mov	r2, r6
 8007c56:	463b      	mov	r3, r7
 8007c58:	f7f8 fca6 	bl	80005a8 <__aeabi_dmul>
 8007c5c:	a372      	add	r3, pc, #456	@ (adr r3, 8007e28 <__ieee754_pow+0x5a0>)
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f7f8 faeb 	bl	800023c <__adddf3>
 8007c66:	4632      	mov	r2, r6
 8007c68:	463b      	mov	r3, r7
 8007c6a:	f7f8 fc9d 	bl	80005a8 <__aeabi_dmul>
 8007c6e:	a370      	add	r3, pc, #448	@ (adr r3, 8007e30 <__ieee754_pow+0x5a8>)
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	f7f8 fae2 	bl	800023c <__adddf3>
 8007c78:	4632      	mov	r2, r6
 8007c7a:	463b      	mov	r3, r7
 8007c7c:	f7f8 fc94 	bl	80005a8 <__aeabi_dmul>
 8007c80:	a36d      	add	r3, pc, #436	@ (adr r3, 8007e38 <__ieee754_pow+0x5b0>)
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f7f8 fad9 	bl	800023c <__adddf3>
 8007c8a:	4632      	mov	r2, r6
 8007c8c:	4680      	mov	r8, r0
 8007c8e:	4689      	mov	r9, r1
 8007c90:	463b      	mov	r3, r7
 8007c92:	4630      	mov	r0, r6
 8007c94:	4639      	mov	r1, r7
 8007c96:	f7f8 fc87 	bl	80005a8 <__aeabi_dmul>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	4640      	mov	r0, r8
 8007ca0:	4649      	mov	r1, r9
 8007ca2:	f7f8 fc81 	bl	80005a8 <__aeabi_dmul>
 8007ca6:	4652      	mov	r2, sl
 8007ca8:	4606      	mov	r6, r0
 8007caa:	460f      	mov	r7, r1
 8007cac:	465b      	mov	r3, fp
 8007cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cb2:	f7f8 fac3 	bl	800023c <__adddf3>
 8007cb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cba:	f7f8 fc75 	bl	80005a8 <__aeabi_dmul>
 8007cbe:	4632      	mov	r2, r6
 8007cc0:	463b      	mov	r3, r7
 8007cc2:	f7f8 fabb 	bl	800023c <__adddf3>
 8007cc6:	4652      	mov	r2, sl
 8007cc8:	4680      	mov	r8, r0
 8007cca:	4689      	mov	r9, r1
 8007ccc:	465b      	mov	r3, fp
 8007cce:	4650      	mov	r0, sl
 8007cd0:	4659      	mov	r1, fp
 8007cd2:	f7f8 fc69 	bl	80005a8 <__aeabi_dmul>
 8007cd6:	4b65      	ldr	r3, [pc, #404]	@ (8007e6c <__ieee754_pow+0x5e4>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	4606      	mov	r6, r0
 8007cdc:	460f      	mov	r7, r1
 8007cde:	f7f8 faad 	bl	800023c <__adddf3>
 8007ce2:	4642      	mov	r2, r8
 8007ce4:	464b      	mov	r3, r9
 8007ce6:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8007cea:	f7f8 faa7 	bl	800023c <__adddf3>
 8007cee:	f04f 0800 	mov.w	r8, #0
 8007cf2:	4689      	mov	r9, r1
 8007cf4:	4642      	mov	r2, r8
 8007cf6:	464b      	mov	r3, r9
 8007cf8:	4650      	mov	r0, sl
 8007cfa:	4659      	mov	r1, fp
 8007cfc:	f7f8 fc54 	bl	80005a8 <__aeabi_dmul>
 8007d00:	4b5a      	ldr	r3, [pc, #360]	@ (8007e6c <__ieee754_pow+0x5e4>)
 8007d02:	4682      	mov	sl, r0
 8007d04:	468b      	mov	fp, r1
 8007d06:	2200      	movs	r2, #0
 8007d08:	4640      	mov	r0, r8
 8007d0a:	4649      	mov	r1, r9
 8007d0c:	f7f8 fa94 	bl	8000238 <__aeabi_dsub>
 8007d10:	4632      	mov	r2, r6
 8007d12:	463b      	mov	r3, r7
 8007d14:	f7f8 fa90 	bl	8000238 <__aeabi_dsub>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d20:	f7f8 fa8a 	bl	8000238 <__aeabi_dsub>
 8007d24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d28:	f7f8 fc3e 	bl	80005a8 <__aeabi_dmul>
 8007d2c:	4642      	mov	r2, r8
 8007d2e:	464b      	mov	r3, r9
 8007d30:	4606      	mov	r6, r0
 8007d32:	460f      	mov	r7, r1
 8007d34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d38:	f7f8 fc36 	bl	80005a8 <__aeabi_dmul>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4630      	mov	r0, r6
 8007d42:	4639      	mov	r1, r7
 8007d44:	f7f8 fa7a 	bl	800023c <__adddf3>
 8007d48:	4680      	mov	r8, r0
 8007d4a:	4689      	mov	r9, r1
 8007d4c:	4642      	mov	r2, r8
 8007d4e:	464b      	mov	r3, r9
 8007d50:	4650      	mov	r0, sl
 8007d52:	4659      	mov	r1, fp
 8007d54:	f7f8 fa72 	bl	800023c <__adddf3>
 8007d58:	2600      	movs	r6, #0
 8007d5a:	a339      	add	r3, pc, #228	@ (adr r3, 8007e40 <__ieee754_pow+0x5b8>)
 8007d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d60:	4630      	mov	r0, r6
 8007d62:	460f      	mov	r7, r1
 8007d64:	f7f8 fc20 	bl	80005a8 <__aeabi_dmul>
 8007d68:	4652      	mov	r2, sl
 8007d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d6e:	465b      	mov	r3, fp
 8007d70:	4630      	mov	r0, r6
 8007d72:	4639      	mov	r1, r7
 8007d74:	f7f8 fa60 	bl	8000238 <__aeabi_dsub>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4640      	mov	r0, r8
 8007d7e:	4649      	mov	r1, r9
 8007d80:	f7f8 fa5a 	bl	8000238 <__aeabi_dsub>
 8007d84:	a330      	add	r3, pc, #192	@ (adr r3, 8007e48 <__ieee754_pow+0x5c0>)
 8007d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8a:	f7f8 fc0d 	bl	80005a8 <__aeabi_dmul>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	4630      	mov	r0, r6
 8007d94:	4639      	mov	r1, r7
 8007d96:	4616      	mov	r6, r2
 8007d98:	461f      	mov	r7, r3
 8007d9a:	a32d      	add	r3, pc, #180	@ (adr r3, 8007e50 <__ieee754_pow+0x5c8>)
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	f7f8 fc02 	bl	80005a8 <__aeabi_dmul>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4630      	mov	r0, r6
 8007daa:	4639      	mov	r1, r7
 8007dac:	f7f8 fa46 	bl	800023c <__adddf3>
 8007db0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007db4:	f7f8 fa42 	bl	800023c <__adddf3>
 8007db8:	4680      	mov	r8, r0
 8007dba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007dbc:	4689      	mov	r9, r1
 8007dbe:	f7f8 fb89 	bl	80004d4 <__aeabi_i2d>
 8007dc2:	4642      	mov	r2, r8
 8007dc4:	4682      	mov	sl, r0
 8007dc6:	468b      	mov	fp, r1
 8007dc8:	464b      	mov	r3, r9
 8007dca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dce:	f7f8 fa35 	bl	800023c <__adddf3>
 8007dd2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007dd6:	f7f8 fa31 	bl	800023c <__adddf3>
 8007dda:	4652      	mov	r2, sl
 8007ddc:	465b      	mov	r3, fp
 8007dde:	f7f8 fa2d 	bl	800023c <__adddf3>
 8007de2:	2600      	movs	r6, #0
 8007de4:	4652      	mov	r2, sl
 8007de6:	465b      	mov	r3, fp
 8007de8:	4630      	mov	r0, r6
 8007dea:	460f      	mov	r7, r1
 8007dec:	f7f8 fa24 	bl	8000238 <__aeabi_dsub>
 8007df0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007df4:	f7f8 fa20 	bl	8000238 <__aeabi_dsub>
 8007df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dfc:	e038      	b.n	8007e70 <__ieee754_pow+0x5e8>
 8007dfe:	bf00      	nop
	...
 8007e0c:	3ff00000 	.word	0x3ff00000
 8007e10:	4a454eef 	.word	0x4a454eef
 8007e14:	3fca7e28 	.word	0x3fca7e28
 8007e18:	93c9db65 	.word	0x93c9db65
 8007e1c:	3fcd864a 	.word	0x3fcd864a
 8007e20:	a91d4101 	.word	0xa91d4101
 8007e24:	3fd17460 	.word	0x3fd17460
 8007e28:	518f264d 	.word	0x518f264d
 8007e2c:	3fd55555 	.word	0x3fd55555
 8007e30:	db6fabff 	.word	0xdb6fabff
 8007e34:	3fdb6db6 	.word	0x3fdb6db6
 8007e38:	33333303 	.word	0x33333303
 8007e3c:	3fe33333 	.word	0x3fe33333
 8007e40:	e0000000 	.word	0xe0000000
 8007e44:	3feec709 	.word	0x3feec709
 8007e48:	dc3a03fd 	.word	0xdc3a03fd
 8007e4c:	3feec709 	.word	0x3feec709
 8007e50:	145b01f5 	.word	0x145b01f5
 8007e54:	be3e2fe0 	.word	0xbe3e2fe0
 8007e58:	7ff00000 	.word	0x7ff00000
 8007e5c:	43400000 	.word	0x43400000
 8007e60:	0003988e 	.word	0x0003988e
 8007e64:	000bb679 	.word	0x000bb679
 8007e68:	3ff00000 	.word	0x3ff00000
 8007e6c:	40080000 	.word	0x40080000
 8007e70:	f7f8 f9e2 	bl	8000238 <__aeabi_dsub>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4640      	mov	r0, r8
 8007e7a:	4649      	mov	r1, r9
 8007e7c:	f7f8 f9dc 	bl	8000238 <__aeabi_dsub>
 8007e80:	2300      	movs	r3, #0
 8007e82:	e9cd 4500 	strd	r4, r5, [sp]
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	e9dd 8900 	ldrd	r8, r9, [sp]
 8007e8c:	4682      	mov	sl, r0
 8007e8e:	4642      	mov	r2, r8
 8007e90:	468b      	mov	fp, r1
 8007e92:	4620      	mov	r0, r4
 8007e94:	4629      	mov	r1, r5
 8007e96:	464b      	mov	r3, r9
 8007e98:	f7f8 f9ce 	bl	8000238 <__aeabi_dsub>
 8007e9c:	4632      	mov	r2, r6
 8007e9e:	463b      	mov	r3, r7
 8007ea0:	f7f8 fb82 	bl	80005a8 <__aeabi_dmul>
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	462b      	mov	r3, r5
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	460d      	mov	r5, r1
 8007eac:	4650      	mov	r0, sl
 8007eae:	4659      	mov	r1, fp
 8007eb0:	f7f8 fb7a 	bl	80005a8 <__aeabi_dmul>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4620      	mov	r0, r4
 8007eba:	4629      	mov	r1, r5
 8007ebc:	f7f8 f9be 	bl	800023c <__adddf3>
 8007ec0:	4642      	mov	r2, r8
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	460d      	mov	r5, r1
 8007ec6:	464b      	mov	r3, r9
 8007ec8:	4630      	mov	r0, r6
 8007eca:	4639      	mov	r1, r7
 8007ecc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007ed0:	f7f8 fb6a 	bl	80005a8 <__aeabi_dmul>
 8007ed4:	4606      	mov	r6, r0
 8007ed6:	460f      	mov	r7, r1
 8007ed8:	4620      	mov	r0, r4
 8007eda:	4629      	mov	r1, r5
 8007edc:	463b      	mov	r3, r7
 8007ede:	4632      	mov	r2, r6
 8007ee0:	f7f8 f9ac 	bl	800023c <__adddf3>
 8007ee4:	4bc6      	ldr	r3, [pc, #792]	@ (8008200 <__ieee754_pow+0x978>)
 8007ee6:	4299      	cmp	r1, r3
 8007ee8:	4604      	mov	r4, r0
 8007eea:	460d      	mov	r5, r1
 8007eec:	4688      	mov	r8, r1
 8007eee:	f340 8123 	ble.w	8008138 <__ieee754_pow+0x8b0>
 8007ef2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007ef6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007efa:	4303      	orrs	r3, r0
 8007efc:	f040 8244 	bne.w	8008388 <__ieee754_pow+0xb00>
 8007f00:	a3a7      	add	r3, pc, #668	@ (adr r3, 80081a0 <__ieee754_pow+0x918>)
 8007f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f0a:	f7f8 f997 	bl	800023c <__adddf3>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4620      	mov	r0, r4
 8007f14:	4629      	mov	r1, r5
 8007f16:	4614      	mov	r4, r2
 8007f18:	461d      	mov	r5, r3
 8007f1a:	4632      	mov	r2, r6
 8007f1c:	463b      	mov	r3, r7
 8007f1e:	f7f8 f98b 	bl	8000238 <__aeabi_dsub>
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	4620      	mov	r0, r4
 8007f28:	4629      	mov	r1, r5
 8007f2a:	f7f8 fdcd 	bl	8000ac8 <__aeabi_dcmpgt>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	f040 822a 	bne.w	8008388 <__ieee754_pow+0xb00>
 8007f34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f38:	4443      	add	r3, r8
 8007f3a:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007f3e:	4cb1      	ldr	r4, [pc, #708]	@ (8008204 <__ieee754_pow+0x97c>)
 8007f40:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007f44:	4114      	asrs	r4, r2
 8007f46:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007f4a:	f1c2 0214 	rsb	r2, r2, #20
 8007f4e:	2000      	movs	r0, #0
 8007f50:	ea04 0103 	and.w	r1, r4, r3
 8007f54:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007f58:	fa4a fa02 	asr.w	sl, sl, r2
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4602      	mov	r2, r0
 8007f60:	f1b8 0f00 	cmp.w	r8, #0
 8007f64:	4630      	mov	r0, r6
 8007f66:	4639      	mov	r1, r7
 8007f68:	bfb8      	it	lt
 8007f6a:	f1ca 0a00 	rsblt	sl, sl, #0
 8007f6e:	f7f8 f963 	bl	8000238 <__aeabi_dsub>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4606      	mov	r6, r0
 8007f78:	460f      	mov	r7, r1
 8007f7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f7e:	f7f8 f95d 	bl	800023c <__adddf3>
 8007f82:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 8007f86:	460d      	mov	r5, r1
 8007f88:	2400      	movs	r4, #0
 8007f8a:	a387      	add	r3, pc, #540	@ (adr r3, 80081a8 <__ieee754_pow+0x920>)
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	4620      	mov	r0, r4
 8007f92:	4629      	mov	r1, r5
 8007f94:	f7f8 fb08 	bl	80005a8 <__aeabi_dmul>
 8007f98:	4632      	mov	r2, r6
 8007f9a:	4680      	mov	r8, r0
 8007f9c:	4689      	mov	r9, r1
 8007f9e:	463b      	mov	r3, r7
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	4629      	mov	r1, r5
 8007fa4:	f7f8 f948 	bl	8000238 <__aeabi_dsub>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fb0:	f7f8 f942 	bl	8000238 <__aeabi_dsub>
 8007fb4:	a37e      	add	r3, pc, #504	@ (adr r3, 80081b0 <__ieee754_pow+0x928>)
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	f7f8 faf5 	bl	80005a8 <__aeabi_dmul>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	4614      	mov	r4, r2
 8007fc8:	461d      	mov	r5, r3
 8007fca:	a37b      	add	r3, pc, #492	@ (adr r3, 80081b8 <__ieee754_pow+0x930>)
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f7f8 faea 	bl	80005a8 <__aeabi_dmul>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	4620      	mov	r0, r4
 8007fda:	4629      	mov	r1, r5
 8007fdc:	f7f8 f92e 	bl	800023c <__adddf3>
 8007fe0:	4606      	mov	r6, r0
 8007fe2:	460f      	mov	r7, r1
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	463b      	mov	r3, r7
 8007fe8:	4640      	mov	r0, r8
 8007fea:	4649      	mov	r1, r9
 8007fec:	f7f8 f926 	bl	800023c <__adddf3>
 8007ff0:	4642      	mov	r2, r8
 8007ff2:	464b      	mov	r3, r9
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	460d      	mov	r5, r1
 8007ff8:	f7f8 f91e 	bl	8000238 <__aeabi_dsub>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4630      	mov	r0, r6
 8008002:	4639      	mov	r1, r7
 8008004:	f7f8 f918 	bl	8000238 <__aeabi_dsub>
 8008008:	4622      	mov	r2, r4
 800800a:	4680      	mov	r8, r0
 800800c:	4689      	mov	r9, r1
 800800e:	462b      	mov	r3, r5
 8008010:	4620      	mov	r0, r4
 8008012:	4629      	mov	r1, r5
 8008014:	f7f8 fac8 	bl	80005a8 <__aeabi_dmul>
 8008018:	a369      	add	r3, pc, #420	@ (adr r3, 80081c0 <__ieee754_pow+0x938>)
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	4606      	mov	r6, r0
 8008020:	460f      	mov	r7, r1
 8008022:	f7f8 fac1 	bl	80005a8 <__aeabi_dmul>
 8008026:	a368      	add	r3, pc, #416	@ (adr r3, 80081c8 <__ieee754_pow+0x940>)
 8008028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802c:	f7f8 f904 	bl	8000238 <__aeabi_dsub>
 8008030:	4632      	mov	r2, r6
 8008032:	463b      	mov	r3, r7
 8008034:	f7f8 fab8 	bl	80005a8 <__aeabi_dmul>
 8008038:	a365      	add	r3, pc, #404	@ (adr r3, 80081d0 <__ieee754_pow+0x948>)
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	f7f8 f8fd 	bl	800023c <__adddf3>
 8008042:	4632      	mov	r2, r6
 8008044:	463b      	mov	r3, r7
 8008046:	f7f8 faaf 	bl	80005a8 <__aeabi_dmul>
 800804a:	a363      	add	r3, pc, #396	@ (adr r3, 80081d8 <__ieee754_pow+0x950>)
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	f7f8 f8f2 	bl	8000238 <__aeabi_dsub>
 8008054:	4632      	mov	r2, r6
 8008056:	463b      	mov	r3, r7
 8008058:	f7f8 faa6 	bl	80005a8 <__aeabi_dmul>
 800805c:	a360      	add	r3, pc, #384	@ (adr r3, 80081e0 <__ieee754_pow+0x958>)
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	f7f8 f8eb 	bl	800023c <__adddf3>
 8008066:	4632      	mov	r2, r6
 8008068:	463b      	mov	r3, r7
 800806a:	f7f8 fa9d 	bl	80005a8 <__aeabi_dmul>
 800806e:	4602      	mov	r2, r0
 8008070:	460b      	mov	r3, r1
 8008072:	4620      	mov	r0, r4
 8008074:	4629      	mov	r1, r5
 8008076:	f7f8 f8df 	bl	8000238 <__aeabi_dsub>
 800807a:	4606      	mov	r6, r0
 800807c:	460f      	mov	r7, r1
 800807e:	4632      	mov	r2, r6
 8008080:	463b      	mov	r3, r7
 8008082:	4620      	mov	r0, r4
 8008084:	4629      	mov	r1, r5
 8008086:	f7f8 fa8f 	bl	80005a8 <__aeabi_dmul>
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	4630      	mov	r0, r6
 8008090:	4639      	mov	r1, r7
 8008092:	4616      	mov	r6, r2
 8008094:	461f      	mov	r7, r3
 8008096:	2200      	movs	r2, #0
 8008098:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800809c:	f7f8 f8cc 	bl	8000238 <__aeabi_dsub>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4630      	mov	r0, r6
 80080a6:	4639      	mov	r1, r7
 80080a8:	f7f8 fba8 	bl	80007fc <__aeabi_ddiv>
 80080ac:	4642      	mov	r2, r8
 80080ae:	4606      	mov	r6, r0
 80080b0:	460f      	mov	r7, r1
 80080b2:	464b      	mov	r3, r9
 80080b4:	4620      	mov	r0, r4
 80080b6:	4629      	mov	r1, r5
 80080b8:	f7f8 fa76 	bl	80005a8 <__aeabi_dmul>
 80080bc:	4642      	mov	r2, r8
 80080be:	464b      	mov	r3, r9
 80080c0:	f7f8 f8bc 	bl	800023c <__adddf3>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4630      	mov	r0, r6
 80080ca:	4639      	mov	r1, r7
 80080cc:	f7f8 f8b4 	bl	8000238 <__aeabi_dsub>
 80080d0:	4622      	mov	r2, r4
 80080d2:	462b      	mov	r3, r5
 80080d4:	f7f8 f8b0 	bl	8000238 <__aeabi_dsub>
 80080d8:	460b      	mov	r3, r1
 80080da:	4602      	mov	r2, r0
 80080dc:	494a      	ldr	r1, [pc, #296]	@ (8008208 <__ieee754_pow+0x980>)
 80080de:	2000      	movs	r0, #0
 80080e0:	f7f8 f8aa 	bl	8000238 <__aeabi_dsub>
 80080e4:	460b      	mov	r3, r1
 80080e6:	445b      	add	r3, fp
 80080e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080ec:	f2c0 8156 	blt.w	800839c <__ieee754_pow+0xb14>
 80080f0:	4619      	mov	r1, r3
 80080f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080f6:	f7f8 fa57 	bl	80005a8 <__aeabi_dmul>
 80080fa:	ec41 0b10 	vmov	d0, r0, r1
 80080fe:	f7ff bbdf 	b.w	80078c0 <__ieee754_pow+0x38>
 8008102:	ed9f 7b39 	vldr	d7, [pc, #228]	@ 80081e8 <__ieee754_pow+0x960>
 8008106:	ed8d 7b06 	vstr	d7, [sp, #24]
 800810a:	e455      	b.n	80079b8 <__ieee754_pow+0x130>
 800810c:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008110:	f43f ac71 	beq.w	80079f6 <__ieee754_pow+0x16e>
 8008114:	f8df c0f8 	ldr.w	ip, [pc, #248]	@ 8008210 <__ieee754_pow+0x988>
 8008118:	45e1      	cmp	r9, ip
 800811a:	f47f ac2f 	bne.w	800797c <__ieee754_pow+0xf4>
 800811e:	ec47 6b10 	vmov	d0, r6, r7
 8008122:	b013      	add	sp, #76	@ 0x4c
 8008124:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008128:	f000 ba76 	b.w	8008618 <__ieee754_sqrt>
 800812c:	2a00      	cmp	r2, #0
 800812e:	f000 814f 	beq.w	80083d0 <__ieee754_pow+0xb48>
 8008132:	f04f 0b02 	mov.w	fp, #2
 8008136:	e4a2      	b.n	8007a7e <__ieee754_pow+0x1f6>
 8008138:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 8008214 <__ieee754_pow+0x98c>
 800813c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008140:	4563      	cmp	r3, ip
 8008142:	f240 80e7 	bls.w	8008314 <__ieee754_pow+0xa8c>
 8008146:	4b31      	ldr	r3, [pc, #196]	@ (800820c <__ieee754_pow+0x984>)
 8008148:	440b      	add	r3, r1
 800814a:	4303      	orrs	r3, r0
 800814c:	d10a      	bne.n	8008164 <__ieee754_pow+0x8dc>
 800814e:	4632      	mov	r2, r6
 8008150:	463b      	mov	r3, r7
 8008152:	f7f8 f871 	bl	8000238 <__aeabi_dsub>
 8008156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800815a:	f7f8 fcab 	bl	8000ab4 <__aeabi_dcmpge>
 800815e:	2800      	cmp	r0, #0
 8008160:	f43f aee8 	beq.w	8007f34 <__ieee754_pow+0x6ac>
 8008164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008168:	2200      	movs	r2, #0
 800816a:	2300      	movs	r3, #0
 800816c:	f7f8 fc8e 	bl	8000a8c <__aeabi_dcmplt>
 8008170:	3800      	subs	r0, #0
 8008172:	bf18      	it	ne
 8008174:	2001      	movne	r0, #1
 8008176:	e430      	b.n	80079da <__ieee754_pow+0x152>
 8008178:	2c00      	cmp	r4, #0
 800817a:	f47f ab99 	bne.w	80078b0 <__ieee754_pow+0x28>
 800817e:	e498      	b.n	8007ab2 <__ieee754_pow+0x22a>
 8008180:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 80081f0 <__ieee754_pow+0x968>
 8008184:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008188:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 80081f8 <__ieee754_pow+0x970>
 800818c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008190:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008194:	2700      	movs	r7, #0
 8008196:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 800819a:	e4dd      	b.n	8007b58 <__ieee754_pow+0x2d0>
 800819c:	f3af 8000 	nop.w
 80081a0:	652b82fe 	.word	0x652b82fe
 80081a4:	3c971547 	.word	0x3c971547
 80081a8:	00000000 	.word	0x00000000
 80081ac:	3fe62e43 	.word	0x3fe62e43
 80081b0:	fefa39ef 	.word	0xfefa39ef
 80081b4:	3fe62e42 	.word	0x3fe62e42
 80081b8:	0ca86c39 	.word	0x0ca86c39
 80081bc:	be205c61 	.word	0xbe205c61
 80081c0:	72bea4d0 	.word	0x72bea4d0
 80081c4:	3e663769 	.word	0x3e663769
 80081c8:	c5d26bf1 	.word	0xc5d26bf1
 80081cc:	3ebbbd41 	.word	0x3ebbbd41
 80081d0:	af25de2c 	.word	0xaf25de2c
 80081d4:	3f11566a 	.word	0x3f11566a
 80081d8:	16bebd93 	.word	0x16bebd93
 80081dc:	3f66c16c 	.word	0x3f66c16c
 80081e0:	5555553e 	.word	0x5555553e
 80081e4:	3fc55555 	.word	0x3fc55555
 80081e8:	00000000 	.word	0x00000000
 80081ec:	bff00000 	.word	0xbff00000
	...
 80081fc:	3ff00000 	.word	0x3ff00000
 8008200:	408fffff 	.word	0x408fffff
 8008204:	fff00000 	.word	0xfff00000
 8008208:	3ff00000 	.word	0x3ff00000
 800820c:	3f6f3400 	.word	0x3f6f3400
 8008210:	3fe00000 	.word	0x3fe00000
 8008214:	4090cbff 	.word	0x4090cbff
 8008218:	459a      	cmp	sl, r3
 800821a:	f0c0 80c7 	bcc.w	80083ac <__ieee754_pow+0xb24>
 800821e:	4b92      	ldr	r3, [pc, #584]	@ (8008468 <__ieee754_pow+0xbe0>)
 8008220:	459a      	cmp	sl, r3
 8008222:	f04f 0200 	mov.w	r2, #0
 8008226:	f200 80db 	bhi.w	80083e0 <__ieee754_pow+0xb58>
 800822a:	ec51 0b10 	vmov	r0, r1, d0
 800822e:	4b8e      	ldr	r3, [pc, #568]	@ (8008468 <__ieee754_pow+0xbe0>)
 8008230:	f7f8 f802 	bl	8000238 <__aeabi_dsub>
 8008234:	a37c      	add	r3, pc, #496	@ (adr r3, 8008428 <__ieee754_pow+0xba0>)
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	4606      	mov	r6, r0
 800823c:	460f      	mov	r7, r1
 800823e:	f7f8 f9b3 	bl	80005a8 <__aeabi_dmul>
 8008242:	a37b      	add	r3, pc, #492	@ (adr r3, 8008430 <__ieee754_pow+0xba8>)
 8008244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008248:	4682      	mov	sl, r0
 800824a:	468b      	mov	fp, r1
 800824c:	4630      	mov	r0, r6
 800824e:	4639      	mov	r1, r7
 8008250:	f7f8 f9aa 	bl	80005a8 <__aeabi_dmul>
 8008254:	4b85      	ldr	r3, [pc, #532]	@ (800846c <__ieee754_pow+0xbe4>)
 8008256:	e9cd 0100 	strd	r0, r1, [sp]
 800825a:	2200      	movs	r2, #0
 800825c:	4630      	mov	r0, r6
 800825e:	4639      	mov	r1, r7
 8008260:	f7f8 f9a2 	bl	80005a8 <__aeabi_dmul>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	a173      	add	r1, pc, #460	@ (adr r1, 8008438 <__ieee754_pow+0xbb0>)
 800826a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800826e:	f7f7 ffe3 	bl	8000238 <__aeabi_dsub>
 8008272:	4632      	mov	r2, r6
 8008274:	463b      	mov	r3, r7
 8008276:	f7f8 f997 	bl	80005a8 <__aeabi_dmul>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	2000      	movs	r0, #0
 8008280:	497b      	ldr	r1, [pc, #492]	@ (8008470 <__ieee754_pow+0xbe8>)
 8008282:	f7f7 ffd9 	bl	8000238 <__aeabi_dsub>
 8008286:	4632      	mov	r2, r6
 8008288:	4680      	mov	r8, r0
 800828a:	4689      	mov	r9, r1
 800828c:	463b      	mov	r3, r7
 800828e:	4630      	mov	r0, r6
 8008290:	4639      	mov	r1, r7
 8008292:	f7f8 f989 	bl	80005a8 <__aeabi_dmul>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	4640      	mov	r0, r8
 800829c:	4649      	mov	r1, r9
 800829e:	f7f8 f983 	bl	80005a8 <__aeabi_dmul>
 80082a2:	a367      	add	r3, pc, #412	@ (adr r3, 8008440 <__ieee754_pow+0xbb8>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f8 f97e 	bl	80005a8 <__aeabi_dmul>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082b4:	f7f7 ffc0 	bl	8000238 <__aeabi_dsub>
 80082b8:	4680      	mov	r8, r0
 80082ba:	4689      	mov	r9, r1
 80082bc:	4642      	mov	r2, r8
 80082be:	464b      	mov	r3, r9
 80082c0:	4650      	mov	r0, sl
 80082c2:	4659      	mov	r1, fp
 80082c4:	f7f7 ffba 	bl	800023c <__adddf3>
 80082c8:	2600      	movs	r6, #0
 80082ca:	4652      	mov	r2, sl
 80082cc:	465b      	mov	r3, fp
 80082ce:	460f      	mov	r7, r1
 80082d0:	4630      	mov	r0, r6
 80082d2:	e5cd      	b.n	8007e70 <__ieee754_pow+0x5e8>
 80082d4:	f1b9 0f00 	cmp.w	r9, #0
 80082d8:	ed9f 0b5b 	vldr	d0, [pc, #364]	@ 8008448 <__ieee754_pow+0xbc0>
 80082dc:	f6bf aaf0 	bge.w	80078c0 <__ieee754_pow+0x38>
 80082e0:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 80082e4:	ee00 4a10 	vmov	s0, r4
 80082e8:	ee00 3a90 	vmov	s1, r3
 80082ec:	f7ff bae8 	b.w	80078c0 <__ieee754_pow+0x38>
 80082f0:	2a00      	cmp	r2, #0
 80082f2:	f47f ab89 	bne.w	8007a08 <__ieee754_pow+0x180>
 80082f6:	f1cc 0c14 	rsb	ip, ip, #20
 80082fa:	fa43 fe0c 	asr.w	lr, r3, ip
 80082fe:	fa0e fc0c 	lsl.w	ip, lr, ip
 8008302:	459c      	cmp	ip, r3
 8008304:	d079      	beq.n	80083fa <__ieee754_pow+0xb72>
 8008306:	f8df c160 	ldr.w	ip, [pc, #352]	@ 8008468 <__ieee754_pow+0xbe0>
 800830a:	4563      	cmp	r3, ip
 800830c:	f43f ab09 	beq.w	8007922 <__ieee754_pow+0x9a>
 8008310:	f7ff bb31 	b.w	8007976 <__ieee754_pow+0xee>
 8008314:	4a56      	ldr	r2, [pc, #344]	@ (8008470 <__ieee754_pow+0xbe8>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d87d      	bhi.n	8008416 <__ieee754_pow+0xb8e>
 800831a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800831e:	4693      	mov	fp, r2
 8008320:	4692      	mov	sl, r2
 8008322:	e631      	b.n	8007f88 <__ieee754_pow+0x700>
 8008324:	4950      	ldr	r1, [pc, #320]	@ (8008468 <__ieee754_pow+0xbe0>)
 8008326:	2000      	movs	r0, #0
 8008328:	4632      	mov	r2, r6
 800832a:	463b      	mov	r3, r7
 800832c:	f7f8 fa66 	bl	80007fc <__aeabi_ddiv>
 8008330:	ec41 0b10 	vmov	d0, r0, r1
 8008334:	f7ff bac4 	b.w	80078c0 <__ieee754_pow+0x38>
 8008338:	f1bb 0f01 	cmp.w	fp, #1
 800833c:	f47f aac0 	bne.w	80078c0 <__ieee754_pow+0x38>
 8008340:	ee10 1a90 	vmov	r1, s1
 8008344:	ee10 2a10 	vmov	r2, s0
 8008348:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800834c:	ec43 2b10 	vmov	d0, r2, r3
 8008350:	f7ff bab6 	b.w	80078c0 <__ieee754_pow+0x38>
 8008354:	f1b9 0f00 	cmp.w	r9, #0
 8008358:	f77f ab3e 	ble.w	80079d8 <__ieee754_pow+0x150>
 800835c:	2000      	movs	r0, #0
 800835e:	b013      	add	sp, #76	@ 0x4c
 8008360:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	f000 b950 	b.w	8008608 <__math_oflow>
 8008368:	ed9f 7b39 	vldr	d7, [pc, #228]	@ 8008450 <__ieee754_pow+0xbc8>
 800836c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008370:	ed9f 7b39 	vldr	d7, [pc, #228]	@ 8008458 <__ieee754_pow+0xbd0>
 8008374:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8008378:	ed9f 7b39 	vldr	d7, [pc, #228]	@ 8008460 <__ieee754_pow+0xbd8>
 800837c:	f44f 2780 	mov.w	r7, #262144	@ 0x40000
 8008380:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008384:	f7ff bbe8 	b.w	8007b58 <__ieee754_pow+0x2d0>
 8008388:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800838c:	2200      	movs	r2, #0
 800838e:	2300      	movs	r3, #0
 8008390:	f7f8 fb7c 	bl	8000a8c <__aeabi_dcmplt>
 8008394:	3800      	subs	r0, #0
 8008396:	bf18      	it	ne
 8008398:	2001      	movne	r0, #1
 800839a:	e7e0      	b.n	800835e <__ieee754_pow+0xad6>
 800839c:	ec41 0b10 	vmov	d0, r0, r1
 80083a0:	4650      	mov	r0, sl
 80083a2:	f000 f871 	bl	8008488 <scalbn>
 80083a6:	ec51 0b10 	vmov	r0, r1, d0
 80083aa:	e6a2      	b.n	80080f2 <__ieee754_pow+0x86a>
 80083ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083b0:	2200      	movs	r2, #0
 80083b2:	2300      	movs	r3, #0
 80083b4:	f7f8 fb6a 	bl	8000a8c <__aeabi_dcmplt>
 80083b8:	3800      	subs	r0, #0
 80083ba:	bf18      	it	ne
 80083bc:	2001      	movne	r0, #1
 80083be:	f1b9 0f00 	cmp.w	r9, #0
 80083c2:	f6bf ab0a 	bge.w	80079da <__ieee754_pow+0x152>
 80083c6:	e7ca      	b.n	800835e <__ieee754_pow+0xad6>
 80083c8:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8008448 <__ieee754_pow+0xbc0>
 80083cc:	f7ff ba78 	b.w	80078c0 <__ieee754_pow+0x38>
 80083d0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80083d4:	f43f ab0f 	beq.w	80079f6 <__ieee754_pow+0x16e>
 80083d8:	f04f 0b02 	mov.w	fp, #2
 80083dc:	f7ff bacf 	b.w	800797e <__ieee754_pow+0xf6>
 80083e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083e4:	2300      	movs	r3, #0
 80083e6:	f7f8 fb51 	bl	8000a8c <__aeabi_dcmplt>
 80083ea:	3800      	subs	r0, #0
 80083ec:	bf18      	it	ne
 80083ee:	2001      	movne	r0, #1
 80083f0:	f1b9 0f00 	cmp.w	r9, #0
 80083f4:	dcb3      	bgt.n	800835e <__ieee754_pow+0xad6>
 80083f6:	f7ff baf0 	b.w	80079da <__ieee754_pow+0x152>
 80083fa:	4a1b      	ldr	r2, [pc, #108]	@ (8008468 <__ieee754_pow+0xbe0>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	f43f aa90 	beq.w	8007922 <__ieee754_pow+0x9a>
 8008402:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008406:	f43f aaf6 	beq.w	80079f6 <__ieee754_pow+0x16e>
 800840a:	f00e 0e01 	and.w	lr, lr, #1
 800840e:	f1ce 0b02 	rsb	fp, lr, #2
 8008412:	f7ff bab4 	b.w	800797e <__ieee754_pow+0xf6>
 8008416:	151b      	asrs	r3, r3, #20
 8008418:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800841c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008420:	fa42 f303 	asr.w	r3, r2, r3
 8008424:	e588      	b.n	8007f38 <__ieee754_pow+0x6b0>
 8008426:	bf00      	nop
 8008428:	60000000 	.word	0x60000000
 800842c:	3ff71547 	.word	0x3ff71547
 8008430:	f85ddf44 	.word	0xf85ddf44
 8008434:	3e54ae0b 	.word	0x3e54ae0b
 8008438:	55555555 	.word	0x55555555
 800843c:	3fd55555 	.word	0x3fd55555
 8008440:	652b82fe 	.word	0x652b82fe
 8008444:	3ff71547 	.word	0x3ff71547
	...
 8008450:	40000000 	.word	0x40000000
 8008454:	3fe2b803 	.word	0x3fe2b803
 8008458:	43cfd006 	.word	0x43cfd006
 800845c:	3e4cfdeb 	.word	0x3e4cfdeb
 8008460:	00000000 	.word	0x00000000
 8008464:	3ff80000 	.word	0x3ff80000
 8008468:	3ff00000 	.word	0x3ff00000
 800846c:	3fd00000 	.word	0x3fd00000
 8008470:	3fe00000 	.word	0x3fe00000

08008474 <fabs>:
 8008474:	ec51 0b10 	vmov	r0, r1, d0
 8008478:	4602      	mov	r2, r0
 800847a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800847e:	ec43 2b10 	vmov	d0, r2, r3
 8008482:	4770      	bx	lr
 8008484:	0000      	movs	r0, r0
	...

08008488 <scalbn>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	ec53 2b10 	vmov	r2, r3, d0
 800848e:	4604      	mov	r4, r0
 8008490:	f3c3 500a 	ubfx	r0, r3, #20, #11
 8008494:	4619      	mov	r1, r3
 8008496:	bb78      	cbnz	r0, 80084f8 <scalbn+0x70>
 8008498:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800849c:	4311      	orrs	r1, r2
 800849e:	4610      	mov	r0, r2
 80084a0:	d029      	beq.n	80084f6 <scalbn+0x6e>
 80084a2:	4619      	mov	r1, r3
 80084a4:	2200      	movs	r2, #0
 80084a6:	4b3a      	ldr	r3, [pc, #232]	@ (8008590 <scalbn+0x108>)
 80084a8:	4d3a      	ldr	r5, [pc, #232]	@ (8008594 <scalbn+0x10c>)
 80084aa:	f7f8 f87d 	bl	80005a8 <__aeabi_dmul>
 80084ae:	42ac      	cmp	r4, r5
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	db53      	blt.n	800855e <scalbn+0xd6>
 80084b6:	f3c1 500a 	ubfx	r0, r1, #20, #11
 80084ba:	3836      	subs	r0, #54	@ 0x36
 80084bc:	f24c 3c50 	movw	ip, #50000	@ 0xc350
 80084c0:	4564      	cmp	r4, ip
 80084c2:	dc23      	bgt.n	800850c <scalbn+0x84>
 80084c4:	4404      	add	r4, r0
 80084c6:	f240 70fe 	movw	r0, #2046	@ 0x7fe
 80084ca:	4284      	cmp	r4, r0
 80084cc:	dc1e      	bgt.n	800850c <scalbn+0x84>
 80084ce:	2c00      	cmp	r4, #0
 80084d0:	dc34      	bgt.n	800853c <scalbn+0xb4>
 80084d2:	f114 0f35 	cmn.w	r4, #53	@ 0x35
 80084d6:	db3a      	blt.n	800854e <scalbn+0xc6>
 80084d8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 80084dc:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 80084e0:	3436      	adds	r4, #54	@ 0x36
 80084e2:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80084e6:	4610      	mov	r0, r2
 80084e8:	4619      	mov	r1, r3
 80084ea:	2200      	movs	r2, #0
 80084ec:	4b2a      	ldr	r3, [pc, #168]	@ (8008598 <scalbn+0x110>)
 80084ee:	f7f8 f85b 	bl	80005a8 <__aeabi_dmul>
 80084f2:	ec41 0b10 	vmov	d0, r0, r1
 80084f6:	bd38      	pop	{r3, r4, r5, pc}
 80084f8:	f240 7cff 	movw	ip, #2047	@ 0x7ff
 80084fc:	4560      	cmp	r0, ip
 80084fe:	d1dd      	bne.n	80084bc <scalbn+0x34>
 8008500:	4610      	mov	r0, r2
 8008502:	f7f7 fe9b 	bl	800023c <__adddf3>
 8008506:	ec41 0b10 	vmov	d0, r0, r1
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	2b00      	cmp	r3, #0
 800850e:	a118      	add	r1, pc, #96	@ (adr r1, 8008570 <scalbn+0xe8>)
 8008510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008514:	db07      	blt.n	8008526 <scalbn+0x9e>
 8008516:	a316      	add	r3, pc, #88	@ (adr r3, 8008570 <scalbn+0xe8>)
 8008518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851c:	f7f8 f844 	bl	80005a8 <__aeabi_dmul>
 8008520:	ec41 0b10 	vmov	d0, r0, r1
 8008524:	bd38      	pop	{r3, r4, r5, pc}
 8008526:	a114      	add	r1, pc, #80	@ (adr r1, 8008578 <scalbn+0xf0>)
 8008528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800852c:	a310      	add	r3, pc, #64	@ (adr r3, 8008570 <scalbn+0xe8>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	f7f8 f839 	bl	80005a8 <__aeabi_dmul>
 8008536:	ec41 0b10 	vmov	d0, r0, r1
 800853a:	e7f3      	b.n	8008524 <scalbn+0x9c>
 800853c:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 8008540:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 8008544:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8008548:	ec43 2b10 	vmov	d0, r2, r3
 800854c:	bd38      	pop	{r3, r4, r5, pc}
 800854e:	2b00      	cmp	r3, #0
 8008550:	a10b      	add	r1, pc, #44	@ (adr r1, 8008580 <scalbn+0xf8>)
 8008552:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008556:	da02      	bge.n	800855e <scalbn+0xd6>
 8008558:	a10b      	add	r1, pc, #44	@ (adr r1, 8008588 <scalbn+0x100>)
 800855a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800855e:	a308      	add	r3, pc, #32	@ (adr r3, 8008580 <scalbn+0xf8>)
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	f7f8 f820 	bl	80005a8 <__aeabi_dmul>
 8008568:	ec41 0b10 	vmov	d0, r0, r1
 800856c:	bd38      	pop	{r3, r4, r5, pc}
 800856e:	bf00      	nop
 8008570:	8800759c 	.word	0x8800759c
 8008574:	7e37e43c 	.word	0x7e37e43c
 8008578:	8800759c 	.word	0x8800759c
 800857c:	fe37e43c 	.word	0xfe37e43c
 8008580:	c2f8f359 	.word	0xc2f8f359
 8008584:	01a56e1f 	.word	0x01a56e1f
 8008588:	c2f8f359 	.word	0xc2f8f359
 800858c:	81a56e1f 	.word	0x81a56e1f
 8008590:	43500000 	.word	0x43500000
 8008594:	ffff3cb0 	.word	0xffff3cb0
 8008598:	3c900000 	.word	0x3c900000

0800859c <with_errno>:
 800859c:	b510      	push	{r4, lr}
 800859e:	ed2d 8b02 	vpush	{d8}
 80085a2:	eeb0 8a40 	vmov.f32	s16, s0
 80085a6:	eef0 8a60 	vmov.f32	s17, s1
 80085aa:	4604      	mov	r4, r0
 80085ac:	f000 fadc 	bl	8008b68 <__errno>
 80085b0:	eeb0 0a48 	vmov.f32	s0, s16
 80085b4:	eef0 0a68 	vmov.f32	s1, s17
 80085b8:	ecbd 8b02 	vpop	{d8}
 80085bc:	6004      	str	r4, [r0, #0]
 80085be:	bd10      	pop	{r4, pc}

080085c0 <xflow>:
 80085c0:	b500      	push	{lr}
 80085c2:	4603      	mov	r3, r0
 80085c4:	b083      	sub	sp, #12
 80085c6:	ec51 0b10 	vmov	r0, r1, d0
 80085ca:	b183      	cbz	r3, 80085ee <xflow+0x2e>
 80085cc:	4602      	mov	r2, r0
 80085ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80085d2:	e9cd 2300 	strd	r2, r3, [sp]
 80085d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085da:	f7f7 ffe5 	bl	80005a8 <__aeabi_dmul>
 80085de:	ec41 0b10 	vmov	d0, r0, r1
 80085e2:	2022      	movs	r0, #34	@ 0x22
 80085e4:	b003      	add	sp, #12
 80085e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80085ea:	f7ff bfd7 	b.w	800859c <with_errno>
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	e7ee      	b.n	80085d2 <xflow+0x12>
 80085f4:	0000      	movs	r0, r0
	...

080085f8 <__math_uflow>:
 80085f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008600 <__math_uflow+0x8>
 80085fc:	f7ff bfe0 	b.w	80085c0 <xflow>
 8008600:	00000000 	.word	0x00000000
 8008604:	10000000 	.word	0x10000000

08008608 <__math_oflow>:
 8008608:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008610 <__math_oflow+0x8>
 800860c:	f7ff bfd8 	b.w	80085c0 <xflow>
 8008610:	00000000 	.word	0x00000000
 8008614:	70000000 	.word	0x70000000

08008618 <__ieee754_sqrt>:
 8008618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	4878      	ldr	r0, [pc, #480]	@ (8008800 <__ieee754_sqrt+0x1e8>)
 800861e:	ec55 4b10 	vmov	r4, r5, d0
 8008622:	43a8      	bics	r0, r5
 8008624:	f000 80a8 	beq.w	8008778 <__ieee754_sqrt+0x160>
 8008628:	2d00      	cmp	r5, #0
 800862a:	4621      	mov	r1, r4
 800862c:	462b      	mov	r3, r5
 800862e:	4622      	mov	r2, r4
 8008630:	dd55      	ble.n	80086de <__ieee754_sqrt+0xc6>
 8008632:	152c      	asrs	r4, r5, #20
 8008634:	f000 80d2 	beq.w	80087dc <__ieee754_sqrt+0x1c4>
 8008638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800863c:	07e1      	lsls	r1, r4, #31
 800863e:	f2a4 37ff 	subw	r7, r4, #1023	@ 0x3ff
 8008642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008646:	d403      	bmi.n	8008650 <__ieee754_sqrt+0x38>
 8008648:	0fd1      	lsrs	r1, r2, #31
 800864a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800864e:	0052      	lsls	r2, r2, #1
 8008650:	005b      	lsls	r3, r3, #1
 8008652:	2600      	movs	r6, #0
 8008654:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008658:	107f      	asrs	r7, r7, #1
 800865a:	0052      	lsls	r2, r2, #1
 800865c:	2416      	movs	r4, #22
 800865e:	46b4      	mov	ip, r6
 8008660:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008664:	eb0c 0001 	add.w	r0, ip, r1
 8008668:	4298      	cmp	r0, r3
 800866a:	dc03      	bgt.n	8008674 <__ieee754_sqrt+0x5c>
 800866c:	1a1b      	subs	r3, r3, r0
 800866e:	eb01 0c00 	add.w	ip, r1, r0
 8008672:	440e      	add	r6, r1
 8008674:	005b      	lsls	r3, r3, #1
 8008676:	3c01      	subs	r4, #1
 8008678:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800867c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008680:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008684:	d1ee      	bne.n	8008664 <__ieee754_sqrt+0x4c>
 8008686:	46a0      	mov	r8, r4
 8008688:	2520      	movs	r5, #32
 800868a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800868e:	e00a      	b.n	80086a6 <__ieee754_sqrt+0x8e>
 8008690:	d03c      	beq.n	800870c <__ieee754_sqrt+0xf4>
 8008692:	0059      	lsls	r1, r3, #1
 8008694:	eb01 71d2 	add.w	r1, r1, r2, lsr #31
 8008698:	3d01      	subs	r5, #1
 800869a:	460b      	mov	r3, r1
 800869c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80086a0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80086a4:	d03e      	beq.n	8008724 <__ieee754_sqrt+0x10c>
 80086a6:	459c      	cmp	ip, r3
 80086a8:	eb08 0e00 	add.w	lr, r8, r0
 80086ac:	daf0      	bge.n	8008690 <__ieee754_sqrt+0x78>
 80086ae:	f1be 0f00 	cmp.w	lr, #0
 80086b2:	eb0e 0800 	add.w	r8, lr, r0
 80086b6:	db0c      	blt.n	80086d2 <__ieee754_sqrt+0xba>
 80086b8:	46e1      	mov	r9, ip
 80086ba:	eba3 010c 	sub.w	r1, r3, ip
 80086be:	4596      	cmp	lr, r2
 80086c0:	bf88      	it	hi
 80086c2:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80086c6:	0049      	lsls	r1, r1, #1
 80086c8:	46cc      	mov	ip, r9
 80086ca:	eba2 020e 	sub.w	r2, r2, lr
 80086ce:	4404      	add	r4, r0
 80086d0:	e7e0      	b.n	8008694 <__ieee754_sqrt+0x7c>
 80086d2:	f1b8 0f00 	cmp.w	r8, #0
 80086d6:	dbef      	blt.n	80086b8 <__ieee754_sqrt+0xa0>
 80086d8:	f10c 0901 	add.w	r9, ip, #1
 80086dc:	e7ed      	b.n	80086ba <__ieee754_sqrt+0xa2>
 80086de:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 80086e2:	4320      	orrs	r0, r4
 80086e4:	d042      	beq.n	800876c <__ieee754_sqrt+0x154>
 80086e6:	2d00      	cmp	r5, #0
 80086e8:	d16d      	bne.n	80087c6 <__ieee754_sqrt+0x1ae>
 80086ea:	0ad1      	lsrs	r1, r2, #11
 80086ec:	3b15      	subs	r3, #21
 80086ee:	0552      	lsls	r2, r2, #21
 80086f0:	2900      	cmp	r1, #0
 80086f2:	d0fa      	beq.n	80086ea <__ieee754_sqrt+0xd2>
 80086f4:	02ce      	lsls	r6, r1, #11
 80086f6:	461c      	mov	r4, r3
 80086f8:	4610      	mov	r0, r2
 80086fa:	460b      	mov	r3, r1
 80086fc:	d56f      	bpl.n	80087de <__ieee754_sqrt+0x1c6>
 80086fe:	2520      	movs	r5, #32
 8008700:	f04f 31ff 	mov.w	r1, #4294967295
 8008704:	40e8      	lsrs	r0, r5
 8008706:	1a64      	subs	r4, r4, r1
 8008708:	4303      	orrs	r3, r0
 800870a:	e795      	b.n	8008638 <__ieee754_sqrt+0x20>
 800870c:	4596      	cmp	lr, r2
 800870e:	d902      	bls.n	8008716 <__ieee754_sqrt+0xfe>
 8008710:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8008714:	e7be      	b.n	8008694 <__ieee754_sqrt+0x7c>
 8008716:	f1be 0f00 	cmp.w	lr, #0
 800871a:	eb0e 0800 	add.w	r8, lr, r0
 800871e:	db27      	blt.n	8008770 <__ieee754_sqrt+0x158>
 8008720:	2100      	movs	r1, #0
 8008722:	e7d2      	b.n	80086ca <__ieee754_sqrt+0xb2>
 8008724:	4311      	orrs	r1, r2
 8008726:	d012      	beq.n	800874e <__ieee754_sqrt+0x136>
 8008728:	f8df a0d8 	ldr.w	sl, [pc, #216]	@ 8008804 <__ieee754_sqrt+0x1ec>
 800872c:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8008808 <__ieee754_sqrt+0x1f0>
 8008730:	e9da 0100 	ldrd	r0, r1, [sl]
 8008734:	e9db 2300 	ldrd	r2, r3, [fp]
 8008738:	f7f7 fd7e 	bl	8000238 <__aeabi_dsub>
 800873c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	4640      	mov	r0, r8
 8008746:	4649      	mov	r1, r9
 8008748:	f7f8 f9aa 	bl	8000aa0 <__aeabi_dcmple>
 800874c:	bb10      	cbnz	r0, 8008794 <__ieee754_sqrt+0x17c>
 800874e:	0865      	lsrs	r5, r4, #1
 8008750:	1071      	asrs	r1, r6, #1
 8008752:	07f3      	lsls	r3, r6, #31
 8008754:	f101 517f 	add.w	r1, r1, #1069547520	@ 0x3fc00000
 8008758:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800875c:	bf48      	it	mi
 800875e:	f045 4500 	orrmi.w	r5, r5, #2147483648	@ 0x80000000
 8008762:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 8008766:	462a      	mov	r2, r5
 8008768:	ec43 2b10 	vmov	d0, r2, r3
 800876c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008770:	f1b8 0f00 	cmp.w	r8, #0
 8008774:	dab0      	bge.n	80086d8 <__ieee754_sqrt+0xc0>
 8008776:	e7d3      	b.n	8008720 <__ieee754_sqrt+0x108>
 8008778:	4622      	mov	r2, r4
 800877a:	462b      	mov	r3, r5
 800877c:	4620      	mov	r0, r4
 800877e:	4629      	mov	r1, r5
 8008780:	f7f7 ff12 	bl	80005a8 <__aeabi_dmul>
 8008784:	4622      	mov	r2, r4
 8008786:	462b      	mov	r3, r5
 8008788:	f7f7 fd58 	bl	800023c <__adddf3>
 800878c:	ec41 0b10 	vmov	d0, r0, r1
 8008790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008794:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008798:	e9da 0100 	ldrd	r0, r1, [sl]
 800879c:	e9db 2300 	ldrd	r2, r3, [fp]
 80087a0:	d029      	beq.n	80087f6 <__ieee754_sqrt+0x1de>
 80087a2:	f7f7 fd4b 	bl	800023c <__adddf3>
 80087a6:	e9da 8900 	ldrd	r8, r9, [sl]
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	4640      	mov	r0, r8
 80087b0:	4649      	mov	r1, r9
 80087b2:	f7f8 f96b 	bl	8000a8c <__aeabi_dcmplt>
 80087b6:	b300      	cbz	r0, 80087fa <__ieee754_sqrt+0x1e2>
 80087b8:	1ca2      	adds	r2, r4, #2
 80087ba:	f104 0502 	add.w	r5, r4, #2
 80087be:	bf08      	it	eq
 80087c0:	3601      	addeq	r6, #1
 80087c2:	086d      	lsrs	r5, r5, #1
 80087c4:	e7c4      	b.n	8008750 <__ieee754_sqrt+0x138>
 80087c6:	4620      	mov	r0, r4
 80087c8:	4629      	mov	r1, r5
 80087ca:	f7f7 fd35 	bl	8000238 <__aeabi_dsub>
 80087ce:	4602      	mov	r2, r0
 80087d0:	460b      	mov	r3, r1
 80087d2:	f7f8 f813 	bl	80007fc <__aeabi_ddiv>
 80087d6:	ec41 0b10 	vmov	d0, r0, r1
 80087da:	e7c7      	b.n	800876c <__ieee754_sqrt+0x154>
 80087dc:	4608      	mov	r0, r1
 80087de:	2200      	movs	r2, #0
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	02dd      	lsls	r5, r3, #11
 80087e4:	4611      	mov	r1, r2
 80087e6:	f102 0201 	add.w	r2, r2, #1
 80087ea:	d5f9      	bpl.n	80087e0 <__ieee754_sqrt+0x1c8>
 80087ec:	f1c2 0520 	rsb	r5, r2, #32
 80087f0:	fa00 f202 	lsl.w	r2, r0, r2
 80087f4:	e786      	b.n	8008704 <__ieee754_sqrt+0xec>
 80087f6:	3601      	adds	r6, #1
 80087f8:	e7aa      	b.n	8008750 <__ieee754_sqrt+0x138>
 80087fa:	3401      	adds	r4, #1
 80087fc:	e7a7      	b.n	800874e <__ieee754_sqrt+0x136>
 80087fe:	bf00      	nop
 8008800:	7ff00000 	.word	0x7ff00000
 8008804:	20000078 	.word	0x20000078
 8008808:	20000070 	.word	0x20000070

0800880c <_close>:
 800880c:	4b02      	ldr	r3, [pc, #8]	@ (8008818 <_close+0xc>)
 800880e:	2258      	movs	r2, #88	@ 0x58
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	f04f 30ff 	mov.w	r0, #4294967295
 8008816:	4770      	bx	lr
 8008818:	20004a00 	.word	0x20004a00

0800881c <_fstat>:
 800881c:	4b02      	ldr	r3, [pc, #8]	@ (8008828 <_fstat+0xc>)
 800881e:	2258      	movs	r2, #88	@ 0x58
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	f04f 30ff 	mov.w	r0, #4294967295
 8008826:	4770      	bx	lr
 8008828:	20004a00 	.word	0x20004a00

0800882c <_getpid>:
 800882c:	4b02      	ldr	r3, [pc, #8]	@ (8008838 <_getpid+0xc>)
 800882e:	2258      	movs	r2, #88	@ 0x58
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	f04f 30ff 	mov.w	r0, #4294967295
 8008836:	4770      	bx	lr
 8008838:	20004a00 	.word	0x20004a00

0800883c <_isatty>:
 800883c:	4b02      	ldr	r3, [pc, #8]	@ (8008848 <_isatty+0xc>)
 800883e:	2258      	movs	r2, #88	@ 0x58
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	2000      	movs	r0, #0
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	20004a00 	.word	0x20004a00

0800884c <_kill>:
 800884c:	4b02      	ldr	r3, [pc, #8]	@ (8008858 <_kill+0xc>)
 800884e:	2258      	movs	r2, #88	@ 0x58
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	f04f 30ff 	mov.w	r0, #4294967295
 8008856:	4770      	bx	lr
 8008858:	20004a00 	.word	0x20004a00

0800885c <_lseek>:
 800885c:	4b02      	ldr	r3, [pc, #8]	@ (8008868 <_lseek+0xc>)
 800885e:	2258      	movs	r2, #88	@ 0x58
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	f04f 30ff 	mov.w	r0, #4294967295
 8008866:	4770      	bx	lr
 8008868:	20004a00 	.word	0x20004a00

0800886c <_read>:
 800886c:	4b02      	ldr	r3, [pc, #8]	@ (8008878 <_read+0xc>)
 800886e:	2258      	movs	r2, #88	@ 0x58
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	f04f 30ff 	mov.w	r0, #4294967295
 8008876:	4770      	bx	lr
 8008878:	20004a00 	.word	0x20004a00

0800887c <_sbrk>:
 800887c:	4a04      	ldr	r2, [pc, #16]	@ (8008890 <_sbrk+0x14>)
 800887e:	4905      	ldr	r1, [pc, #20]	@ (8008894 <_sbrk+0x18>)
 8008880:	6813      	ldr	r3, [r2, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	bf08      	it	eq
 8008886:	460b      	moveq	r3, r1
 8008888:	4418      	add	r0, r3
 800888a:	6010      	str	r0, [r2, #0]
 800888c:	4618      	mov	r0, r3
 800888e:	4770      	bx	lr
 8008890:	20004a10 	.word	0x20004a10
 8008894:	20004a18 	.word	0x20004a18

08008898 <_write>:
 8008898:	4b02      	ldr	r3, [pc, #8]	@ (80088a4 <_write+0xc>)
 800889a:	2258      	movs	r2, #88	@ 0x58
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	f04f 30ff 	mov.w	r0, #4294967295
 80088a2:	4770      	bx	lr
 80088a4:	20004a00 	.word	0x20004a00

080088a8 <_exit>:
 80088a8:	e7fe      	b.n	80088a8 <_exit>
 80088aa:	bf00      	nop

080088ac <__udivmoddi4>:
 80088ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b0:	9d08      	ldr	r5, [sp, #32]
 80088b2:	460c      	mov	r4, r1
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d14e      	bne.n	8008956 <__udivmoddi4+0xaa>
 80088b8:	4694      	mov	ip, r2
 80088ba:	458c      	cmp	ip, r1
 80088bc:	4686      	mov	lr, r0
 80088be:	fab2 f282 	clz	r2, r2
 80088c2:	d962      	bls.n	800898a <__udivmoddi4+0xde>
 80088c4:	b14a      	cbz	r2, 80088da <__udivmoddi4+0x2e>
 80088c6:	f1c2 0320 	rsb	r3, r2, #32
 80088ca:	4091      	lsls	r1, r2
 80088cc:	fa20 f303 	lsr.w	r3, r0, r3
 80088d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80088d4:	4319      	orrs	r1, r3
 80088d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80088da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80088de:	fa1f f68c 	uxth.w	r6, ip
 80088e2:	fbb1 f4f7 	udiv	r4, r1, r7
 80088e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80088ea:	fb07 1114 	mls	r1, r7, r4, r1
 80088ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80088f2:	fb04 f106 	mul.w	r1, r4, r6
 80088f6:	4299      	cmp	r1, r3
 80088f8:	d90a      	bls.n	8008910 <__udivmoddi4+0x64>
 80088fa:	eb1c 0303 	adds.w	r3, ip, r3
 80088fe:	f104 30ff 	add.w	r0, r4, #4294967295
 8008902:	f080 8112 	bcs.w	8008b2a <__udivmoddi4+0x27e>
 8008906:	4299      	cmp	r1, r3
 8008908:	f240 810f 	bls.w	8008b2a <__udivmoddi4+0x27e>
 800890c:	3c02      	subs	r4, #2
 800890e:	4463      	add	r3, ip
 8008910:	1a59      	subs	r1, r3, r1
 8008912:	fa1f f38e 	uxth.w	r3, lr
 8008916:	fbb1 f0f7 	udiv	r0, r1, r7
 800891a:	fb07 1110 	mls	r1, r7, r0, r1
 800891e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008922:	fb00 f606 	mul.w	r6, r0, r6
 8008926:	429e      	cmp	r6, r3
 8008928:	d90a      	bls.n	8008940 <__udivmoddi4+0x94>
 800892a:	eb1c 0303 	adds.w	r3, ip, r3
 800892e:	f100 31ff 	add.w	r1, r0, #4294967295
 8008932:	f080 80fc 	bcs.w	8008b2e <__udivmoddi4+0x282>
 8008936:	429e      	cmp	r6, r3
 8008938:	f240 80f9 	bls.w	8008b2e <__udivmoddi4+0x282>
 800893c:	4463      	add	r3, ip
 800893e:	3802      	subs	r0, #2
 8008940:	1b9b      	subs	r3, r3, r6
 8008942:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8008946:	2100      	movs	r1, #0
 8008948:	b11d      	cbz	r5, 8008952 <__udivmoddi4+0xa6>
 800894a:	40d3      	lsrs	r3, r2
 800894c:	2200      	movs	r2, #0
 800894e:	e9c5 3200 	strd	r3, r2, [r5]
 8008952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008956:	428b      	cmp	r3, r1
 8008958:	d905      	bls.n	8008966 <__udivmoddi4+0xba>
 800895a:	b10d      	cbz	r5, 8008960 <__udivmoddi4+0xb4>
 800895c:	e9c5 0100 	strd	r0, r1, [r5]
 8008960:	2100      	movs	r1, #0
 8008962:	4608      	mov	r0, r1
 8008964:	e7f5      	b.n	8008952 <__udivmoddi4+0xa6>
 8008966:	fab3 f183 	clz	r1, r3
 800896a:	2900      	cmp	r1, #0
 800896c:	d146      	bne.n	80089fc <__udivmoddi4+0x150>
 800896e:	42a3      	cmp	r3, r4
 8008970:	d302      	bcc.n	8008978 <__udivmoddi4+0xcc>
 8008972:	4290      	cmp	r0, r2
 8008974:	f0c0 80f0 	bcc.w	8008b58 <__udivmoddi4+0x2ac>
 8008978:	1a86      	subs	r6, r0, r2
 800897a:	eb64 0303 	sbc.w	r3, r4, r3
 800897e:	2001      	movs	r0, #1
 8008980:	2d00      	cmp	r5, #0
 8008982:	d0e6      	beq.n	8008952 <__udivmoddi4+0xa6>
 8008984:	e9c5 6300 	strd	r6, r3, [r5]
 8008988:	e7e3      	b.n	8008952 <__udivmoddi4+0xa6>
 800898a:	2a00      	cmp	r2, #0
 800898c:	f040 8090 	bne.w	8008ab0 <__udivmoddi4+0x204>
 8008990:	eba1 040c 	sub.w	r4, r1, ip
 8008994:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008998:	fa1f f78c 	uxth.w	r7, ip
 800899c:	2101      	movs	r1, #1
 800899e:	fbb4 f6f8 	udiv	r6, r4, r8
 80089a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80089a6:	fb08 4416 	mls	r4, r8, r6, r4
 80089aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80089ae:	fb07 f006 	mul.w	r0, r7, r6
 80089b2:	4298      	cmp	r0, r3
 80089b4:	d908      	bls.n	80089c8 <__udivmoddi4+0x11c>
 80089b6:	eb1c 0303 	adds.w	r3, ip, r3
 80089ba:	f106 34ff 	add.w	r4, r6, #4294967295
 80089be:	d202      	bcs.n	80089c6 <__udivmoddi4+0x11a>
 80089c0:	4298      	cmp	r0, r3
 80089c2:	f200 80cd 	bhi.w	8008b60 <__udivmoddi4+0x2b4>
 80089c6:	4626      	mov	r6, r4
 80089c8:	1a1c      	subs	r4, r3, r0
 80089ca:	fa1f f38e 	uxth.w	r3, lr
 80089ce:	fbb4 f0f8 	udiv	r0, r4, r8
 80089d2:	fb08 4410 	mls	r4, r8, r0, r4
 80089d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80089da:	fb00 f707 	mul.w	r7, r0, r7
 80089de:	429f      	cmp	r7, r3
 80089e0:	d908      	bls.n	80089f4 <__udivmoddi4+0x148>
 80089e2:	eb1c 0303 	adds.w	r3, ip, r3
 80089e6:	f100 34ff 	add.w	r4, r0, #4294967295
 80089ea:	d202      	bcs.n	80089f2 <__udivmoddi4+0x146>
 80089ec:	429f      	cmp	r7, r3
 80089ee:	f200 80b0 	bhi.w	8008b52 <__udivmoddi4+0x2a6>
 80089f2:	4620      	mov	r0, r4
 80089f4:	1bdb      	subs	r3, r3, r7
 80089f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80089fa:	e7a5      	b.n	8008948 <__udivmoddi4+0x9c>
 80089fc:	f1c1 0620 	rsb	r6, r1, #32
 8008a00:	408b      	lsls	r3, r1
 8008a02:	fa22 f706 	lsr.w	r7, r2, r6
 8008a06:	431f      	orrs	r7, r3
 8008a08:	fa20 fc06 	lsr.w	ip, r0, r6
 8008a0c:	fa04 f301 	lsl.w	r3, r4, r1
 8008a10:	ea43 030c 	orr.w	r3, r3, ip
 8008a14:	40f4      	lsrs	r4, r6
 8008a16:	fa00 f801 	lsl.w	r8, r0, r1
 8008a1a:	0c38      	lsrs	r0, r7, #16
 8008a1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8008a20:	fbb4 fef0 	udiv	lr, r4, r0
 8008a24:	fa1f fc87 	uxth.w	ip, r7
 8008a28:	fb00 441e 	mls	r4, r0, lr, r4
 8008a2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008a30:	fb0e f90c 	mul.w	r9, lr, ip
 8008a34:	45a1      	cmp	r9, r4
 8008a36:	fa02 f201 	lsl.w	r2, r2, r1
 8008a3a:	d90a      	bls.n	8008a52 <__udivmoddi4+0x1a6>
 8008a3c:	193c      	adds	r4, r7, r4
 8008a3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8008a42:	f080 8084 	bcs.w	8008b4e <__udivmoddi4+0x2a2>
 8008a46:	45a1      	cmp	r9, r4
 8008a48:	f240 8081 	bls.w	8008b4e <__udivmoddi4+0x2a2>
 8008a4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8008a50:	443c      	add	r4, r7
 8008a52:	eba4 0409 	sub.w	r4, r4, r9
 8008a56:	fa1f f983 	uxth.w	r9, r3
 8008a5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8008a5e:	fb00 4413 	mls	r4, r0, r3, r4
 8008a62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8008a66:	fb03 fc0c 	mul.w	ip, r3, ip
 8008a6a:	45a4      	cmp	ip, r4
 8008a6c:	d907      	bls.n	8008a7e <__udivmoddi4+0x1d2>
 8008a6e:	193c      	adds	r4, r7, r4
 8008a70:	f103 30ff 	add.w	r0, r3, #4294967295
 8008a74:	d267      	bcs.n	8008b46 <__udivmoddi4+0x29a>
 8008a76:	45a4      	cmp	ip, r4
 8008a78:	d965      	bls.n	8008b46 <__udivmoddi4+0x29a>
 8008a7a:	3b02      	subs	r3, #2
 8008a7c:	443c      	add	r4, r7
 8008a7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8008a82:	fba0 9302 	umull	r9, r3, r0, r2
 8008a86:	eba4 040c 	sub.w	r4, r4, ip
 8008a8a:	429c      	cmp	r4, r3
 8008a8c:	46ce      	mov	lr, r9
 8008a8e:	469c      	mov	ip, r3
 8008a90:	d351      	bcc.n	8008b36 <__udivmoddi4+0x28a>
 8008a92:	d04e      	beq.n	8008b32 <__udivmoddi4+0x286>
 8008a94:	b155      	cbz	r5, 8008aac <__udivmoddi4+0x200>
 8008a96:	ebb8 030e 	subs.w	r3, r8, lr
 8008a9a:	eb64 040c 	sbc.w	r4, r4, ip
 8008a9e:	fa04 f606 	lsl.w	r6, r4, r6
 8008aa2:	40cb      	lsrs	r3, r1
 8008aa4:	431e      	orrs	r6, r3
 8008aa6:	40cc      	lsrs	r4, r1
 8008aa8:	e9c5 6400 	strd	r6, r4, [r5]
 8008aac:	2100      	movs	r1, #0
 8008aae:	e750      	b.n	8008952 <__udivmoddi4+0xa6>
 8008ab0:	f1c2 0320 	rsb	r3, r2, #32
 8008ab4:	fa20 f103 	lsr.w	r1, r0, r3
 8008ab8:	fa0c fc02 	lsl.w	ip, ip, r2
 8008abc:	fa24 f303 	lsr.w	r3, r4, r3
 8008ac0:	4094      	lsls	r4, r2
 8008ac2:	430c      	orrs	r4, r1
 8008ac4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8008ac8:	fa00 fe02 	lsl.w	lr, r0, r2
 8008acc:	fa1f f78c 	uxth.w	r7, ip
 8008ad0:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ad4:	fb08 3110 	mls	r1, r8, r0, r3
 8008ad8:	0c23      	lsrs	r3, r4, #16
 8008ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008ade:	fb00 f107 	mul.w	r1, r0, r7
 8008ae2:	4299      	cmp	r1, r3
 8008ae4:	d908      	bls.n	8008af8 <__udivmoddi4+0x24c>
 8008ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8008aea:	f100 36ff 	add.w	r6, r0, #4294967295
 8008aee:	d22c      	bcs.n	8008b4a <__udivmoddi4+0x29e>
 8008af0:	4299      	cmp	r1, r3
 8008af2:	d92a      	bls.n	8008b4a <__udivmoddi4+0x29e>
 8008af4:	3802      	subs	r0, #2
 8008af6:	4463      	add	r3, ip
 8008af8:	1a5b      	subs	r3, r3, r1
 8008afa:	b2a4      	uxth	r4, r4
 8008afc:	fbb3 f1f8 	udiv	r1, r3, r8
 8008b00:	fb08 3311 	mls	r3, r8, r1, r3
 8008b04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b08:	fb01 f307 	mul.w	r3, r1, r7
 8008b0c:	42a3      	cmp	r3, r4
 8008b0e:	d908      	bls.n	8008b22 <__udivmoddi4+0x276>
 8008b10:	eb1c 0404 	adds.w	r4, ip, r4
 8008b14:	f101 36ff 	add.w	r6, r1, #4294967295
 8008b18:	d213      	bcs.n	8008b42 <__udivmoddi4+0x296>
 8008b1a:	42a3      	cmp	r3, r4
 8008b1c:	d911      	bls.n	8008b42 <__udivmoddi4+0x296>
 8008b1e:	3902      	subs	r1, #2
 8008b20:	4464      	add	r4, ip
 8008b22:	1ae4      	subs	r4, r4, r3
 8008b24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b28:	e739      	b.n	800899e <__udivmoddi4+0xf2>
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	e6f0      	b.n	8008910 <__udivmoddi4+0x64>
 8008b2e:	4608      	mov	r0, r1
 8008b30:	e706      	b.n	8008940 <__udivmoddi4+0x94>
 8008b32:	45c8      	cmp	r8, r9
 8008b34:	d2ae      	bcs.n	8008a94 <__udivmoddi4+0x1e8>
 8008b36:	ebb9 0e02 	subs.w	lr, r9, r2
 8008b3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8008b3e:	3801      	subs	r0, #1
 8008b40:	e7a8      	b.n	8008a94 <__udivmoddi4+0x1e8>
 8008b42:	4631      	mov	r1, r6
 8008b44:	e7ed      	b.n	8008b22 <__udivmoddi4+0x276>
 8008b46:	4603      	mov	r3, r0
 8008b48:	e799      	b.n	8008a7e <__udivmoddi4+0x1d2>
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	e7d4      	b.n	8008af8 <__udivmoddi4+0x24c>
 8008b4e:	46d6      	mov	lr, sl
 8008b50:	e77f      	b.n	8008a52 <__udivmoddi4+0x1a6>
 8008b52:	4463      	add	r3, ip
 8008b54:	3802      	subs	r0, #2
 8008b56:	e74d      	b.n	80089f4 <__udivmoddi4+0x148>
 8008b58:	4606      	mov	r6, r0
 8008b5a:	4623      	mov	r3, r4
 8008b5c:	4608      	mov	r0, r1
 8008b5e:	e70f      	b.n	8008980 <__udivmoddi4+0xd4>
 8008b60:	3e02      	subs	r6, #2
 8008b62:	4463      	add	r3, ip
 8008b64:	e730      	b.n	80089c8 <__udivmoddi4+0x11c>
 8008b66:	bf00      	nop

08008b68 <__errno>:
 8008b68:	4b01      	ldr	r3, [pc, #4]	@ (8008b70 <__errno+0x8>)
 8008b6a:	6818      	ldr	r0, [r3, #0]
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	20000020 	.word	0x20000020

08008b74 <_init>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	bf00      	nop
 8008b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7a:	bc08      	pop	{r3}
 8008b7c:	469e      	mov	lr, r3
 8008b7e:	4770      	bx	lr

08008b80 <_fini>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	bf00      	nop
 8008b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b86:	bc08      	pop	{r3}
 8008b88:	469e      	mov	lr, r3
 8008b8a:	4770      	bx	lr
 8008b8c:	0000      	movs	r0, r0
	...
